<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<bindings>
  <namespace name="ShaderSlang.Net.Bindings.Generated">
    <struct
      name="IDevice"
      access="public"
      native="struct IDevice : ISlangUnknown"
      parent="ISlangUnknown"
      vtbl="true"
      unsafe="true"
    >
      <field name="lpVtbl" access="public">
        <type>Vtbl*</type>
      </field>
      <delegate name="_queryInterface" access="public" convention="StdCall" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
        <param name="uuid">
          <type>SlangUUID*</type>
        </param>
        <param name="outObject">
          <type>void**</type>
        </param>
      </delegate>
      <delegate name="_addRef" access="public" convention="StdCall">
        <type native="uint32_t">uint</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
      </delegate>
      <delegate name="_release" access="public" convention="StdCall">
        <type native="uint32_t">uint</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
      </delegate>
      <delegate name="_getNativeDeviceHandles" access="public" convention="StdCall" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
        <param name="outHandles">
          <type>InteropHandles*</type>
        </param>
      </delegate>
      <delegate name="_hasFeature" access="public" convention="StdCall" unsafe="true">
        <type native="bool">Boolean</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
        <param name="feature">
          <type>sbyte*</type>
        </param>
      </delegate>
      <delegate name="_getFeatures" access="public" convention="StdCall" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
        <param name="outFeatures">
          <type>sbyte**</type>
        </param>
        <param name="bufferSize">
          <type>nuint</type>
        </param>
        <param name="outFeatureCount">
          <type>int*</type>
        </param>
      </delegate>
      <delegate
        name="_getFormatSupportedResourceStates"
        access="public"
        convention="StdCall"
        unsafe="true"
      >
        <type native="gfx::Result">int</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
        <param name="format">
          <type>Format</type>
        </param>
        <param name="outStates">
          <type>ulong*</type>
        </param>
      </delegate>
      <delegate name="_getSlangSession" access="public" convention="StdCall" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
        <param name="outSlangSession">
          <type>ISession**</type>
        </param>
      </delegate>
      <delegate
        name="_createTransientResourceHeap"
        access="public"
        convention="StdCall"
        unsafe="true"
      >
        <type native="gfx::Result">int</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
        <param name="desc">
          <type>TransientResourceHeapDesc*</type>
        </param>
        <param name="outHeap">
          <type>ITransientResourceHeap**</type>
        </param>
      </delegate>
      <delegate name="_createTextureResource" access="public" convention="StdCall" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
        <param name="desc">
          <type>TextureResourceDesc*</type>
        </param>
        <param name="initData">
          <type>SubresourceData*</type>
        </param>
        <param name="outResource">
          <type>ITextureResource**</type>
        </param>
      </delegate>
      <delegate
        name="_createTextureFromNativeHandle"
        access="public"
        convention="StdCall"
        unsafe="true"
      >
        <type native="gfx::Result">int</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
        <param name="handle">
          <type>InteropHandle</type>
        </param>
        <param name="srcDesc">
          <type>TextureResourceDesc*</type>
        </param>
        <param name="outResource">
          <type>ITextureResource**</type>
        </param>
      </delegate>
      <delegate
        name="_createTextureFromSharedHandle"
        access="public"
        convention="StdCall"
        unsafe="true"
      >
        <type native="gfx::Result">int</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
        <param name="handle">
          <type>InteropHandle</type>
        </param>
        <param name="srcDesc">
          <type>TextureResourceDesc*</type>
        </param>
        <param name="size">
          <type>nuint</type>
        </param>
        <param name="outResource">
          <type>ITextureResource**</type>
        </param>
      </delegate>
      <delegate name="_createBufferResource" access="public" convention="StdCall" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
        <param name="desc">
          <type>BufferResourceDesc*</type>
        </param>
        <param name="initData">
          <type>void*</type>
        </param>
        <param name="outResource">
          <type>IBufferResource**</type>
        </param>
      </delegate>
      <delegate
        name="_createBufferFromNativeHandle"
        access="public"
        convention="StdCall"
        unsafe="true"
      >
        <type native="gfx::Result">int</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
        <param name="handle">
          <type>InteropHandle</type>
        </param>
        <param name="srcDesc">
          <type>BufferResourceDesc*</type>
        </param>
        <param name="outResource">
          <type>IBufferResource**</type>
        </param>
      </delegate>
      <delegate
        name="_createBufferFromSharedHandle"
        access="public"
        convention="StdCall"
        unsafe="true"
      >
        <type native="gfx::Result">int</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
        <param name="handle">
          <type>InteropHandle</type>
        </param>
        <param name="srcDesc">
          <type>BufferResourceDesc*</type>
        </param>
        <param name="outResource">
          <type>IBufferResource**</type>
        </param>
      </delegate>
      <delegate name="_createSamplerState" access="public" convention="StdCall" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
        <param name="desc">
          <type>SamplerStateDesc*</type>
        </param>
        <param name="outSampler">
          <type>ISamplerState**</type>
        </param>
      </delegate>
      <delegate name="_createTextureView" access="public" convention="StdCall" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
        <param name="texture">
          <type>ITextureResource*</type>
        </param>
        <param name="desc">
          <type>ResourceViewDesc*</type>
        </param>
        <param name="outView">
          <type>IResourceView**</type>
        </param>
      </delegate>
      <delegate name="_createBufferView" access="public" convention="StdCall" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
        <param name="buffer">
          <type>IBufferResource*</type>
        </param>
        <param name="counterBuffer">
          <type>IBufferResource*</type>
        </param>
        <param name="desc">
          <type>ResourceViewDesc*</type>
        </param>
        <param name="outView">
          <type>IResourceView**</type>
        </param>
      </delegate>
      <delegate name="_createFramebufferLayout" access="public" convention="StdCall" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
        <param name="desc">
          <type>FramebufferLayoutDesc*</type>
        </param>
        <param name="outFrameBuffer">
          <type>IFramebufferLayout**</type>
        </param>
      </delegate>
      <delegate name="_createFramebuffer" access="public" convention="StdCall" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
        <param name="desc">
          <type>FramebufferDesc*</type>
        </param>
        <param name="outFrameBuffer">
          <type>IFramebuffer**</type>
        </param>
      </delegate>
      <delegate name="_createRenderPassLayout" access="public" convention="StdCall" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
        <param name="desc">
          <type>RenderPassLayoutDesc*</type>
        </param>
        <param name="outRenderPassLayout">
          <type>IRenderPassLayout**</type>
        </param>
      </delegate>
      <delegate name="_createSwapchain" access="public" convention="StdCall" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
        <param name="desc">
          <type>SwapchainDesc*</type>
        </param>
        <param name="window">
          <type>WindowHandle</type>
        </param>
        <param name="outSwapchain">
          <type>ISwapchain**</type>
        </param>
      </delegate>
      <delegate name="_createInputLayout" access="public" convention="StdCall" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
        <param name="desc">
          <type>InputLayoutDesc*</type>
        </param>
        <param name="outLayout">
          <type>IInputLayout**</type>
        </param>
      </delegate>
      <delegate name="_createCommandQueue" access="public" convention="StdCall" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
        <param name="desc">
          <type>CommandQueueDesc*</type>
        </param>
        <param name="outQueue">
          <type>ICommandQueue**</type>
        </param>
      </delegate>
      <delegate name="_createShaderObject" access="public" convention="StdCall" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
        <param name="type">
          <type>TypeReflection*</type>
        </param>
        <param name="container">
          <type>ShaderObjectContainerType</type>
        </param>
        <param name="outObject">
          <type>IShaderObject**</type>
        </param>
      </delegate>
      <delegate
        name="_createMutableShaderObject"
        access="public"
        convention="StdCall"
        unsafe="true"
      >
        <type native="gfx::Result">int</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
        <param name="type">
          <type>TypeReflection*</type>
        </param>
        <param name="container">
          <type>ShaderObjectContainerType</type>
        </param>
        <param name="outObject">
          <type>IShaderObject**</type>
        </param>
      </delegate>
      <delegate
        name="_createShaderObjectFromTypeLayout"
        access="public"
        convention="StdCall"
        unsafe="true"
      >
        <type native="gfx::Result">int</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
        <param name="typeLayout">
          <type>TypeLayoutReflection*</type>
        </param>
        <param name="outObject">
          <type>IShaderObject**</type>
        </param>
      </delegate>
      <delegate
        name="_createMutableShaderObjectFromTypeLayout"
        access="public"
        convention="StdCall"
        unsafe="true"
      >
        <type native="gfx::Result">int</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
        <param name="typeLayout">
          <type>TypeLayoutReflection*</type>
        </param>
        <param name="outObject">
          <type>IShaderObject**</type>
        </param>
      </delegate>
      <delegate
        name="_createMutableRootShaderObject"
        access="public"
        convention="StdCall"
        unsafe="true"
      >
        <type native="gfx::Result">int</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
        <param name="program">
          <type>IShaderProgram*</type>
        </param>
        <param name="outObject">
          <type>IShaderObject**</type>
        </param>
      </delegate>
      <delegate name="_createShaderTable" access="public" convention="StdCall" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
        <param name="desc">
          <type>ShaderTableDesc*</type>
        </param>
        <param name="outTable">
          <type>IShaderTable**</type>
        </param>
      </delegate>
      <delegate name="_createProgram" access="public" convention="StdCall" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
        <param name="desc">
          <type>ShaderProgramDesc*</type>
        </param>
        <param name="outProgram">
          <type>IShaderProgram**</type>
        </param>
        <param name="outDiagnosticBlob">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
      </delegate>
      <delegate name="_createProgram2" access="public" convention="StdCall" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
        <param name="createDesc">
          <type>CreateDesc2*</type>
        </param>
        <param name="outProgram">
          <type>IShaderProgram**</type>
        </param>
        <param name="outDiagnosticBlob">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
      </delegate>
      <delegate
        name="_createGraphicsPipelineState"
        access="public"
        convention="StdCall"
        unsafe="true"
      >
        <type native="gfx::Result">int</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
        <param name="desc">
          <type>GraphicsPipelineStateDesc*</type>
        </param>
        <param name="outState">
          <type>IPipelineState**</type>
        </param>
      </delegate>
      <delegate
        name="_createComputePipelineState"
        access="public"
        convention="StdCall"
        unsafe="true"
      >
        <type native="gfx::Result">int</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
        <param name="desc">
          <type>ComputePipelineStateDesc*</type>
        </param>
        <param name="outState">
          <type>IPipelineState**</type>
        </param>
      </delegate>
      <delegate
        name="_createRayTracingPipelineState"
        access="public"
        convention="StdCall"
        unsafe="true"
      >
        <type native="gfx::Result">int</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
        <param name="desc">
          <type>RayTracingPipelineStateDesc*</type>
        </param>
        <param name="outState">
          <type>IPipelineState**</type>
        </param>
      </delegate>
      <delegate name="_readTextureResource" access="public" convention="StdCall" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
        <param name="resource">
          <type>ITextureResource*</type>
        </param>
        <param name="state">
          <type>ResourceState</type>
        </param>
        <param name="outBlob">
          <type>ISlangBlob**</type>
        </param>
        <param name="outRowPitch">
          <type>nuint*</type>
        </param>
        <param name="outPixelSize">
          <type>nuint*</type>
        </param>
      </delegate>
      <delegate name="_readBufferResource" access="public" convention="StdCall" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
        <param name="buffer">
          <type>IBufferResource*</type>
        </param>
        <param name="offset">
          <type>nuint</type>
        </param>
        <param name="size">
          <type>nuint</type>
        </param>
        <param name="outBlob">
          <type>ISlangBlob**</type>
        </param>
      </delegate>
      <delegate
        name="_getDeviceInfo"
        access="public"
        convention="StdCall"
        readonly="true"
        unsafe="true"
      >
        <type native="const DeviceInfo &amp;">DeviceInfo*</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
      </delegate>
      <delegate name="_createQueryPool" access="public" convention="StdCall" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
        <param name="desc">
          <type>QueryPoolDesc*</type>
        </param>
        <param name="outPool">
          <type>IQueryPool**</type>
        </param>
      </delegate>
      <delegate
        name="_getAccelerationStructurePrebuildInfo"
        access="public"
        convention="StdCall"
        unsafe="true"
      >
        <type native="gfx::Result">int</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
        <param name="buildInputs">
          <type>BuildInputs*</type>
        </param>
        <param name="outPrebuildInfo">
          <type>PrebuildInfo*</type>
        </param>
      </delegate>
      <delegate
        name="_createAccelerationStructure"
        access="public"
        convention="StdCall"
        unsafe="true"
      >
        <type native="gfx::Result">int</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
        <param name="desc">
          <type>CreateDesc*</type>
        </param>
        <param name="outView">
          <type>IAccelerationStructure**</type>
        </param>
      </delegate>
      <delegate name="_createFence" access="public" convention="StdCall" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
        <param name="desc">
          <type>FenceDesc*</type>
        </param>
        <param name="outFence">
          <type>IFence**</type>
        </param>
      </delegate>
      <delegate name="_waitForFences" access="public" convention="StdCall" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
        <param name="fenceCount">
          <type>int</type>
        </param>
        <param name="fences">
          <type>IFence**</type>
        </param>
        <param name="values">
          <type>ulong*</type>
        </param>
        <param name="waitForAll">
          <type>Boolean</type>
        </param>
        <param name="timeout">
          <type>ulong</type>
        </param>
      </delegate>
      <delegate name="_getTextureAllocationInfo" access="public" convention="StdCall" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
        <param name="desc">
          <type>TextureResourceDesc*</type>
        </param>
        <param name="outSize">
          <type>nuint*</type>
        </param>
        <param name="outAlignment">
          <type>nuint*</type>
        </param>
      </delegate>
      <delegate name="_getTextureRowAlignment" access="public" convention="StdCall" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
        <param name="outAlignment">
          <type>nuint*</type>
        </param>
      </delegate>
      <delegate
        name="_getCooperativeVectorProperties"
        access="public"
        convention="StdCall"
        unsafe="true"
      >
        <type native="gfx::Result">int</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
        <param name="properties">
          <type>CooperativeVectorProperties*</type>
        </param>
        <param name="propertyCount">
          <type>uint*</type>
        </param>
      </delegate>
      <delegate name="_createShaderObject2" access="public" convention="StdCall" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
        <param name="slangSession">
          <type>ISession*</type>
        </param>
        <param name="type">
          <type>TypeReflection*</type>
        </param>
        <param name="container">
          <type>ShaderObjectContainerType</type>
        </param>
        <param name="outObject">
          <type>IShaderObject**</type>
        </param>
      </delegate>
      <delegate
        name="_createMutableShaderObject2"
        access="public"
        convention="StdCall"
        unsafe="true"
      >
        <type native="gfx::Result">int</type>
        <param name="pThis">
          <type>IDevice*</type>
        </param>
        <param name="slangSession">
          <type>ISession*</type>
        </param>
        <param name="type">
          <type>TypeReflection*</type>
        </param>
        <param name="container">
          <type>ShaderObjectContainerType</type>
        </param>
        <param name="outObject">
          <type>IShaderObject**</type>
        </param>
      </delegate>
      <struct name="SlangDesc" access="public" unsafe="true">
        <field name="slangGlobalSession" access="public">
          <type native="slang::IGlobalSession *">IGlobalSession*</type>
        </field>
        <field name="defaultMatrixLayoutMode" access="public">
          <type native="SlangMatrixLayoutMode">MatrixLayoutMode</type>
        </field>
        <field name="searchPaths" access="public">
          <type native="const char *const *">sbyte**</type>
        </field>
        <field name="searchPathCount" access="public">
          <type native="gfx::GfxCount">int</type>
        </field>
        <field name="preprocessorMacros" access="public">
          <type native="const slang::PreprocessorMacroDesc *">PreprocessorMacroDesc*</type>
        </field>
        <field name="preprocessorMacroCount" access="public">
          <type native="gfx::GfxCount">int</type>
        </field>
        <field name="targetProfile" access="public">
          <type native="const char *">sbyte*</type>
        </field>
        <field name="floatingPointMode" access="public">
          <type native="SlangFloatingPointMode">FloatingPointMode</type>
        </field>
        <field name="optimizationLevel" access="public">
          <type native="SlangOptimizationLevel">OptimizationLevel</type>
        </field>
        <field name="targetFlags" access="public">
          <type native="SlangTargetFlags">uint</type>
        </field>
        <field name="lineDirectiveMode" access="public">
          <type native="SlangLineDirectiveMode">LineDirectiveMode</type>
        </field>
      </struct>
      <struct name="ShaderCacheDesc" access="public" unsafe="true">
        <field name="shaderCachePath" access="public">
          <type native="const char *">sbyte*</type>
        </field>
        <field name="maxEntryCount" access="public">
          <type native="gfx::GfxCount">int</type>
        </field>
      </struct>
      <struct name="InteropHandles" access="public">
        <field name="handles" access="public">
          <type native="InteropHandle[3]" count="3" fixed="_handles_e__FixedBuffer"
            >InteropHandle</type
          >
        </field>
        <struct name="_handles_e__FixedBuffer" access="public">
          <attribute>InlineArray(3)</attribute>
          <field name="e0" access="public">
            <type>InteropHandle</type>
          </field>
        </struct>
      </struct>
      <struct name="DeviceDesc" access="public" unsafe="true">
        <field name="deviceType" access="public">
          <type native="gfx::DeviceType">DeviceType</type>
        </field>
        <field name="existingDeviceHandles" access="public">
          <type native="gfx::IDevice::InteropHandles">InteropHandles</type>
        </field>
        <field name="adapterLUID" access="public">
          <type native="const AdapterLUID *">AdapterLUID*</type>
        </field>
        <field name="requiredFeatureCount" access="public">
          <type native="gfx::GfxCount">int</type>
        </field>
        <field name="requiredFeatures" access="public">
          <type native="const char **">sbyte**</type>
        </field>
        <field name="apiCommandDispatcher" access="public">
          <type>ISlangUnknown*</type>
        </field>
        <field name="nvapiExtnSlot" access="public">
          <type native="gfx::GfxIndex">int</type>
        </field>
        <field name="shaderCache" access="public">
          <type native="gfx::IDevice::ShaderCacheDesc">ShaderCacheDesc</type>
        </field>
        <field name="slang" access="public">
          <type native="gfx::IDevice::SlangDesc">SlangDesc</type>
        </field>
        <field name="extendedDescCount" access="public">
          <type native="gfx::GfxCount">int</type>
        </field>
        <field name="extendedDescs" access="public">
          <type>void**</type>
        </field>
      </struct>
      <function name="queryInterface" access="public" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="uuid">
          <type>SlangUUID*</type>
        </param>
        <param name="outObject">
          <type>void**</type>
        </param>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_queryInterface</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >queryInterface</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(ref this)</param>, <param
              name="uuid"
              >uuid</param
            >, <param name="outObject">outObject</param>);</code
          >
        </body>
      </function>
      <function name="addRef" access="public" unsafe="true">
        <type native="uint32_t">uint</type>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_addRef</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >addRef</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(ref this)</param>);</code
          >
        </body>
      </function>
      <function name="release" access="public" unsafe="true">
        <type native="uint32_t">uint</type>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_release</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >release</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(ref this)</param>);</code
          >
        </body>
      </function>
      <function name="getNativeDeviceHandles" access="public" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="outHandles">
          <type>InteropHandles*</type>
        </param>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_getNativeDeviceHandles</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >getNativeDeviceHandles</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(ref this)</param>, <param
              name="outHandles"
              >outHandles</param
            >);</code
          >
        </body>
      </function>
      <function name="hasFeature" access="public" unsafe="true">
        <type native="bool">Boolean</type>
        <param name="feature">
          <type>sbyte*</type>
        </param>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_hasFeature</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >hasFeature</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(ref this)</param>, <param
              name="feature"
              >feature</param
            >);</code
          >
        </body>
      </function>
      <function name="getFeatures" access="public" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="outFeatures">
          <type>sbyte**</type>
        </param>
        <param name="bufferSize">
          <type>nuint</type>
        </param>
        <param name="outFeatureCount">
          <type>int*</type>
        </param>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_getFeatures</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >getFeatures</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(ref this)</param>, <param
              name="outFeatures"
              >outFeatures</param
            >, <param name="bufferSize">bufferSize</param>, <param name="outFeatureCount"
              >outFeatureCount</param
            >);</code
          >
        </body>
      </function>
      <function name="getFormatSupportedResourceStates" access="public" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="format">
          <type>Format</type>
        </param>
        <param name="outStates">
          <type>ulong*</type>
        </param>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_getFormatSupportedResourceStates</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >getFormatSupportedResourceStates</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(ref this)</param>, <param
              name="format"
              >format</param
            >, <param name="outStates">outStates</param>);</code
          >
        </body>
      </function>
      <function name="getSlangSession" access="public" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="outSlangSession">
          <type>ISession**</type>
        </param>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_getSlangSession</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >getSlangSession</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(ref this)</param>, <param
              name="outSlangSession"
              >outSlangSession</param
            >);</code
          >
        </body>
      </function>
      <function name="createTransientResourceHeap" access="public" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="desc">
          <type>TransientResourceHeapDesc*</type>
        </param>
        <param name="outHeap">
          <type>ITransientResourceHeap**</type>
        </param>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_createTransientResourceHeap</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >createTransientResourceHeap</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(ref this)</param>, <param
              name="desc"
              >desc</param
            >, <param name="outHeap">outHeap</param>);</code
          >
        </body>
      </function>
      <function name="createTextureResource" access="public" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="desc">
          <type>TextureResourceDesc*</type>
        </param>
        <param name="initData">
          <type>SubresourceData*</type>
        </param>
        <param name="outResource">
          <type>ITextureResource**</type>
        </param>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_createTextureResource</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >createTextureResource</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(ref this)</param>, <param
              name="desc"
              >desc</param
            >, <param name="initData">initData</param>, <param name="outResource"
              >outResource</param
            >);</code
          >
        </body>
      </function>
      <function name="createTextureFromNativeHandle" access="public" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="handle">
          <type>InteropHandle</type>
        </param>
        <param name="srcDesc">
          <type>TextureResourceDesc*</type>
        </param>
        <param name="outResource">
          <type>ITextureResource**</type>
        </param>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_createTextureFromNativeHandle</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >createTextureFromNativeHandle</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(ref this)</param>, <param
              name="handle"
              >handle</param
            >, <param name="srcDesc">srcDesc</param>, <param name="outResource"
              >outResource</param
            >);</code
          >
        </body>
      </function>
      <function name="createTextureFromSharedHandle" access="public" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="handle">
          <type>InteropHandle</type>
        </param>
        <param name="srcDesc">
          <type>TextureResourceDesc*</type>
        </param>
        <param name="size">
          <type>nuint</type>
        </param>
        <param name="outResource">
          <type>ITextureResource**</type>
        </param>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_createTextureFromSharedHandle</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >createTextureFromSharedHandle</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(ref this)</param>, <param
              name="handle"
              >handle</param
            >, <param name="srcDesc">srcDesc</param>, <param name="size">size</param>, <param
              name="outResource"
              >outResource</param
            >);</code
          >
        </body>
      </function>
      <function name="createBufferResource" access="public" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="desc">
          <type>BufferResourceDesc*</type>
        </param>
        <param name="initData">
          <type>void*</type>
        </param>
        <param name="outResource">
          <type>IBufferResource**</type>
        </param>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_createBufferResource</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >createBufferResource</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(ref this)</param>, <param
              name="desc"
              >desc</param
            >, <param name="initData">initData</param>, <param name="outResource"
              >outResource</param
            >);</code
          >
        </body>
      </function>
      <function name="createBufferFromNativeHandle" access="public" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="handle">
          <type>InteropHandle</type>
        </param>
        <param name="srcDesc">
          <type>BufferResourceDesc*</type>
        </param>
        <param name="outResource">
          <type>IBufferResource**</type>
        </param>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_createBufferFromNativeHandle</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >createBufferFromNativeHandle</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(ref this)</param>, <param
              name="handle"
              >handle</param
            >, <param name="srcDesc">srcDesc</param>, <param name="outResource"
              >outResource</param
            >);</code
          >
        </body>
      </function>
      <function name="createBufferFromSharedHandle" access="public" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="handle">
          <type>InteropHandle</type>
        </param>
        <param name="srcDesc">
          <type>BufferResourceDesc*</type>
        </param>
        <param name="outResource">
          <type>IBufferResource**</type>
        </param>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_createBufferFromSharedHandle</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >createBufferFromSharedHandle</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(ref this)</param>, <param
              name="handle"
              >handle</param
            >, <param name="srcDesc">srcDesc</param>, <param name="outResource"
              >outResource</param
            >);</code
          >
        </body>
      </function>
      <function name="createSamplerState" access="public" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="desc">
          <type>SamplerStateDesc*</type>
        </param>
        <param name="outSampler">
          <type>ISamplerState**</type>
        </param>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_createSamplerState</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >createSamplerState</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(ref this)</param>, <param
              name="desc"
              >desc</param
            >, <param name="outSampler">outSampler</param>);</code
          >
        </body>
      </function>
      <function name="createTextureView" access="public" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="texture">
          <type>ITextureResource*</type>
        </param>
        <param name="desc">
          <type>ResourceViewDesc*</type>
        </param>
        <param name="outView">
          <type>IResourceView**</type>
        </param>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_createTextureView</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >createTextureView</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(ref this)</param>, <param
              name="texture"
              >texture</param
            >, <param name="desc">desc</param>, <param name="outView">outView</param>);</code
          >
        </body>
      </function>
      <function name="createBufferView" access="public" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="buffer">
          <type>IBufferResource*</type>
        </param>
        <param name="counterBuffer">
          <type>IBufferResource*</type>
        </param>
        <param name="desc">
          <type>ResourceViewDesc*</type>
        </param>
        <param name="outView">
          <type>IResourceView**</type>
        </param>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_createBufferView</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >createBufferView</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(ref this)</param>, <param
              name="buffer"
              >buffer</param
            >, <param name="counterBuffer">counterBuffer</param>, <param name="desc"
              >desc</param
            >, <param name="outView">outView</param>);</code
          >
        </body>
      </function>
      <function name="createFramebufferLayout" access="public" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="desc">
          <type>FramebufferLayoutDesc*</type>
        </param>
        <param name="outFrameBuffer">
          <type>IFramebufferLayout**</type>
        </param>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_createFramebufferLayout</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >createFramebufferLayout</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(ref this)</param>, <param
              name="desc"
              >desc</param
            >, <param name="outFrameBuffer">outFrameBuffer</param>);</code
          >
        </body>
      </function>
      <function name="createFramebuffer" access="public" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="desc">
          <type>FramebufferDesc*</type>
        </param>
        <param name="outFrameBuffer">
          <type>IFramebuffer**</type>
        </param>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_createFramebuffer</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >createFramebuffer</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(ref this)</param>, <param
              name="desc"
              >desc</param
            >, <param name="outFrameBuffer">outFrameBuffer</param>);</code
          >
        </body>
      </function>
      <function name="createRenderPassLayout" access="public" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="desc">
          <type>RenderPassLayoutDesc*</type>
        </param>
        <param name="outRenderPassLayout">
          <type>IRenderPassLayout**</type>
        </param>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_createRenderPassLayout</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >createRenderPassLayout</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(ref this)</param>, <param
              name="desc"
              >desc</param
            >, <param name="outRenderPassLayout">outRenderPassLayout</param>);</code
          >
        </body>
      </function>
      <function name="createSwapchain" access="public" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="desc">
          <type>SwapchainDesc*</type>
        </param>
        <param name="window">
          <type>WindowHandle</type>
        </param>
        <param name="outSwapchain">
          <type>ISwapchain**</type>
        </param>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_createSwapchain</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >createSwapchain</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(ref this)</param>, <param
              name="desc"
              >desc</param
            >, <param name="window">window</param>, <param name="outSwapchain"
              >outSwapchain</param
            >);</code
          >
        </body>
      </function>
      <function name="createInputLayout" access="public" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="desc">
          <type>InputLayoutDesc*</type>
        </param>
        <param name="outLayout">
          <type>IInputLayout**</type>
        </param>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_createInputLayout</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >createInputLayout</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(ref this)</param>, <param
              name="desc"
              >desc</param
            >, <param name="outLayout">outLayout</param>);</code
          >
        </body>
      </function>
      <function name="createCommandQueue" access="public" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="desc">
          <type>CommandQueueDesc*</type>
        </param>
        <param name="outQueue">
          <type>ICommandQueue**</type>
        </param>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_createCommandQueue</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >createCommandQueue</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(ref this)</param>, <param
              name="desc"
              >desc</param
            >, <param name="outQueue">outQueue</param>);</code
          >
        </body>
      </function>
      <function name="createShaderObject" access="public" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="type">
          <type>TypeReflection*</type>
        </param>
        <param name="container">
          <type>ShaderObjectContainerType</type>
        </param>
        <param name="outObject">
          <type>IShaderObject**</type>
        </param>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_createShaderObject</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >createShaderObject</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(ref this)</param>, <param
              name="type"
              >type</param
            >, <param name="container">container</param>, <param name="outObject"
              >outObject</param
            >);</code
          >
        </body>
      </function>
      <function name="createMutableShaderObject" access="public" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="type">
          <type>TypeReflection*</type>
        </param>
        <param name="container">
          <type>ShaderObjectContainerType</type>
        </param>
        <param name="outObject">
          <type>IShaderObject**</type>
        </param>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_createMutableShaderObject</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >createMutableShaderObject</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(ref this)</param>, <param
              name="type"
              >type</param
            >, <param name="container">container</param>, <param name="outObject"
              >outObject</param
            >);</code
          >
        </body>
      </function>
      <function name="createShaderObjectFromTypeLayout" access="public" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="typeLayout">
          <type>TypeLayoutReflection*</type>
        </param>
        <param name="outObject">
          <type>IShaderObject**</type>
        </param>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_createShaderObjectFromTypeLayout</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >createShaderObjectFromTypeLayout</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(ref this)</param>, <param
              name="typeLayout"
              >typeLayout</param
            >, <param name="outObject">outObject</param>);</code
          >
        </body>
      </function>
      <function name="createMutableShaderObjectFromTypeLayout" access="public" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="typeLayout">
          <type>TypeLayoutReflection*</type>
        </param>
        <param name="outObject">
          <type>IShaderObject**</type>
        </param>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_createMutableShaderObjectFromTypeLayout</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >createMutableShaderObjectFromTypeLayout</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(ref this)</param>, <param
              name="typeLayout"
              >typeLayout</param
            >, <param name="outObject">outObject</param>);</code
          >
        </body>
      </function>
      <function name="createMutableRootShaderObject" access="public" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="program">
          <type>IShaderProgram*</type>
        </param>
        <param name="outObject">
          <type>IShaderObject**</type>
        </param>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_createMutableRootShaderObject</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >createMutableRootShaderObject</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(ref this)</param>, <param
              name="program"
              >program</param
            >, <param name="outObject">outObject</param>);</code
          >
        </body>
      </function>
      <function name="createShaderTable" access="public" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="desc">
          <type>ShaderTableDesc*</type>
        </param>
        <param name="outTable">
          <type>IShaderTable**</type>
        </param>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_createShaderTable</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >createShaderTable</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(ref this)</param>, <param
              name="desc"
              >desc</param
            >, <param name="outTable">outTable</param>);</code
          >
        </body>
      </function>
      <function name="createProgram" access="public" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="desc">
          <type>ShaderProgramDesc*</type>
        </param>
        <param name="outProgram">
          <type>IShaderProgram**</type>
        </param>
        <param name="outDiagnosticBlob">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_createProgram</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >createProgram</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(ref this)</param>, <param
              name="desc"
              >desc</param
            >, <param name="outProgram">outProgram</param>, <param name="outDiagnosticBlob"
              >outDiagnosticBlob</param
            >);</code
          >
        </body>
      </function>
      <function name="createProgram2" access="public" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="createDesc">
          <type>CreateDesc2*</type>
        </param>
        <param name="outProgram">
          <type>IShaderProgram**</type>
        </param>
        <param name="outDiagnosticBlob">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_createProgram2</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >createProgram2</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(ref this)</param>, <param
              name="createDesc"
              >createDesc</param
            >, <param name="outProgram">outProgram</param>, <param name="outDiagnosticBlob"
              >outDiagnosticBlob</param
            >);</code
          >
        </body>
      </function>
      <function name="createGraphicsPipelineState" access="public" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="desc">
          <type>GraphicsPipelineStateDesc*</type>
        </param>
        <param name="outState">
          <type>IPipelineState**</type>
        </param>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_createGraphicsPipelineState</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >createGraphicsPipelineState</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(ref this)</param>, <param
              name="desc"
              >desc</param
            >, <param name="outState">outState</param>);</code
          >
        </body>
      </function>
      <function name="createComputePipelineState" access="public" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="desc">
          <type>ComputePipelineStateDesc*</type>
        </param>
        <param name="outState">
          <type>IPipelineState**</type>
        </param>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_createComputePipelineState</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >createComputePipelineState</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(ref this)</param>, <param
              name="desc"
              >desc</param
            >, <param name="outState">outState</param>);</code
          >
        </body>
      </function>
      <function name="createRayTracingPipelineState" access="public" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="desc">
          <type>RayTracingPipelineStateDesc*</type>
        </param>
        <param name="outState">
          <type>IPipelineState**</type>
        </param>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_createRayTracingPipelineState</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >createRayTracingPipelineState</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(ref this)</param>, <param
              name="desc"
              >desc</param
            >, <param name="outState">outState</param>);</code
          >
        </body>
      </function>
      <function name="readTextureResource" access="public" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="resource">
          <type>ITextureResource*</type>
        </param>
        <param name="state">
          <type>ResourceState</type>
        </param>
        <param name="outBlob">
          <type>ISlangBlob**</type>
        </param>
        <param name="outRowPitch">
          <type>nuint*</type>
        </param>
        <param name="outPixelSize">
          <type>nuint*</type>
        </param>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_readTextureResource</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >readTextureResource</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(ref this)</param>, <param
              name="resource"
              >resource</param
            >, <param name="state">state</param>, <param name="outBlob">outBlob</param>, <param
              name="outRowPitch"
              >outRowPitch</param
            >, <param name="outPixelSize">outPixelSize</param>);</code
          >
        </body>
      </function>
      <function name="readBufferResource" access="public" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="buffer">
          <type>IBufferResource*</type>
        </param>
        <param name="offset">
          <type>nuint</type>
        </param>
        <param name="size">
          <type>nuint</type>
        </param>
        <param name="outBlob">
          <type>ISlangBlob**</type>
        </param>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_readBufferResource</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >readBufferResource</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(ref this)</param>, <param
              name="buffer"
              >buffer</param
            >, <param name="offset">offset</param>, <param name="size">size</param>, <param
              name="outBlob"
              >outBlob</param
            >);</code
          >
        </body>
      </function>
      <function name="getDeviceInfo" access="public" readonly="true" unsafe="true">
        <type native="const DeviceInfo &amp;">DeviceInfo*</type>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_getDeviceInfo</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >getDeviceInfo</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(in this)</param>);</code
          >
        </body>
      </function>
      <function name="createQueryPool" access="public" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="desc">
          <type>QueryPoolDesc*</type>
        </param>
        <param name="outPool">
          <type>IQueryPool**</type>
        </param>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_createQueryPool</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >createQueryPool</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(ref this)</param>, <param
              name="desc"
              >desc</param
            >, <param name="outPool">outPool</param>);</code
          >
        </body>
      </function>
      <function name="getAccelerationStructurePrebuildInfo" access="public" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="buildInputs">
          <type>BuildInputs*</type>
        </param>
        <param name="outPrebuildInfo">
          <type>PrebuildInfo*</type>
        </param>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_getAccelerationStructurePrebuildInfo</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >getAccelerationStructurePrebuildInfo</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(ref this)</param>, <param
              name="buildInputs"
              >buildInputs</param
            >, <param name="outPrebuildInfo">outPrebuildInfo</param>);</code
          >
        </body>
      </function>
      <function name="createAccelerationStructure" access="public" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="desc">
          <type>CreateDesc*</type>
        </param>
        <param name="outView">
          <type>IAccelerationStructure**</type>
        </param>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_createAccelerationStructure</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >createAccelerationStructure</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(ref this)</param>, <param
              name="desc"
              >desc</param
            >, <param name="outView">outView</param>);</code
          >
        </body>
      </function>
      <function name="createFence" access="public" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="desc">
          <type>FenceDesc*</type>
        </param>
        <param name="outFence">
          <type>IFence**</type>
        </param>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_createFence</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >createFence</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(ref this)</param>, <param
              name="desc"
              >desc</param
            >, <param name="outFence">outFence</param>);</code
          >
        </body>
      </function>
      <function name="waitForFences" access="public" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="fenceCount">
          <type>int</type>
        </param>
        <param name="fences">
          <type>IFence**</type>
        </param>
        <param name="values">
          <type>ulong*</type>
        </param>
        <param name="waitForAll">
          <type>Boolean</type>
        </param>
        <param name="timeout">
          <type>ulong</type>
        </param>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_waitForFences</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >waitForFences</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(ref this)</param>, <param
              name="fenceCount"
              >fenceCount</param
            >, <param name="fences">fences</param>, <param name="values">values</param>, <param
              name="waitForAll"
              >waitForAll</param
            >, <param name="timeout">timeout</param>);</code
          >
        </body>
      </function>
      <function name="getTextureAllocationInfo" access="public" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="desc">
          <type>TextureResourceDesc*</type>
        </param>
        <param name="outSize">
          <type>nuint*</type>
        </param>
        <param name="outAlignment">
          <type>nuint*</type>
        </param>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_getTextureAllocationInfo</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >getTextureAllocationInfo</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(ref this)</param>, <param
              name="desc"
              >desc</param
            >, <param name="outSize">outSize</param>, <param name="outAlignment"
              >outAlignment</param
            >);</code
          >
        </body>
      </function>
      <function name="getTextureRowAlignment" access="public" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="outAlignment">
          <type>nuint*</type>
        </param>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_getTextureRowAlignment</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >getTextureRowAlignment</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(ref this)</param>, <param
              name="outAlignment"
              >outAlignment</param
            >);</code
          >
        </body>
      </function>
      <function name="getCooperativeVectorProperties" access="public" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="properties">
          <type>CooperativeVectorProperties*</type>
        </param>
        <param name="propertyCount">
          <type>uint*</type>
        </param>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_getCooperativeVectorProperties</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >getCooperativeVectorProperties</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(ref this)</param>, <param
              name="properties"
              >properties</param
            >, <param name="propertyCount">propertyCount</param>);</code
          >
        </body>
      </function>
      <function name="createShaderObject2" access="public" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="slangSession">
          <type>ISession*</type>
        </param>
        <param name="type">
          <type>TypeReflection*</type>
        </param>
        <param name="container">
          <type>ShaderObjectContainerType</type>
        </param>
        <param name="outObject">
          <type>IShaderObject**</type>
        </param>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_createShaderObject2</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >createShaderObject2</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(ref this)</param>, <param
              name="slangSession"
              >slangSession</param
            >, <param name="type">type</param>, <param name="container">container</param>, <param
              name="outObject"
              >outObject</param
            >);</code
          >
        </body>
      </function>
      <function name="createMutableShaderObject2" access="public" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="slangSession">
          <type>ISession*</type>
        </param>
        <param name="type">
          <type>TypeReflection*</type>
        </param>
        <param name="container">
          <type>ShaderObjectContainerType</type>
        </param>
        <param name="outObject">
          <type>IShaderObject**</type>
        </param>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_createMutableShaderObject2</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >createMutableShaderObject2</vtbl
            >)(<param special="thisPtr">(IDevice*)Unsafe.AsPointer(ref this)</param>, <param
              name="slangSession"
              >slangSession</param
            >, <param name="type">type</param>, <param name="container">container</param>, <param
              name="outObject"
              >outObject</param
            >);</code
          >
        </body>
      </function>
      <vtbl>
        <field name="queryInterface" access="public">
          <type
            native="SlangResult (const SlangUUID &amp;, void **) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="addRef" access="public">
          <type native="uint32_t () __attribute__((nothrow)) __attribute__((stdcall))">IntPtr</type>
        </field>
        <field name="release" access="public">
          <type native="uint32_t () __attribute__((nothrow)) __attribute__((stdcall))">IntPtr</type>
        </field>
        <field name="getNativeDeviceHandles" access="public">
          <type native="Result (InteropHandles *) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="hasFeature" access="public">
          <type native="bool (const char *) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="getFeatures" access="public">
          <type
            native="Result (const char **, Size, GfxCount *) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="getFormatSupportedResourceStates" access="public">
          <type
            native="Result (Format, ResourceStateSet *) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="getSlangSession" access="public">
          <type
            native="Result (slang::ISession **) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="createTransientResourceHeap" access="public">
          <type
            native="Result (const ITransientResourceHeap::Desc &amp;, ITransientResourceHeap **) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="createTextureResource" access="public">
          <type
            native="Result (const ITextureResource::Desc &amp;, const ITextureResource::SubresourceData *, ITextureResource **) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="createTextureFromNativeHandle" access="public">
          <type
            native="Result (InteropHandle, const ITextureResource::Desc &amp;, ITextureResource **) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="createTextureFromSharedHandle" access="public">
          <type
            native="Result (InteropHandle, const ITextureResource::Desc &amp;, const Size, ITextureResource **) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="createBufferResource" access="public">
          <type
            native="Result (const IBufferResource::Desc &amp;, const void *, IBufferResource **) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="createBufferFromNativeHandle" access="public">
          <type
            native="Result (InteropHandle, const IBufferResource::Desc &amp;, IBufferResource **) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="createBufferFromSharedHandle" access="public">
          <type
            native="Result (InteropHandle, const IBufferResource::Desc &amp;, IBufferResource **) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="createSamplerState" access="public">
          <type
            native="Result (const ISamplerState::Desc &amp;, ISamplerState **) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="createTextureView" access="public">
          <type
            native="Result (ITextureResource *, const IResourceView::Desc &amp;, IResourceView **) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="createBufferView" access="public">
          <type
            native="Result (IBufferResource *, IBufferResource *, const IResourceView::Desc &amp;, IResourceView **) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="createFramebufferLayout" access="public">
          <type
            native="Result (const IFramebufferLayout::Desc &amp;, IFramebufferLayout **) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="createFramebuffer" access="public">
          <type
            native="Result (const IFramebuffer::Desc &amp;, IFramebuffer **) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="createRenderPassLayout" access="public">
          <type
            native="Result (const IRenderPassLayout::Desc &amp;, IRenderPassLayout **) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="createSwapchain" access="public">
          <type
            native="Result (const ISwapchain::Desc &amp;, WindowHandle, ISwapchain **) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="createInputLayout" access="public">
          <type
            native="Result (const IInputLayout::Desc &amp;, IInputLayout **) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="createCommandQueue" access="public">
          <type
            native="Result (const ICommandQueue::Desc &amp;, ICommandQueue **) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="createShaderObject" access="public">
          <type
            native="Result (slang::TypeReflection *, ShaderObjectContainerType, IShaderObject **) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="createMutableShaderObject" access="public">
          <type
            native="Result (slang::TypeReflection *, ShaderObjectContainerType, IShaderObject **) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="createShaderObjectFromTypeLayout" access="public">
          <type
            native="Result (slang::TypeLayoutReflection *, IShaderObject **) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="createMutableShaderObjectFromTypeLayout" access="public">
          <type
            native="Result (slang::TypeLayoutReflection *, IShaderObject **) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="createMutableRootShaderObject" access="public">
          <type
            native="Result (IShaderProgram *, IShaderObject **) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="createShaderTable" access="public">
          <type
            native="Result (const IShaderTable::Desc &amp;, IShaderTable **) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="createProgram" access="public">
          <type
            native="Result (const IShaderProgram::Desc &amp;, IShaderProgram **, ISlangBlob **) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="createProgram2" access="public">
          <type
            native="Result (const IShaderProgram::CreateDesc2 &amp;, IShaderProgram **, ISlangBlob **) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="createGraphicsPipelineState" access="public">
          <type
            native="Result (const GraphicsPipelineStateDesc &amp;, IPipelineState **) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="createComputePipelineState" access="public">
          <type
            native="Result (const ComputePipelineStateDesc &amp;, IPipelineState **) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="createRayTracingPipelineState" access="public">
          <type
            native="Result (const RayTracingPipelineStateDesc &amp;, IPipelineState **) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="readTextureResource" access="public">
          <type
            native="SlangResult (ITextureResource *, ResourceState, ISlangBlob **, Size *, Size *) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="readBufferResource" access="public">
          <type
            native="SlangResult (IBufferResource *, Offset, Size, ISlangBlob **) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="getDeviceInfo" access="public">
          <type
            native="const DeviceInfo &amp;() const __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="createQueryPool" access="public">
          <type
            native="Result (const IQueryPool::Desc &amp;, IQueryPool **) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="getAccelerationStructurePrebuildInfo" access="public">
          <type
            native="Result (const IAccelerationStructure::BuildInputs &amp;, IAccelerationStructure::PrebuildInfo *) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="createAccelerationStructure" access="public">
          <type
            native="Result (const IAccelerationStructure::CreateDesc &amp;, IAccelerationStructure **) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="createFence" access="public">
          <type
            native="Result (const IFence::Desc &amp;, IFence **) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="waitForFences" access="public">
          <type
            native="Result (GfxCount, IFence **, uint64_t *, bool, uint64_t) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="getTextureAllocationInfo" access="public">
          <type
            native="Result (const ITextureResource::Desc &amp;, Size *, Size *) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="getTextureRowAlignment" access="public">
          <type native="Result (Size *) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="getCooperativeVectorProperties" access="public">
          <type
            native="Result (CooperativeVectorProperties *, uint32_t *) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="createShaderObject2" access="public">
          <type
            native="Result (slang::ISession *, slang::TypeReflection *, ShaderObjectContainerType, IShaderObject **) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="createMutableShaderObject2" access="public">
          <type
            native="Result (slang::ISession *, slang::TypeReflection *, ShaderObjectContainerType, IShaderObject **) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
      </vtbl>
    </struct>
  </namespace>
</bindings>
