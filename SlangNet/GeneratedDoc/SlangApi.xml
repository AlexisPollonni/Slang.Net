<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
  <namespace name="SlangNet.Bindings.Generated">
    <class name="SlangApi" access="public" static="true">
      <constant name="SLANG_DIAGNOSTIC_FLAG_VERBOSE_PATHS" access="public">
        <type primitive="True">uint</type>
        <value>
          <code>0x01</code>
        </value>
      </constant>
      <constant name="SLANG_DIAGNOSTIC_FLAG_TREAT_WARNINGS_AS_ERRORS" access="public">
        <type primitive="True">uint</type>
        <value>
          <code>0x02</code>
        </value>
      </constant>
      <constant name="SLANG_COMPILE_FLAG_NO_MANGLING" access="public">
        <type primitive="True">uint</type>
        <value>
          <code>1 &lt;&lt; 3</code>
        </value>
      </constant>
      <constant name="SLANG_COMPILE_FLAG_NO_CODEGEN" access="public">
        <type primitive="True">uint</type>
        <value>
          <code>1 &lt;&lt; 4</code>
        </value>
      </constant>
      <constant name="SLANG_COMPILE_FLAG_OBFUSCATE" access="public">
        <type primitive="True">uint</type>
        <value>
          <code>1 &lt;&lt; 5</code>
        </value>
      </constant>
      <constant name="SLANG_COMPILE_FLAG_NO_CHECKING" access="public">
        <type primitive="True">uint</type>
        <value>
          <code>0</code>
        </value>
      </constant>
      <constant name="SLANG_COMPILE_FLAG_SPLIT_MIXED_TYPES" access="public">
        <type primitive="True">uint</type>
        <value>
          <code>0</code>
        </value>
      </constant>
      <constant name="SLANG_TARGET_FLAG_PARAMETER_BLOCKS_USE_REGISTER_SPACES" access="public">
        <type primitive="True">uint</type>
        <value>
          <code>1 &lt;&lt; 4</code>
        </value>
      </constant>
      <constant name="SLANG_TARGET_FLAG_GENERATE_WHOLE_PROGRAM" access="public">
        <type primitive="True">uint</type>
        <value>
          <code>1 &lt;&lt; 8</code>
        </value>
      </constant>
      <constant name="SLANG_TARGET_FLAG_DUMP_IR" access="public">
        <type primitive="True">uint</type>
        <value>
          <code>1 &lt;&lt; 9</code>
        </value>
      </constant>
      <constant name="SLANG_TARGET_FLAG_GENERATE_SPIRV_DIRECTLY" access="public">
        <type primitive="True">uint</type>
        <value>
          <code>1 &lt;&lt; 10</code>
        </value>
      </constant>
      <function name="GetBuildTagString" access="public" lib="slang" convention="Cdecl" entrypoint="spGetBuildTagString" static="true" unsafe="true">
        <type native="const char *">sbyte*</type>
      </function>
      <function name="CreateSession" access="public" lib="slang" convention="Cdecl" entrypoint="spCreateSession" static="true" unsafe="true">
        <type native="SlangSession *">IGlobalSession*</type>
        <param name="deprecated">
          <type>sbyte*</type>
          <init>
            <code>null</code>
          </init>
        </param>
      </function>
      <function name="DestroySession" access="public" lib="slang" convention="Cdecl" entrypoint="spDestroySession" static="true" unsafe="true">
        <type>void</type>
        <param name="session">
          <type>IGlobalSession*</type>
        </param>
      </function>
      <function name="SessionSetSharedLibraryLoader" access="public" lib="slang" convention="Cdecl" entrypoint="spSessionSetSharedLibraryLoader" static="true" unsafe="true">
        <type>void</type>
        <param name="session">
          <type>IGlobalSession*</type>
        </param>
        <param name="loader">
          <type>ISlangSharedLibraryLoader*</type>
        </param>
      </function>
      <function name="SessionGetSharedLibraryLoader" access="public" lib="slang" convention="Cdecl" entrypoint="spSessionGetSharedLibraryLoader" static="true" unsafe="true">
        <type>ISlangSharedLibraryLoader*</type>
        <param name="session">
          <type>IGlobalSession*</type>
        </param>
      </function>
      <function name="SessionCheckCompileTargetSupport" access="public" lib="slang" convention="Cdecl" entrypoint="spSessionCheckCompileTargetSupport" static="true" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="session">
          <type>IGlobalSession*</type>
        </param>
        <param name="target">
          <type>CompileTarget</type>
        </param>
      </function>
      <function name="SessionCheckPassThroughSupport" access="public" lib="slang" convention="Cdecl" entrypoint="spSessionCheckPassThroughSupport" static="true" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="session">
          <type>IGlobalSession*</type>
        </param>
        <param name="passThrough">
          <type>PassThrough</type>
        </param>
      </function>
      <function name="AddBuiltins" access="public" lib="slang" convention="Cdecl" entrypoint="spAddBuiltins" static="true" unsafe="true">
        <type>void</type>
        <param name="session">
          <type>IGlobalSession*</type>
        </param>
        <param name="sourcePath">
          <type>sbyte*</type>
        </param>
        <param name="sourceString">
          <type>sbyte*</type>
        </param>
      </function>
      <function name="CreateCompileRequest" access="public" lib="slang" convention="Cdecl" entrypoint="spCreateCompileRequest" static="true" unsafe="true">
        <type native="SlangCompileRequest *">ICompileRequest*</type>
        <param name="session">
          <type>IGlobalSession*</type>
        </param>
      </function>
      <function name="DestroyCompileRequest" access="public" lib="slang" convention="Cdecl" entrypoint="spDestroyCompileRequest" static="true" unsafe="true">
        <type>void</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
      </function>
      <function name="SetFileSystem" access="public" lib="slang" convention="Cdecl" entrypoint="spSetFileSystem" static="true" unsafe="true">
        <type>void</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="fileSystem">
          <type>ISlangFileSystem*</type>
        </param>
      </function>
      <function name="SetCompileFlags" access="public" lib="slang" convention="Cdecl" entrypoint="spSetCompileFlags" static="true" unsafe="true">
        <type>void</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="flags">
          <type>uint</type>
        </param>
      </function>
      <function name="GetCompileFlags" access="public" lib="slang" convention="Cdecl" entrypoint="spGetCompileFlags" static="true" unsafe="true">
        <type native="SlangCompileFlags">uint</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
      </function>
      <function name="SetDumpIntermediates" access="public" lib="slang" convention="Cdecl" entrypoint="spSetDumpIntermediates" static="true" unsafe="true">
        <type>void</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="enable">
          <type>int</type>
        </param>
      </function>
      <function name="SetDumpIntermediatePrefix" access="public" lib="slang" convention="Cdecl" entrypoint="spSetDumpIntermediatePrefix" static="true" unsafe="true">
        <type>void</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="prefix">
          <type>sbyte*</type>
        </param>
      </function>
      <function name="SetLineDirectiveMode" access="public" lib="slang" convention="Cdecl" entrypoint="spSetLineDirectiveMode" static="true" unsafe="true">
        <type>void</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="mode">
          <type>LineDirectiveMode</type>
        </param>
      </function>
      <function name="SetTargetLineDirectiveMode" access="public" lib="slang" convention="Cdecl" entrypoint="spSetTargetLineDirectiveMode" static="true" unsafe="true">
        <type>void</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="targetIndex">
          <type>int</type>
        </param>
        <param name="mode">
          <type>LineDirectiveMode</type>
        </param>
      </function>
      <function name="SetTargetForceGLSLScalarBufferLayout" access="public" lib="slang" convention="Cdecl" entrypoint="spSetTargetForceGLSLScalarBufferLayout" static="true" unsafe="true">
        <type>void</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="targetIndex">
          <type>int</type>
        </param>
        <param name="forceScalarLayout">
          <type>byte</type>
        </param>
      </function>
      <function name="SetTargetUseMinimumSlangOptimization" access="public" lib="slang" convention="Cdecl" entrypoint="spSetTargetUseMinimumSlangOptimization" static="true" unsafe="true">
        <type>void</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="targetIndex">
          <type>int</type>
        </param>
        <param name="val">
          <type>byte</type>
        </param>
      </function>
      <function name="SetIgnoreCapabilityCheck" access="public" lib="slang" convention="Cdecl" entrypoint="spSetIgnoreCapabilityCheck" static="true" unsafe="true">
        <type>void</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="val">
          <type>byte</type>
        </param>
      </function>
      <function name="SetCodeGenTarget" access="public" lib="slang" convention="Cdecl" entrypoint="spSetCodeGenTarget" static="true" unsafe="true">
        <type>void</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="target">
          <type>CompileTarget</type>
        </param>
      </function>
      <function name="AddCodeGenTarget" access="public" lib="slang" convention="Cdecl" entrypoint="spAddCodeGenTarget" static="true" unsafe="true">
        <type>int</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="target">
          <type>CompileTarget</type>
        </param>
      </function>
      <function name="SetTargetProfile" access="public" lib="slang" convention="Cdecl" entrypoint="spSetTargetProfile" static="true" unsafe="true">
        <type>void</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="targetIndex">
          <type>int</type>
        </param>
        <param name="profile">
          <type>ProfileID</type>
        </param>
      </function>
      <function name="SetTargetFlags" access="public" lib="slang" convention="Cdecl" entrypoint="spSetTargetFlags" static="true" unsafe="true">
        <type>void</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="targetIndex">
          <type>int</type>
        </param>
        <param name="flags">
          <type>uint</type>
        </param>
      </function>
      <function name="SetTargetFloatingPointMode" access="public" lib="slang" convention="Cdecl" entrypoint="spSetTargetFloatingPointMode" static="true" unsafe="true">
        <type>void</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="targetIndex">
          <type>int</type>
        </param>
        <param name="mode">
          <type>FloatingPointMode</type>
        </param>
      </function>
      <function name="AddTargetCapability" access="public" lib="slang" convention="Cdecl" entrypoint="spAddTargetCapability" static="true" unsafe="true">
        <type>void</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="targetIndex">
          <type>int</type>
        </param>
        <param name="capability">
          <type>CapabilityID</type>
        </param>
      </function>
      <function name="SetTargetMatrixLayoutMode" access="public" lib="slang" convention="Cdecl" entrypoint="spSetTargetMatrixLayoutMode" static="true" unsafe="true">
        <type>void</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="targetIndex">
          <type>int</type>
        </param>
        <param name="mode">
          <type>MatrixLayoutMode</type>
        </param>
      </function>
      <function name="SetMatrixLayoutMode" access="public" lib="slang" convention="Cdecl" entrypoint="spSetMatrixLayoutMode" static="true" unsafe="true">
        <type>void</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="mode">
          <type>MatrixLayoutMode</type>
        </param>
      </function>
      <function name="SetDebugInfoLevel" access="public" lib="slang" convention="Cdecl" entrypoint="spSetDebugInfoLevel" static="true" unsafe="true">
        <type>void</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="level">
          <type>DebugInfoLevel</type>
        </param>
      </function>
      <function name="SetDebugInfoFormat" access="public" lib="slang" convention="Cdecl" entrypoint="spSetDebugInfoFormat" static="true" unsafe="true">
        <type>void</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="format">
          <type>DebugInfoFormat</type>
        </param>
      </function>
      <function name="SetOptimizationLevel" access="public" lib="slang" convention="Cdecl" entrypoint="spSetOptimizationLevel" static="true" unsafe="true">
        <type>void</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="level">
          <type>OptimizationLevel</type>
        </param>
      </function>
      <function name="SetOutputContainerFormat" access="public" lib="slang" convention="Cdecl" entrypoint="spSetOutputContainerFormat" static="true" unsafe="true">
        <type>void</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="format">
          <type>ContainerFormat</type>
        </param>
      </function>
      <function name="SetPassThrough" access="public" lib="slang" convention="Cdecl" entrypoint="spSetPassThrough" static="true" unsafe="true">
        <type>void</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="passThrough">
          <type>PassThrough</type>
        </param>
      </function>
      <function name="SetDiagnosticCallback" access="public" lib="slang" convention="Cdecl" entrypoint="spSetDiagnosticCallback" static="true" unsafe="true">
        <type>void</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="callback">
          <type>IntPtr</type>
        </param>
        <param name="userData">
          <type>void*</type>
        </param>
      </function>
      <function name="SetWriter" access="public" lib="slang" convention="Cdecl" entrypoint="spSetWriter" static="true" unsafe="true">
        <type>void</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="channel">
          <type>WriterChannel</type>
        </param>
        <param name="writer">
          <type>ISlangWriter*</type>
        </param>
      </function>
      <function name="GetWriter" access="public" lib="slang" convention="Cdecl" entrypoint="spGetWriter" static="true" unsafe="true">
        <type>ISlangWriter*</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="channel">
          <type>WriterChannel</type>
        </param>
      </function>
      <function name="AddSearchPath" access="public" lib="slang" convention="Cdecl" entrypoint="spAddSearchPath" static="true" unsafe="true">
        <type>void</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="searchDir">
          <type>sbyte*</type>
        </param>
      </function>
      <function name="AddPreprocessorDefine" access="public" lib="slang" convention="Cdecl" entrypoint="spAddPreprocessorDefine" static="true" unsafe="true">
        <type>void</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="key">
          <type>sbyte*</type>
        </param>
        <param name="value">
          <type>sbyte*</type>
        </param>
      </function>
      <function name="ProcessCommandLineArguments" access="public" lib="slang" convention="Cdecl" entrypoint="spProcessCommandLineArguments" static="true" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="args">
          <type>sbyte**</type>
        </param>
        <param name="argCount">
          <type>int</type>
        </param>
      </function>
      <function name="AddTranslationUnit" access="public" lib="slang" convention="Cdecl" entrypoint="spAddTranslationUnit" static="true" unsafe="true">
        <type>int</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="language">
          <type>SourceLanguage</type>
        </param>
        <param name="name">
          <type>sbyte*</type>
        </param>
      </function>
      <function name="SetDefaultModuleName" access="public" lib="slang" convention="Cdecl" entrypoint="spSetDefaultModuleName" static="true" unsafe="true">
        <type>void</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="defaultModuleName">
          <type>sbyte*</type>
        </param>
      </function>
      <function name="TranslationUnit_addPreprocessorDefine" access="public" lib="slang" convention="Cdecl" entrypoint="spTranslationUnit_addPreprocessorDefine" static="true" unsafe="true">
        <type>void</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="translationUnitIndex">
          <type>int</type>
        </param>
        <param name="key">
          <type>sbyte*</type>
        </param>
        <param name="value">
          <type>sbyte*</type>
        </param>
      </function>
      <function name="AddTranslationUnitSourceFile" access="public" lib="slang" convention="Cdecl" entrypoint="spAddTranslationUnitSourceFile" static="true" unsafe="true">
        <type>void</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="translationUnitIndex">
          <type>int</type>
        </param>
        <param name="path">
          <type>sbyte*</type>
        </param>
      </function>
      <function name="AddTranslationUnitSourceString" access="public" lib="slang" convention="Cdecl" entrypoint="spAddTranslationUnitSourceString" static="true" unsafe="true">
        <type>void</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="translationUnitIndex">
          <type>int</type>
        </param>
        <param name="path">
          <type>sbyte*</type>
        </param>
        <param name="source">
          <type>sbyte*</type>
        </param>
      </function>
      <function name="AddLibraryReference" access="public" lib="slang" convention="Cdecl" entrypoint="spAddLibraryReference" static="true" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="basePath">
          <type>sbyte*</type>
        </param>
        <param name="libData">
          <type>void*</type>
        </param>
        <param name="libDataSize">
          <type>nuint</type>
        </param>
      </function>
      <function name="AddTranslationUnitSourceStringSpan" access="public" lib="slang" convention="Cdecl" entrypoint="spAddTranslationUnitSourceStringSpan" static="true" unsafe="true">
        <type>void</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="translationUnitIndex">
          <type>int</type>
        </param>
        <param name="path">
          <type>sbyte*</type>
        </param>
        <param name="sourceBegin">
          <type>sbyte*</type>
        </param>
        <param name="sourceEnd">
          <type>sbyte*</type>
        </param>
      </function>
      <function name="AddTranslationUnitSourceBlob" access="public" lib="slang" convention="Cdecl" entrypoint="spAddTranslationUnitSourceBlob" static="true" unsafe="true">
        <type>void</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="translationUnitIndex">
          <type>int</type>
        </param>
        <param name="path">
          <type>sbyte*</type>
        </param>
        <param name="sourceBlob">
          <type>ISlangBlob*</type>
        </param>
      </function>
      <function name="FindProfile" access="public" lib="slang" convention="Cdecl" entrypoint="spFindProfile" static="true" unsafe="true">
        <type native="SlangProfileID">ProfileID</type>
        <param name="session">
          <type>IGlobalSession*</type>
        </param>
        <param name="name">
          <type>sbyte*</type>
        </param>
      </function>
      <function name="FindCapability" access="public" lib="slang" convention="Cdecl" entrypoint="spFindCapability" static="true" unsafe="true">
        <type native="SlangCapabilityID">CapabilityID</type>
        <param name="session">
          <type>IGlobalSession*</type>
        </param>
        <param name="name">
          <type>sbyte*</type>
        </param>
      </function>
      <function name="AddEntryPoint" access="public" lib="slang" convention="Cdecl" entrypoint="spAddEntryPoint" static="true" unsafe="true">
        <type>int</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="translationUnitIndex">
          <type>int</type>
        </param>
        <param name="name">
          <type>sbyte*</type>
        </param>
        <param name="stage">
          <type>Stage</type>
        </param>
      </function>
      <function name="AddEntryPointEx" access="public" lib="slang" convention="Cdecl" entrypoint="spAddEntryPointEx" static="true" unsafe="true">
        <type>int</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="translationUnitIndex">
          <type>int</type>
        </param>
        <param name="name">
          <type>sbyte*</type>
        </param>
        <param name="stage">
          <type>Stage</type>
        </param>
        <param name="genericArgCount">
          <type>int</type>
        </param>
        <param name="genericArgs">
          <type>sbyte**</type>
        </param>
      </function>
      <function name="SetGlobalGenericArgs" access="public" lib="slang" convention="Cdecl" entrypoint="spSetGlobalGenericArgs" static="true" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="genericArgCount">
          <type>int</type>
        </param>
        <param name="genericArgs">
          <type>sbyte**</type>
        </param>
      </function>
      <function name="SetTypeNameForGlobalExistentialTypeParam" access="public" lib="slang" convention="Cdecl" entrypoint="spSetTypeNameForGlobalExistentialTypeParam" static="true" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="slotIndex">
          <type>int</type>
        </param>
        <param name="typeName">
          <type>sbyte*</type>
        </param>
      </function>
      <function name="SetTypeNameForEntryPointExistentialTypeParam" access="public" lib="slang" convention="Cdecl" entrypoint="spSetTypeNameForEntryPointExistentialTypeParam" static="true" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="entryPointIndex">
          <type>int</type>
        </param>
        <param name="slotIndex">
          <type>int</type>
        </param>
        <param name="typeName">
          <type>sbyte*</type>
        </param>
      </function>
      <function name="Compile" access="public" lib="slang" convention="Cdecl" entrypoint="spCompile" static="true" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
      </function>
      <function name="GetDiagnosticOutput" access="public" lib="slang" convention="Cdecl" entrypoint="spGetDiagnosticOutput" static="true" unsafe="true">
        <type native="const char *">sbyte*</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
      </function>
      <function name="GetDiagnosticOutputBlob" access="public" lib="slang" convention="Cdecl" entrypoint="spGetDiagnosticOutputBlob" static="true" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="outBlob">
          <type>ISlangBlob**</type>
        </param>
      </function>
      <function name="GetDependencyFileCount" access="public" lib="slang" convention="Cdecl" entrypoint="spGetDependencyFileCount" static="true" unsafe="true">
        <type>int</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
      </function>
      <function name="GetDependencyFilePath" access="public" lib="slang" convention="Cdecl" entrypoint="spGetDependencyFilePath" static="true" unsafe="true">
        <type native="const char *">sbyte*</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="index">
          <type>int</type>
        </param>
      </function>
      <function name="GetTranslationUnitCount" access="public" lib="slang" convention="Cdecl" entrypoint="spGetTranslationUnitCount" static="true" unsafe="true">
        <type>int</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
      </function>
      <function name="GetEntryPointSource" access="public" lib="slang" convention="Cdecl" entrypoint="spGetEntryPointSource" static="true" unsafe="true">
        <type native="const char *">sbyte*</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="entryPointIndex">
          <type>int</type>
        </param>
      </function>
      <function name="GetEntryPointCode" access="public" lib="slang" convention="Cdecl" entrypoint="spGetEntryPointCode" static="true" unsafe="true">
        <type native="const void *">void*</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="entryPointIndex">
          <type>int</type>
        </param>
        <param name="outSize">
          <type>nuint*</type>
        </param>
      </function>
      <function name="GetEntryPointCodeBlob" access="public" lib="slang" convention="Cdecl" entrypoint="spGetEntryPointCodeBlob" static="true" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="entryPointIndex">
          <type>int</type>
        </param>
        <param name="targetIndex">
          <type>int</type>
        </param>
        <param name="outBlob">
          <type>ISlangBlob**</type>
        </param>
      </function>
      <function name="GetEntryPointHostCallable" access="public" lib="slang" convention="Cdecl" entrypoint="spGetEntryPointHostCallable" static="true" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="entryPointIndex">
          <type>int</type>
        </param>
        <param name="targetIndex">
          <type>int</type>
        </param>
        <param name="outSharedLibrary">
          <type>ISlangSharedLibrary**</type>
        </param>
      </function>
      <function name="GetTargetCodeBlob" access="public" lib="slang" convention="Cdecl" entrypoint="spGetTargetCodeBlob" static="true" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="targetIndex">
          <type>int</type>
        </param>
        <param name="outBlob">
          <type>ISlangBlob**</type>
        </param>
      </function>
      <function name="GetTargetHostCallable" access="public" lib="slang" convention="Cdecl" entrypoint="spGetTargetHostCallable" static="true" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="targetIndex">
          <type>int</type>
        </param>
        <param name="outSharedLibrary">
          <type>ISlangSharedLibrary**</type>
        </param>
      </function>
      <function name="GetCompileRequestCode" access="public" lib="slang" convention="Cdecl" entrypoint="spGetCompileRequestCode" static="true" unsafe="true">
        <type native="const void *">void*</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="outSize">
          <type>nuint*</type>
        </param>
      </function>
      <function name="GetContainerCode" access="public" lib="slang" convention="Cdecl" entrypoint="spGetContainerCode" static="true" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="outBlob">
          <type>ISlangBlob**</type>
        </param>
      </function>
      <function name="LoadRepro" access="public" lib="slang" convention="Cdecl" entrypoint="spLoadRepro" static="true" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="fileSystem">
          <type>ISlangFileSystem*</type>
        </param>
        <param name="data">
          <type>void*</type>
        </param>
        <param name="size">
          <type>nuint</type>
        </param>
      </function>
      <function name="SaveRepro" access="public" lib="slang" convention="Cdecl" entrypoint="spSaveRepro" static="true" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="outBlob">
          <type>ISlangBlob**</type>
        </param>
      </function>
      <function name="EnableReproCapture" access="public" lib="slang" convention="Cdecl" entrypoint="spEnableReproCapture" static="true" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
      </function>
      <function name="GetCompileTimeProfile" access="public" lib="slang" convention="Cdecl" entrypoint="spGetCompileTimeProfile" static="true" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="compileTimeProfile">
          <type>ISlangProfiler**</type>
        </param>
        <param name="shouldClear">
          <type>byte</type>
        </param>
      </function>
      <function name="ExtractRepro" access="public" lib="slang" convention="Cdecl" entrypoint="spExtractRepro" static="true" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="session">
          <type>IGlobalSession*</type>
        </param>
        <param name="reproData">
          <type>void*</type>
        </param>
        <param name="reproDataSize">
          <type>nuint</type>
        </param>
        <param name="fileSystem">
          <type>ISlangMutableFileSystem*</type>
        </param>
      </function>
      <function name="LoadReproAsFileSystem" access="public" lib="slang" convention="Cdecl" entrypoint="spLoadReproAsFileSystem" static="true" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="session">
          <type>IGlobalSession*</type>
        </param>
        <param name="reproData">
          <type>void*</type>
        </param>
        <param name="reproDataSize">
          <type>nuint</type>
        </param>
        <param name="replaceFileSystem">
          <type>ISlangFileSystem*</type>
        </param>
        <param name="outFileSystem">
          <type>ISlangFileSystemExt**</type>
        </param>
      </function>
      <function name="OverrideDiagnosticSeverity" access="public" lib="slang" convention="Cdecl" entrypoint="spOverrideDiagnosticSeverity" static="true" unsafe="true">
        <type>void</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="messageID">
          <type>nint</type>
        </param>
        <param name="overrideSeverity">
          <type>Severity</type>
        </param>
      </function>
      <function name="GetDiagnosticFlags" access="public" lib="slang" convention="Cdecl" entrypoint="spGetDiagnosticFlags" static="true" unsafe="true">
        <type native="SlangDiagnosticFlags">int</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
      </function>
      <function name="SetDiagnosticFlags" access="public" lib="slang" convention="Cdecl" entrypoint="spSetDiagnosticFlags" static="true" unsafe="true">
        <type>void</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="flags">
          <type>int</type>
        </param>
      </function>
      <function name="GetReflection" access="public" lib="slang" convention="Cdecl" entrypoint="spGetReflection" static="true" unsafe="true">
        <type native="SlangReflection *">SlangProgramLayout*</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
      </function>
      <function name="ReflectionUserAttribute_GetName" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionUserAttribute_GetName" static="true" unsafe="true">
        <type native="const char *">sbyte*</type>
        <param name="attrib">
          <type>SlangReflectionUserAttribute*</type>
        </param>
      </function>
      <function name="ReflectionUserAttribute_GetArgumentCount" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionUserAttribute_GetArgumentCount" static="true" unsafe="true">
        <type native="unsigned int">uint</type>
        <param name="attrib">
          <type>SlangReflectionUserAttribute*</type>
        </param>
      </function>
      <function name="ReflectionUserAttribute_GetArgumentType" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionUserAttribute_GetArgumentType" static="true" unsafe="true">
        <type>SlangReflectionType*</type>
        <param name="attrib">
          <type>SlangReflectionUserAttribute*</type>
        </param>
        <param name="index">
          <type>uint</type>
        </param>
      </function>
      <function name="ReflectionUserAttribute_GetArgumentValueInt" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionUserAttribute_GetArgumentValueInt" static="true" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="attrib">
          <type>SlangReflectionUserAttribute*</type>
        </param>
        <param name="index">
          <type>uint</type>
        </param>
        <param name="rs">
          <type>int*</type>
        </param>
      </function>
      <function name="ReflectionUserAttribute_GetArgumentValueFloat" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionUserAttribute_GetArgumentValueFloat" static="true" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="attrib">
          <type>SlangReflectionUserAttribute*</type>
        </param>
        <param name="index">
          <type>uint</type>
        </param>
        <param name="rs">
          <type>float*</type>
        </param>
      </function>
      <function name="ReflectionUserAttribute_GetArgumentValueString" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionUserAttribute_GetArgumentValueString" static="true" unsafe="true">
        <type native="const char *">sbyte*</type>
        <param name="attrib">
          <type>SlangReflectionUserAttribute*</type>
        </param>
        <param name="index">
          <type>uint</type>
        </param>
        <param name="outSize">
          <type>nuint*</type>
        </param>
      </function>
      <function name="ReflectionType_GetKind" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionType_GetKind" static="true" unsafe="true">
        <type native="SlangTypeKind">TypeKind</type>
        <param name="type">
          <type>SlangReflectionType*</type>
        </param>
      </function>
      <function name="ReflectionType_GetUserAttributeCount" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionType_GetUserAttributeCount" static="true" unsafe="true">
        <type native="unsigned int">uint</type>
        <param name="type">
          <type>SlangReflectionType*</type>
        </param>
      </function>
      <function name="ReflectionType_GetUserAttribute" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionType_GetUserAttribute" static="true" unsafe="true">
        <type>SlangReflectionUserAttribute*</type>
        <param name="type">
          <type>SlangReflectionType*</type>
        </param>
        <param name="index">
          <type>uint</type>
        </param>
      </function>
      <function name="ReflectionType_FindUserAttributeByName" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionType_FindUserAttributeByName" static="true" unsafe="true">
        <type>SlangReflectionUserAttribute*</type>
        <param name="type">
          <type>SlangReflectionType*</type>
        </param>
        <param name="name">
          <type>sbyte*</type>
        </param>
      </function>
      <function name="ReflectionType_applySpecializations" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionType_applySpecializations" static="true" unsafe="true">
        <type>SlangReflectionType*</type>
        <param name="type">
          <type>SlangReflectionType*</type>
        </param>
        <param name="generic">
          <type>SlangReflectionGeneric*</type>
        </param>
      </function>
      <function name="ReflectionType_GetFieldCount" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionType_GetFieldCount" static="true" unsafe="true">
        <type native="unsigned int">uint</type>
        <param name="type">
          <type>SlangReflectionType*</type>
        </param>
      </function>
      <function name="ReflectionType_GetFieldByIndex" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionType_GetFieldByIndex" static="true" unsafe="true">
        <type>SlangReflectionVariable*</type>
        <param name="type">
          <type>SlangReflectionType*</type>
        </param>
        <param name="index">
          <type>uint</type>
        </param>
      </function>
      <function name="ReflectionType_GetElementCount" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionType_GetElementCount" static="true" unsafe="true">
        <type native="size_t">nuint</type>
        <param name="type">
          <type>SlangReflectionType*</type>
        </param>
      </function>
      <function name="ReflectionType_GetElementType" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionType_GetElementType" static="true" unsafe="true">
        <type>SlangReflectionType*</type>
        <param name="type">
          <type>SlangReflectionType*</type>
        </param>
      </function>
      <function name="ReflectionType_GetRowCount" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionType_GetRowCount" static="true" unsafe="true">
        <type native="unsigned int">uint</type>
        <param name="type">
          <type>SlangReflectionType*</type>
        </param>
      </function>
      <function name="ReflectionType_GetColumnCount" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionType_GetColumnCount" static="true" unsafe="true">
        <type native="unsigned int">uint</type>
        <param name="type">
          <type>SlangReflectionType*</type>
        </param>
      </function>
      <function name="ReflectionType_GetScalarType" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionType_GetScalarType" static="true" unsafe="true">
        <type native="SlangScalarType">ScalarType</type>
        <param name="type">
          <type>SlangReflectionType*</type>
        </param>
      </function>
      <function name="ReflectionType_GetResourceShape" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionType_GetResourceShape" static="true" unsafe="true">
        <type native="SlangResourceShape">ResourceShape</type>
        <param name="type">
          <type>SlangReflectionType*</type>
        </param>
      </function>
      <function name="ReflectionType_GetResourceAccess" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionType_GetResourceAccess" static="true" unsafe="true">
        <type native="SlangResourceAccess">ResourceAccess</type>
        <param name="type">
          <type>SlangReflectionType*</type>
        </param>
      </function>
      <function name="ReflectionType_GetResourceResultType" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionType_GetResourceResultType" static="true" unsafe="true">
        <type>SlangReflectionType*</type>
        <param name="type">
          <type>SlangReflectionType*</type>
        </param>
      </function>
      <function name="ReflectionType_GetName" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionType_GetName" static="true" unsafe="true">
        <type native="const char *">sbyte*</type>
        <param name="type">
          <type>SlangReflectionType*</type>
        </param>
      </function>
      <function name="ReflectionType_GetFullName" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionType_GetFullName" static="true" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="type">
          <type>SlangReflectionType*</type>
        </param>
        <param name="outNameBlob">
          <type>ISlangBlob**</type>
        </param>
      </function>
      <function name="ReflectionType_GetGenericContainer" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionType_GetGenericContainer" static="true" unsafe="true">
        <type>SlangReflectionGeneric*</type>
        <param name="type">
          <type>SlangReflectionType*</type>
        </param>
      </function>
      <function name="ReflectionTypeLayout_GetType" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionTypeLayout_GetType" static="true" unsafe="true">
        <type>SlangReflectionType*</type>
        <param name="type">
          <type>SlangReflectionTypeLayout*</type>
        </param>
      </function>
      <function name="ReflectionTypeLayout_getKind" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionTypeLayout_getKind" static="true" unsafe="true">
        <type native="SlangTypeKind">TypeKind</type>
        <param name="type">
          <type>SlangReflectionTypeLayout*</type>
        </param>
      </function>
      <function name="ReflectionTypeLayout_GetSize" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionTypeLayout_GetSize" static="true" unsafe="true">
        <type native="size_t">nuint</type>
        <param name="type">
          <type>SlangReflectionTypeLayout*</type>
        </param>
        <param name="category">
          <type>ParameterCategory</type>
        </param>
      </function>
      <function name="ReflectionTypeLayout_GetStride" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionTypeLayout_GetStride" static="true" unsafe="true">
        <type native="size_t">nuint</type>
        <param name="type">
          <type>SlangReflectionTypeLayout*</type>
        </param>
        <param name="category">
          <type>ParameterCategory</type>
        </param>
      </function>
      <function name="ReflectionTypeLayout_getAlignment" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionTypeLayout_getAlignment" static="true" unsafe="true">
        <type native="int32_t">int</type>
        <param name="type">
          <type>SlangReflectionTypeLayout*</type>
        </param>
        <param name="category">
          <type>ParameterCategory</type>
        </param>
      </function>
      <function name="ReflectionTypeLayout_GetFieldCount" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionTypeLayout_GetFieldCount" static="true" unsafe="true">
        <type native="uint32_t">uint</type>
        <param name="type">
          <type>SlangReflectionTypeLayout*</type>
        </param>
      </function>
      <function name="ReflectionTypeLayout_GetFieldByIndex" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionTypeLayout_GetFieldByIndex" static="true" unsafe="true">
        <type>SlangReflectionVariableLayout*</type>
        <param name="type">
          <type>SlangReflectionTypeLayout*</type>
        </param>
        <param name="index">
          <type>uint</type>
        </param>
      </function>
      <function name="ReflectionTypeLayout_findFieldIndexByName" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionTypeLayout_findFieldIndexByName" static="true" unsafe="true">
        <type native="SlangInt">nint</type>
        <param name="typeLayout">
          <type>SlangReflectionTypeLayout*</type>
        </param>
        <param name="nameBegin">
          <type>sbyte*</type>
        </param>
        <param name="nameEnd">
          <type>sbyte*</type>
        </param>
      </function>
      <function name="ReflectionTypeLayout_GetExplicitCounter" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionTypeLayout_GetExplicitCounter" static="true" unsafe="true">
        <type>SlangReflectionVariableLayout*</type>
        <param name="typeLayout">
          <type>SlangReflectionTypeLayout*</type>
        </param>
      </function>
      <function name="ReflectionTypeLayout_GetElementStride" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionTypeLayout_GetElementStride" static="true" unsafe="true">
        <type native="size_t">nuint</type>
        <param name="type">
          <type>SlangReflectionTypeLayout*</type>
        </param>
        <param name="category">
          <type>ParameterCategory</type>
        </param>
      </function>
      <function name="ReflectionTypeLayout_GetElementTypeLayout" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionTypeLayout_GetElementTypeLayout" static="true" unsafe="true">
        <type>SlangReflectionTypeLayout*</type>
        <param name="type">
          <type>SlangReflectionTypeLayout*</type>
        </param>
      </function>
      <function name="ReflectionTypeLayout_GetElementVarLayout" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionTypeLayout_GetElementVarLayout" static="true" unsafe="true">
        <type>SlangReflectionVariableLayout*</type>
        <param name="type">
          <type>SlangReflectionTypeLayout*</type>
        </param>
      </function>
      <function name="ReflectionTypeLayout_getContainerVarLayout" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionTypeLayout_getContainerVarLayout" static="true" unsafe="true">
        <type>SlangReflectionVariableLayout*</type>
        <param name="type">
          <type>SlangReflectionTypeLayout*</type>
        </param>
      </function>
      <function name="ReflectionTypeLayout_GetParameterCategory" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionTypeLayout_GetParameterCategory" static="true" unsafe="true">
        <type native="SlangParameterCategory">ParameterCategory</type>
        <param name="type">
          <type>SlangReflectionTypeLayout*</type>
        </param>
      </function>
      <function name="ReflectionTypeLayout_GetCategoryCount" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionTypeLayout_GetCategoryCount" static="true" unsafe="true">
        <type native="unsigned int">uint</type>
        <param name="type">
          <type>SlangReflectionTypeLayout*</type>
        </param>
      </function>
      <function name="ReflectionTypeLayout_GetCategoryByIndex" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionTypeLayout_GetCategoryByIndex" static="true" unsafe="true">
        <type native="SlangParameterCategory">ParameterCategory</type>
        <param name="type">
          <type>SlangReflectionTypeLayout*</type>
        </param>
        <param name="index">
          <type>uint</type>
        </param>
      </function>
      <function name="ReflectionTypeLayout_GetMatrixLayoutMode" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionTypeLayout_GetMatrixLayoutMode" static="true" unsafe="true">
        <type native="SlangMatrixLayoutMode">MatrixLayoutMode</type>
        <param name="type">
          <type>SlangReflectionTypeLayout*</type>
        </param>
      </function>
      <function name="ReflectionTypeLayout_getGenericParamIndex" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionTypeLayout_getGenericParamIndex" static="true" unsafe="true">
        <type>int</type>
        <param name="type">
          <type>SlangReflectionTypeLayout*</type>
        </param>
      </function>
      <function name="ReflectionTypeLayout_getPendingDataTypeLayout" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionTypeLayout_getPendingDataTypeLayout" static="true" unsafe="true">
        <type>SlangReflectionTypeLayout*</type>
        <param name="type">
          <type>SlangReflectionTypeLayout*</type>
        </param>
      </function>
      <function name="ReflectionTypeLayout_getSpecializedTypePendingDataVarLayout" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionTypeLayout_getSpecializedTypePendingDataVarLayout" static="true" unsafe="true">
        <type>SlangReflectionVariableLayout*</type>
        <param name="type">
          <type>SlangReflectionTypeLayout*</type>
        </param>
      </function>
      <function name="ReflectionType_getSpecializedTypeArgCount" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionType_getSpecializedTypeArgCount" static="true" unsafe="true">
        <type native="SlangInt">nint</type>
        <param name="type">
          <type>SlangReflectionType*</type>
        </param>
      </function>
      <function name="ReflectionType_getSpecializedTypeArgType" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionType_getSpecializedTypeArgType" static="true" unsafe="true">
        <type>SlangReflectionType*</type>
        <param name="type">
          <type>SlangReflectionType*</type>
        </param>
        <param name="index">
          <type>nint</type>
        </param>
      </function>
      <function name="ReflectionTypeLayout_getBindingRangeCount" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionTypeLayout_getBindingRangeCount" static="true" unsafe="true">
        <type native="SlangInt">nint</type>
        <param name="typeLayout">
          <type>SlangReflectionTypeLayout*</type>
        </param>
      </function>
      <function name="ReflectionTypeLayout_getBindingRangeType" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionTypeLayout_getBindingRangeType" static="true" unsafe="true">
        <type native="SlangBindingType">BindingType</type>
        <param name="typeLayout">
          <type>SlangReflectionTypeLayout*</type>
        </param>
        <param name="index">
          <type>nint</type>
        </param>
      </function>
      <function name="ReflectionTypeLayout_isBindingRangeSpecializable" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionTypeLayout_isBindingRangeSpecializable" static="true" unsafe="true">
        <type native="SlangInt">nint</type>
        <param name="typeLayout">
          <type>SlangReflectionTypeLayout*</type>
        </param>
        <param name="index">
          <type>nint</type>
        </param>
      </function>
      <function name="ReflectionTypeLayout_getBindingRangeBindingCount" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionTypeLayout_getBindingRangeBindingCount" static="true" unsafe="true">
        <type native="SlangInt">nint</type>
        <param name="typeLayout">
          <type>SlangReflectionTypeLayout*</type>
        </param>
        <param name="index">
          <type>nint</type>
        </param>
      </function>
      <function name="ReflectionTypeLayout_getBindingRangeLeafTypeLayout" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionTypeLayout_getBindingRangeLeafTypeLayout" static="true" unsafe="true">
        <type>SlangReflectionTypeLayout*</type>
        <param name="typeLayout">
          <type>SlangReflectionTypeLayout*</type>
        </param>
        <param name="index">
          <type>nint</type>
        </param>
      </function>
      <function name="ReflectionTypeLayout_getBindingRangeLeafVariable" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionTypeLayout_getBindingRangeLeafVariable" static="true" unsafe="true">
        <type>SlangReflectionVariable*</type>
        <param name="typeLayout">
          <type>SlangReflectionTypeLayout*</type>
        </param>
        <param name="index">
          <type>nint</type>
        </param>
      </function>
      <function name="ReflectionTypeLayout_getBindingRangeImageFormat" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionTypeLayout_getBindingRangeImageFormat" static="true" unsafe="true">
        <type native="SlangImageFormat">ImageFormat</type>
        <param name="typeLayout">
          <type>SlangReflectionTypeLayout*</type>
        </param>
        <param name="index">
          <type>nint</type>
        </param>
      </function>
      <function name="ReflectionTypeLayout_getFieldBindingRangeOffset" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionTypeLayout_getFieldBindingRangeOffset" static="true" unsafe="true">
        <type native="SlangInt">nint</type>
        <param name="typeLayout">
          <type>SlangReflectionTypeLayout*</type>
        </param>
        <param name="fieldIndex">
          <type>nint</type>
        </param>
      </function>
      <function name="ReflectionTypeLayout_getExplicitCounterBindingRangeOffset" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionTypeLayout_getExplicitCounterBindingRangeOffset" static="true" unsafe="true">
        <type native="SlangInt">nint</type>
        <param name="inTypeLayout">
          <type>SlangReflectionTypeLayout*</type>
        </param>
      </function>
      <function name="ReflectionTypeLayout_getBindingRangeDescriptorSetIndex" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionTypeLayout_getBindingRangeDescriptorSetIndex" static="true" unsafe="true">
        <type native="SlangInt">nint</type>
        <param name="typeLayout">
          <type>SlangReflectionTypeLayout*</type>
        </param>
        <param name="index">
          <type>nint</type>
        </param>
      </function>
      <function name="ReflectionTypeLayout_getBindingRangeFirstDescriptorRangeIndex" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionTypeLayout_getBindingRangeFirstDescriptorRangeIndex" static="true" unsafe="true">
        <type native="SlangInt">nint</type>
        <param name="typeLayout">
          <type>SlangReflectionTypeLayout*</type>
        </param>
        <param name="index">
          <type>nint</type>
        </param>
      </function>
      <function name="ReflectionTypeLayout_getBindingRangeDescriptorRangeCount" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionTypeLayout_getBindingRangeDescriptorRangeCount" static="true" unsafe="true">
        <type native="SlangInt">nint</type>
        <param name="typeLayout">
          <type>SlangReflectionTypeLayout*</type>
        </param>
        <param name="index">
          <type>nint</type>
        </param>
      </function>
      <function name="ReflectionTypeLayout_getDescriptorSetCount" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionTypeLayout_getDescriptorSetCount" static="true" unsafe="true">
        <type native="SlangInt">nint</type>
        <param name="typeLayout">
          <type>SlangReflectionTypeLayout*</type>
        </param>
      </function>
      <function name="ReflectionTypeLayout_getDescriptorSetSpaceOffset" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionTypeLayout_getDescriptorSetSpaceOffset" static="true" unsafe="true">
        <type native="SlangInt">nint</type>
        <param name="typeLayout">
          <type>SlangReflectionTypeLayout*</type>
        </param>
        <param name="setIndex">
          <type>nint</type>
        </param>
      </function>
      <function name="ReflectionTypeLayout_getDescriptorSetDescriptorRangeCount" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionTypeLayout_getDescriptorSetDescriptorRangeCount" static="true" unsafe="true">
        <type native="SlangInt">nint</type>
        <param name="typeLayout">
          <type>SlangReflectionTypeLayout*</type>
        </param>
        <param name="setIndex">
          <type>nint</type>
        </param>
      </function>
      <function name="ReflectionTypeLayout_getDescriptorSetDescriptorRangeIndexOffset" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionTypeLayout_getDescriptorSetDescriptorRangeIndexOffset" static="true" unsafe="true">
        <type native="SlangInt">nint</type>
        <param name="typeLayout">
          <type>SlangReflectionTypeLayout*</type>
        </param>
        <param name="setIndex">
          <type>nint</type>
        </param>
        <param name="rangeIndex">
          <type>nint</type>
        </param>
      </function>
      <function name="ReflectionTypeLayout_getDescriptorSetDescriptorRangeDescriptorCount" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionTypeLayout_getDescriptorSetDescriptorRangeDescriptorCount" static="true" unsafe="true">
        <type native="SlangInt">nint</type>
        <param name="typeLayout">
          <type>SlangReflectionTypeLayout*</type>
        </param>
        <param name="setIndex">
          <type>nint</type>
        </param>
        <param name="rangeIndex">
          <type>nint</type>
        </param>
      </function>
      <function name="ReflectionTypeLayout_getDescriptorSetDescriptorRangeType" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionTypeLayout_getDescriptorSetDescriptorRangeType" static="true" unsafe="true">
        <type native="SlangBindingType">BindingType</type>
        <param name="typeLayout">
          <type>SlangReflectionTypeLayout*</type>
        </param>
        <param name="setIndex">
          <type>nint</type>
        </param>
        <param name="rangeIndex">
          <type>nint</type>
        </param>
      </function>
      <function name="ReflectionTypeLayout_getDescriptorSetDescriptorRangeCategory" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionTypeLayout_getDescriptorSetDescriptorRangeCategory" static="true" unsafe="true">
        <type native="SlangParameterCategory">ParameterCategory</type>
        <param name="typeLayout">
          <type>SlangReflectionTypeLayout*</type>
        </param>
        <param name="setIndex">
          <type>nint</type>
        </param>
        <param name="rangeIndex">
          <type>nint</type>
        </param>
      </function>
      <function name="ReflectionTypeLayout_getSubObjectRangeCount" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionTypeLayout_getSubObjectRangeCount" static="true" unsafe="true">
        <type native="SlangInt">nint</type>
        <param name="typeLayout">
          <type>SlangReflectionTypeLayout*</type>
        </param>
      </function>
      <function name="ReflectionTypeLayout_getSubObjectRangeBindingRangeIndex" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionTypeLayout_getSubObjectRangeBindingRangeIndex" static="true" unsafe="true">
        <type native="SlangInt">nint</type>
        <param name="typeLayout">
          <type>SlangReflectionTypeLayout*</type>
        </param>
        <param name="subObjectRangeIndex">
          <type>nint</type>
        </param>
      </function>
      <function name="ReflectionTypeLayout_getSubObjectRangeSpaceOffset" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionTypeLayout_getSubObjectRangeSpaceOffset" static="true" unsafe="true">
        <type native="SlangInt">nint</type>
        <param name="typeLayout">
          <type>SlangReflectionTypeLayout*</type>
        </param>
        <param name="subObjectRangeIndex">
          <type>nint</type>
        </param>
      </function>
      <function name="ReflectionTypeLayout_getSubObjectRangeOffset" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionTypeLayout_getSubObjectRangeOffset" static="true" unsafe="true">
        <type>SlangReflectionVariableLayout*</type>
        <param name="typeLayout">
          <type>SlangReflectionTypeLayout*</type>
        </param>
        <param name="subObjectRangeIndex">
          <type>nint</type>
        </param>
      </function>
      <function name="ReflectionVariable_GetName" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionVariable_GetName" static="true" unsafe="true">
        <type native="const char *">sbyte*</type>
        <param name="var">
          <type>SlangReflectionVariable*</type>
        </param>
      </function>
      <function name="ReflectionVariable_GetType" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionVariable_GetType" static="true" unsafe="true">
        <type>SlangReflectionType*</type>
        <param name="var">
          <type>SlangReflectionVariable*</type>
        </param>
      </function>
      <function name="ReflectionVariable_FindModifier" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionVariable_FindModifier" static="true" unsafe="true">
        <type>SlangReflectionModifier*</type>
        <param name="var">
          <type>SlangReflectionVariable*</type>
        </param>
        <param name="modifierID">
          <type>ModifierID</type>
        </param>
      </function>
      <function name="ReflectionVariable_GetUserAttributeCount" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionVariable_GetUserAttributeCount" static="true" unsafe="true">
        <type native="unsigned int">uint</type>
        <param name="var">
          <type>SlangReflectionVariable*</type>
        </param>
      </function>
      <function name="ReflectionVariable_GetUserAttribute" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionVariable_GetUserAttribute" static="true" unsafe="true">
        <type>SlangReflectionUserAttribute*</type>
        <param name="var">
          <type>SlangReflectionVariable*</type>
        </param>
        <param name="index">
          <type>uint</type>
        </param>
      </function>
      <function name="ReflectionVariable_FindUserAttributeByName" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionVariable_FindUserAttributeByName" static="true" unsafe="true">
        <type>SlangReflectionUserAttribute*</type>
        <param name="var">
          <type>SlangReflectionVariable*</type>
        </param>
        <param name="globalSession">
          <type>IGlobalSession*</type>
        </param>
        <param name="name">
          <type>sbyte*</type>
        </param>
      </function>
      <function name="ReflectionVariable_HasDefaultValue" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionVariable_HasDefaultValue" static="true" unsafe="true">
        <type native="bool">byte</type>
        <param name="inVar">
          <type>SlangReflectionVariable*</type>
        </param>
      </function>
      <function name="ReflectionVariable_GetGenericContainer" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionVariable_GetGenericContainer" static="true" unsafe="true">
        <type>SlangReflectionGeneric*</type>
        <param name="var">
          <type>SlangReflectionVariable*</type>
        </param>
      </function>
      <function name="ReflectionVariable_applySpecializations" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionVariable_applySpecializations" static="true" unsafe="true">
        <type>SlangReflectionVariable*</type>
        <param name="var">
          <type>SlangReflectionVariable*</type>
        </param>
        <param name="generic">
          <type>SlangReflectionGeneric*</type>
        </param>
      </function>
      <function name="ReflectionVariableLayout_GetVariable" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionVariableLayout_GetVariable" static="true" unsafe="true">
        <type>SlangReflectionVariable*</type>
        <param name="var">
          <type>SlangReflectionVariableLayout*</type>
        </param>
      </function>
      <function name="ReflectionVariableLayout_GetTypeLayout" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionVariableLayout_GetTypeLayout" static="true" unsafe="true">
        <type>SlangReflectionTypeLayout*</type>
        <param name="var">
          <type>SlangReflectionVariableLayout*</type>
        </param>
      </function>
      <function name="ReflectionVariableLayout_GetOffset" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionVariableLayout_GetOffset" static="true" unsafe="true">
        <type native="size_t">nuint</type>
        <param name="var">
          <type>SlangReflectionVariableLayout*</type>
        </param>
        <param name="category">
          <type>ParameterCategory</type>
        </param>
      </function>
      <function name="ReflectionVariableLayout_GetSpace" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionVariableLayout_GetSpace" static="true" unsafe="true">
        <type native="size_t">nuint</type>
        <param name="var">
          <type>SlangReflectionVariableLayout*</type>
        </param>
        <param name="category">
          <type>ParameterCategory</type>
        </param>
      </function>
      <function name="ReflectionVariableLayout_GetSemanticName" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionVariableLayout_GetSemanticName" static="true" unsafe="true">
        <type native="const char *">sbyte*</type>
        <param name="var">
          <type>SlangReflectionVariableLayout*</type>
        </param>
      </function>
      <function name="ReflectionVariableLayout_GetSemanticIndex" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionVariableLayout_GetSemanticIndex" static="true" unsafe="true">
        <type native="size_t">nuint</type>
        <param name="var">
          <type>SlangReflectionVariableLayout*</type>
        </param>
      </function>
      <function name="ReflectionFunction_asDecl" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionFunction_asDecl" static="true" unsafe="true">
        <type>SlangReflectionDecl*</type>
        <param name="func">
          <type>SlangReflectionFunction*</type>
        </param>
      </function>
      <function name="ReflectionFunction_GetName" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionFunction_GetName" static="true" unsafe="true">
        <type native="const char *">sbyte*</type>
        <param name="func">
          <type>SlangReflectionFunction*</type>
        </param>
      </function>
      <function name="ReflectionFunction_FindModifier" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionFunction_FindModifier" static="true" unsafe="true">
        <type>SlangReflectionModifier*</type>
        <param name="var">
          <type>SlangReflectionFunction*</type>
        </param>
        <param name="modifierID">
          <type>ModifierID</type>
        </param>
      </function>
      <function name="ReflectionFunction_GetUserAttributeCount" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionFunction_GetUserAttributeCount" static="true" unsafe="true">
        <type native="unsigned int">uint</type>
        <param name="func">
          <type>SlangReflectionFunction*</type>
        </param>
      </function>
      <function name="ReflectionFunction_GetUserAttribute" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionFunction_GetUserAttribute" static="true" unsafe="true">
        <type>SlangReflectionUserAttribute*</type>
        <param name="func">
          <type>SlangReflectionFunction*</type>
        </param>
        <param name="index">
          <type>uint</type>
        </param>
      </function>
      <function name="ReflectionFunction_FindUserAttributeByName" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionFunction_FindUserAttributeByName" static="true" unsafe="true">
        <type>SlangReflectionUserAttribute*</type>
        <param name="func">
          <type>SlangReflectionFunction*</type>
        </param>
        <param name="globalSession">
          <type>IGlobalSession*</type>
        </param>
        <param name="name">
          <type>sbyte*</type>
        </param>
      </function>
      <function name="ReflectionFunction_GetParameterCount" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionFunction_GetParameterCount" static="true" unsafe="true">
        <type native="unsigned int">uint</type>
        <param name="func">
          <type>SlangReflectionFunction*</type>
        </param>
      </function>
      <function name="ReflectionFunction_GetParameter" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionFunction_GetParameter" static="true" unsafe="true">
        <type>SlangReflectionVariable*</type>
        <param name="func">
          <type>SlangReflectionFunction*</type>
        </param>
        <param name="index">
          <type>uint</type>
        </param>
      </function>
      <function name="ReflectionFunction_GetResultType" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionFunction_GetResultType" static="true" unsafe="true">
        <type>SlangReflectionType*</type>
        <param name="func">
          <type>SlangReflectionFunction*</type>
        </param>
      </function>
      <function name="ReflectionFunction_GetGenericContainer" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionFunction_GetGenericContainer" static="true" unsafe="true">
        <type>SlangReflectionGeneric*</type>
        <param name="func">
          <type>SlangReflectionFunction*</type>
        </param>
      </function>
      <function name="ReflectionFunction_applySpecializations" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionFunction_applySpecializations" static="true" unsafe="true">
        <type>SlangReflectionFunction*</type>
        <param name="func">
          <type>SlangReflectionFunction*</type>
        </param>
        <param name="generic">
          <type>SlangReflectionGeneric*</type>
        </param>
      </function>
      <function name="ReflectionFunction_specializeWithArgTypes" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionFunction_specializeWithArgTypes" static="true" unsafe="true">
        <type>SlangReflectionFunction*</type>
        <param name="func">
          <type>SlangReflectionFunction*</type>
        </param>
        <param name="argTypeCount">
          <type>nint</type>
        </param>
        <param name="argTypes">
          <type>SlangReflectionType**</type>
        </param>
      </function>
      <function name="ReflectionFunction_isOverloaded" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionFunction_isOverloaded" static="true" unsafe="true">
        <type native="bool">byte</type>
        <param name="func">
          <type>SlangReflectionFunction*</type>
        </param>
      </function>
      <function name="ReflectionFunction_getOverloadCount" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionFunction_getOverloadCount" static="true" unsafe="true">
        <type native="unsigned int">uint</type>
        <param name="func">
          <type>SlangReflectionFunction*</type>
        </param>
      </function>
      <function name="ReflectionFunction_getOverload" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionFunction_getOverload" static="true" unsafe="true">
        <type>SlangReflectionFunction*</type>
        <param name="func">
          <type>SlangReflectionFunction*</type>
        </param>
        <param name="index">
          <type>uint</type>
        </param>
      </function>
      <function name="ReflectionDecl_getChildrenCount" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionDecl_getChildrenCount" static="true" unsafe="true">
        <type native="unsigned int">uint</type>
        <param name="parentDecl">
          <type>SlangReflectionDecl*</type>
        </param>
      </function>
      <function name="ReflectionDecl_getChild" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionDecl_getChild" static="true" unsafe="true">
        <type>SlangReflectionDecl*</type>
        <param name="parentDecl">
          <type>SlangReflectionDecl*</type>
        </param>
        <param name="index">
          <type>uint</type>
        </param>
      </function>
      <function name="ReflectionDecl_getName" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionDecl_getName" static="true" unsafe="true">
        <type native="const char *">sbyte*</type>
        <param name="decl">
          <type>SlangReflectionDecl*</type>
        </param>
      </function>
      <function name="ReflectionDecl_getKind" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionDecl_getKind" static="true" unsafe="true">
        <type native="SlangDeclKind">DeclKind</type>
        <param name="decl">
          <type>SlangReflectionDecl*</type>
        </param>
      </function>
      <function name="ReflectionDecl_castToFunction" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionDecl_castToFunction" static="true" unsafe="true">
        <type>SlangReflectionFunction*</type>
        <param name="decl">
          <type>SlangReflectionDecl*</type>
        </param>
      </function>
      <function name="ReflectionDecl_castToVariable" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionDecl_castToVariable" static="true" unsafe="true">
        <type>SlangReflectionVariable*</type>
        <param name="decl">
          <type>SlangReflectionDecl*</type>
        </param>
      </function>
      <function name="ReflectionDecl_castToGeneric" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionDecl_castToGeneric" static="true" unsafe="true">
        <type>SlangReflectionGeneric*</type>
        <param name="decl">
          <type>SlangReflectionDecl*</type>
        </param>
      </function>
      <function name="Reflection_getTypeFromDecl" access="public" lib="slang" convention="Cdecl" entrypoint="spReflection_getTypeFromDecl" static="true" unsafe="true">
        <type>SlangReflectionType*</type>
        <param name="decl">
          <type>SlangReflectionDecl*</type>
        </param>
      </function>
      <function name="ReflectionDecl_getParent" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionDecl_getParent" static="true" unsafe="true">
        <type>SlangReflectionDecl*</type>
        <param name="decl">
          <type>SlangReflectionDecl*</type>
        </param>
      </function>
      <function name="ReflectionGeneric_asDecl" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionGeneric_asDecl" static="true" unsafe="true">
        <type>SlangReflectionDecl*</type>
        <param name="generic">
          <type>SlangReflectionGeneric*</type>
        </param>
      </function>
      <function name="ReflectionGeneric_GetName" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionGeneric_GetName" static="true" unsafe="true">
        <type native="const char *">sbyte*</type>
        <param name="generic">
          <type>SlangReflectionGeneric*</type>
        </param>
      </function>
      <function name="ReflectionGeneric_GetTypeParameterCount" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionGeneric_GetTypeParameterCount" static="true" unsafe="true">
        <type native="unsigned int">uint</type>
        <param name="generic">
          <type>SlangReflectionGeneric*</type>
        </param>
      </function>
      <function name="ReflectionGeneric_GetTypeParameter" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionGeneric_GetTypeParameter" static="true" unsafe="true">
        <type>SlangReflectionVariable*</type>
        <param name="generic">
          <type>SlangReflectionGeneric*</type>
        </param>
        <param name="index">
          <type>uint</type>
        </param>
      </function>
      <function name="ReflectionGeneric_GetValueParameterCount" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionGeneric_GetValueParameterCount" static="true" unsafe="true">
        <type native="unsigned int">uint</type>
        <param name="generic">
          <type>SlangReflectionGeneric*</type>
        </param>
      </function>
      <function name="ReflectionGeneric_GetValueParameter" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionGeneric_GetValueParameter" static="true" unsafe="true">
        <type>SlangReflectionVariable*</type>
        <param name="generic">
          <type>SlangReflectionGeneric*</type>
        </param>
        <param name="index">
          <type>uint</type>
        </param>
      </function>
      <function name="ReflectionGeneric_GetTypeParameterConstraintCount" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionGeneric_GetTypeParameterConstraintCount" static="true" unsafe="true">
        <type native="unsigned int">uint</type>
        <param name="generic">
          <type>SlangReflectionGeneric*</type>
        </param>
        <param name="typeParam">
          <type>SlangReflectionVariable*</type>
        </param>
      </function>
      <function name="ReflectionGeneric_GetTypeParameterConstraintType" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionGeneric_GetTypeParameterConstraintType" static="true" unsafe="true">
        <type>SlangReflectionType*</type>
        <param name="generic">
          <type>SlangReflectionGeneric*</type>
        </param>
        <param name="typeParam">
          <type>SlangReflectionVariable*</type>
        </param>
        <param name="index">
          <type>uint</type>
        </param>
      </function>
      <function name="ReflectionGeneric_GetInnerKind" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionGeneric_GetInnerKind" static="true" unsafe="true">
        <type native="SlangDeclKind">DeclKind</type>
        <param name="generic">
          <type>SlangReflectionGeneric*</type>
        </param>
      </function>
      <function name="ReflectionGeneric_GetInnerDecl" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionGeneric_GetInnerDecl" static="true" unsafe="true">
        <type>SlangReflectionDecl*</type>
        <param name="generic">
          <type>SlangReflectionGeneric*</type>
        </param>
      </function>
      <function name="ReflectionGeneric_GetOuterGenericContainer" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionGeneric_GetOuterGenericContainer" static="true" unsafe="true">
        <type>SlangReflectionGeneric*</type>
        <param name="generic">
          <type>SlangReflectionGeneric*</type>
        </param>
      </function>
      <function name="ReflectionGeneric_GetConcreteType" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionGeneric_GetConcreteType" static="true" unsafe="true">
        <type>SlangReflectionType*</type>
        <param name="generic">
          <type>SlangReflectionGeneric*</type>
        </param>
        <param name="typeParam">
          <type>SlangReflectionVariable*</type>
        </param>
      </function>
      <function name="ReflectionGeneric_GetConcreteIntVal" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionGeneric_GetConcreteIntVal" static="true" unsafe="true">
        <type native="int64_t">nint</type>
        <param name="generic">
          <type>SlangReflectionGeneric*</type>
        </param>
        <param name="valueParam">
          <type>SlangReflectionVariable*</type>
        </param>
      </function>
      <function name="ReflectionGeneric_applySpecializations" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionGeneric_applySpecializations" static="true" unsafe="true">
        <type>SlangReflectionGeneric*</type>
        <param name="currGeneric">
          <type>SlangReflectionGeneric*</type>
        </param>
        <param name="generic">
          <type>SlangReflectionGeneric*</type>
        </param>
      </function>
      <function name="ReflectionVariableLayout_getStage" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionVariableLayout_getStage" static="true" unsafe="true">
        <type native="SlangStage">Stage</type>
        <param name="var">
          <type>SlangReflectionVariableLayout*</type>
        </param>
      </function>
      <function name="ReflectionVariableLayout_getPendingDataLayout" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionVariableLayout_getPendingDataLayout" static="true" unsafe="true">
        <type>SlangReflectionVariableLayout*</type>
        <param name="var">
          <type>SlangReflectionVariableLayout*</type>
        </param>
      </function>
      <function name="ReflectionParameter_GetBindingIndex" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionParameter_GetBindingIndex" static="true" unsafe="true">
        <type native="unsigned int">uint</type>
        <param name="parameter">
          <type>SlangReflectionVariableLayout*</type>
        </param>
      </function>
      <function name="ReflectionParameter_GetBindingSpace" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionParameter_GetBindingSpace" static="true" unsafe="true">
        <type native="unsigned int">uint</type>
        <param name="parameter">
          <type>SlangReflectionVariableLayout*</type>
        </param>
      </function>
      <function name="IsParameterLocationUsed" access="public" lib="slang" convention="Cdecl" entrypoint="spIsParameterLocationUsed" static="true" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="entryPointIndex">
          <type>nint</type>
        </param>
        <param name="targetIndex">
          <type>nint</type>
        </param>
        <param name="category">
          <type>ParameterCategory</type>
        </param>
        <param name="spaceIndex">
          <type>nuint</type>
        </param>
        <param name="registerIndex">
          <type>nuint</type>
        </param>
        <param name="outUsed">
          <type>bool*</type>
        </param>
      </function>
      <function name="ReflectionEntryPoint_getName" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionEntryPoint_getName" static="true" unsafe="true">
        <type native="const char *">sbyte*</type>
        <param name="entryPoint">
          <type>SlangEntryPointLayout*</type>
        </param>
      </function>
      <function name="ReflectionEntryPoint_getNameOverride" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionEntryPoint_getNameOverride" static="true" unsafe="true">
        <type native="const char *">sbyte*</type>
        <param name="entryPoint">
          <type>SlangEntryPointLayout*</type>
        </param>
      </function>
      <function name="ReflectionEntryPoint_getFunction" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionEntryPoint_getFunction" static="true" unsafe="true">
        <type>SlangReflectionFunction*</type>
        <param name="entryPoint">
          <type>SlangEntryPointLayout*</type>
        </param>
      </function>
      <function name="ReflectionEntryPoint_getParameterCount" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionEntryPoint_getParameterCount" static="true" unsafe="true">
        <type native="unsigned int">uint</type>
        <param name="entryPoint">
          <type>SlangEntryPointLayout*</type>
        </param>
      </function>
      <function name="ReflectionEntryPoint_getParameterByIndex" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionEntryPoint_getParameterByIndex" static="true" unsafe="true">
        <type>SlangReflectionVariableLayout*</type>
        <param name="entryPoint">
          <type>SlangEntryPointLayout*</type>
        </param>
        <param name="index">
          <type>uint</type>
        </param>
      </function>
      <function name="ReflectionEntryPoint_getStage" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionEntryPoint_getStage" static="true" unsafe="true">
        <type native="SlangStage">Stage</type>
        <param name="entryPoint">
          <type>SlangEntryPointLayout*</type>
        </param>
      </function>
      <function name="ReflectionEntryPoint_getComputeThreadGroupSize" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionEntryPoint_getComputeThreadGroupSize" static="true" unsafe="true">
        <type>void</type>
        <param name="entryPoint">
          <type>SlangEntryPointLayout*</type>
        </param>
        <param name="axisCount">
          <type>nuint</type>
        </param>
        <param name="outSizeAlongAxis">
          <type>nuint*</type>
        </param>
      </function>
      <function name="ReflectionEntryPoint_getComputeWaveSize" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionEntryPoint_getComputeWaveSize" static="true" unsafe="true">
        <type>void</type>
        <param name="entryPoint">
          <type>SlangEntryPointLayout*</type>
        </param>
        <param name="outWaveSize">
          <type>nuint*</type>
        </param>
      </function>
      <function name="ReflectionEntryPoint_usesAnySampleRateInput" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionEntryPoint_usesAnySampleRateInput" static="true" unsafe="true">
        <type>int</type>
        <param name="entryPoint">
          <type>SlangEntryPointLayout*</type>
        </param>
      </function>
      <function name="ReflectionEntryPoint_getVarLayout" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionEntryPoint_getVarLayout" static="true" unsafe="true">
        <type>SlangReflectionVariableLayout*</type>
        <param name="entryPoint">
          <type>SlangEntryPointLayout*</type>
        </param>
      </function>
      <function name="ReflectionEntryPoint_getResultVarLayout" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionEntryPoint_getResultVarLayout" static="true" unsafe="true">
        <type>SlangReflectionVariableLayout*</type>
        <param name="entryPoint">
          <type>SlangEntryPointLayout*</type>
        </param>
      </function>
      <function name="ReflectionEntryPoint_hasDefaultConstantBuffer" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionEntryPoint_hasDefaultConstantBuffer" static="true" unsafe="true">
        <type>int</type>
        <param name="entryPoint">
          <type>SlangEntryPointLayout*</type>
        </param>
      </function>
      <function name="ReflectionTypeParameter_GetName" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionTypeParameter_GetName" static="true" unsafe="true">
        <type native="const char *">sbyte*</type>
        <param name="typeParam">
          <type>SlangReflectionTypeParameter*</type>
        </param>
      </function>
      <function name="ReflectionTypeParameter_GetIndex" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionTypeParameter_GetIndex" static="true" unsafe="true">
        <type native="unsigned int">uint</type>
        <param name="typeParam">
          <type>SlangReflectionTypeParameter*</type>
        </param>
      </function>
      <function name="ReflectionTypeParameter_GetConstraintCount" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionTypeParameter_GetConstraintCount" static="true" unsafe="true">
        <type native="unsigned int">uint</type>
        <param name="typeParam">
          <type>SlangReflectionTypeParameter*</type>
        </param>
      </function>
      <function name="ReflectionTypeParameter_GetConstraintByIndex" access="public" lib="slang" convention="Cdecl" entrypoint="spReflectionTypeParameter_GetConstraintByIndex" static="true" unsafe="true">
        <type>SlangReflectionType*</type>
        <param name="typeParam">
          <type>SlangReflectionTypeParameter*</type>
        </param>
        <param name="index">
          <type>uint</type>
        </param>
      </function>
      <function name="Reflection_ToJson" access="public" lib="slang" convention="Cdecl" entrypoint="spReflection_ToJson" static="true" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="reflection">
          <type>SlangProgramLayout*</type>
        </param>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="outBlob">
          <type>ISlangBlob**</type>
        </param>
      </function>
      <function name="Reflection_GetParameterCount" access="public" lib="slang" convention="Cdecl" entrypoint="spReflection_GetParameterCount" static="true" unsafe="true">
        <type native="unsigned int">uint</type>
        <param name="reflection">
          <type>SlangProgramLayout*</type>
        </param>
      </function>
      <function name="Reflection_GetParameterByIndex" access="public" lib="slang" convention="Cdecl" entrypoint="spReflection_GetParameterByIndex" static="true" unsafe="true">
        <type native="SlangReflectionParameter *">SlangReflectionVariableLayout*</type>
        <param name="reflection">
          <type>SlangProgramLayout*</type>
        </param>
        <param name="index">
          <type>uint</type>
        </param>
      </function>
      <function name="Reflection_GetTypeParameterCount" access="public" lib="slang" convention="Cdecl" entrypoint="spReflection_GetTypeParameterCount" static="true" unsafe="true">
        <type native="unsigned int">uint</type>
        <param name="reflection">
          <type>SlangProgramLayout*</type>
        </param>
      </function>
      <function name="Reflection_GetTypeParameterByIndex" access="public" lib="slang" convention="Cdecl" entrypoint="spReflection_GetTypeParameterByIndex" static="true" unsafe="true">
        <type>SlangReflectionTypeParameter*</type>
        <param name="reflection">
          <type>SlangProgramLayout*</type>
        </param>
        <param name="index">
          <type>uint</type>
        </param>
      </function>
      <function name="Reflection_FindTypeParameter" access="public" lib="slang" convention="Cdecl" entrypoint="spReflection_FindTypeParameter" static="true" unsafe="true">
        <type>SlangReflectionTypeParameter*</type>
        <param name="reflection">
          <type>SlangProgramLayout*</type>
        </param>
        <param name="name">
          <type>sbyte*</type>
        </param>
      </function>
      <function name="Reflection_FindTypeByName" access="public" lib="slang" convention="Cdecl" entrypoint="spReflection_FindTypeByName" static="true" unsafe="true">
        <type>SlangReflectionType*</type>
        <param name="reflection">
          <type>SlangProgramLayout*</type>
        </param>
        <param name="name">
          <type>sbyte*</type>
        </param>
      </function>
      <function name="Reflection_GetTypeLayout" access="public" lib="slang" convention="Cdecl" entrypoint="spReflection_GetTypeLayout" static="true" unsafe="true">
        <type>SlangReflectionTypeLayout*</type>
        <param name="reflection">
          <type>SlangProgramLayout*</type>
        </param>
        <param name="reflectionType">
          <type>SlangReflectionType*</type>
        </param>
        <param name="rules">
          <type>LayoutRules</type>
        </param>
      </function>
      <function name="Reflection_FindFunctionByName" access="public" lib="slang" convention="Cdecl" entrypoint="spReflection_FindFunctionByName" static="true" unsafe="true">
        <type>SlangReflectionFunction*</type>
        <param name="reflection">
          <type>SlangProgramLayout*</type>
        </param>
        <param name="name">
          <type>sbyte*</type>
        </param>
      </function>
      <function name="Reflection_FindFunctionByNameInType" access="public" lib="slang" convention="Cdecl" entrypoint="spReflection_FindFunctionByNameInType" static="true" unsafe="true">
        <type>SlangReflectionFunction*</type>
        <param name="reflection">
          <type>SlangProgramLayout*</type>
        </param>
        <param name="reflType">
          <type>SlangReflectionType*</type>
        </param>
        <param name="name">
          <type>sbyte*</type>
        </param>
      </function>
      <function name="Reflection_FindVarByNameInType" access="public" lib="slang" convention="Cdecl" entrypoint="spReflection_FindVarByNameInType" static="true" unsafe="true">
        <type>SlangReflectionVariable*</type>
        <param name="reflection">
          <type>SlangProgramLayout*</type>
        </param>
        <param name="reflType">
          <type>SlangReflectionType*</type>
        </param>
        <param name="name">
          <type>sbyte*</type>
        </param>
      </function>
      <function name="Reflection_getEntryPointCount" access="public" lib="slang" convention="Cdecl" entrypoint="spReflection_getEntryPointCount" static="true" unsafe="true">
        <type native="SlangUInt">nuint</type>
        <param name="reflection">
          <type>SlangProgramLayout*</type>
        </param>
      </function>
      <function name="Reflection_getEntryPointByIndex" access="public" lib="slang" convention="Cdecl" entrypoint="spReflection_getEntryPointByIndex" static="true" unsafe="true">
        <type native="SlangReflectionEntryPoint *">SlangEntryPointLayout*</type>
        <param name="reflection">
          <type>SlangProgramLayout*</type>
        </param>
        <param name="index">
          <type>nuint</type>
        </param>
      </function>
      <function name="Reflection_findEntryPointByName" access="public" lib="slang" convention="Cdecl" entrypoint="spReflection_findEntryPointByName" static="true" unsafe="true">
        <type native="SlangReflectionEntryPoint *">SlangEntryPointLayout*</type>
        <param name="reflection">
          <type>SlangProgramLayout*</type>
        </param>
        <param name="name">
          <type>sbyte*</type>
        </param>
      </function>
      <function name="Reflection_getGlobalConstantBufferBinding" access="public" lib="slang" convention="Cdecl" entrypoint="spReflection_getGlobalConstantBufferBinding" static="true" unsafe="true">
        <type native="SlangUInt">nuint</type>
        <param name="reflection">
          <type>SlangProgramLayout*</type>
        </param>
      </function>
      <function name="Reflection_getGlobalConstantBufferSize" access="public" lib="slang" convention="Cdecl" entrypoint="spReflection_getGlobalConstantBufferSize" static="true" unsafe="true">
        <type native="size_t">nuint</type>
        <param name="reflection">
          <type>SlangProgramLayout*</type>
        </param>
      </function>
      <function name="Reflection_specializeType" access="public" lib="slang" convention="Cdecl" entrypoint="spReflection_specializeType" static="true" unsafe="true">
        <type>SlangReflectionType*</type>
        <param name="reflection">
          <type>SlangProgramLayout*</type>
        </param>
        <param name="type">
          <type>SlangReflectionType*</type>
        </param>
        <param name="specializationArgCount">
          <type>nint</type>
        </param>
        <param name="specializationArgs">
          <type>SlangReflectionType**</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
        </param>
      </function>
      <function name="Reflection_specializeGeneric" access="public" lib="slang" convention="Cdecl" entrypoint="spReflection_specializeGeneric" static="true" unsafe="true">
        <type>SlangReflectionGeneric*</type>
        <param name="inProgramLayout">
          <type>SlangProgramLayout*</type>
        </param>
        <param name="generic">
          <type>SlangReflectionGeneric*</type>
        </param>
        <param name="argCount">
          <type>nint</type>
        </param>
        <param name="argTypes">
          <type>ReflectionGenericArgType*</type>
        </param>
        <param name="args">
          <type>SlangReflectionGenericArg*</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
        </param>
      </function>
      <function name="Reflection_isSubType" access="public" lib="slang" convention="Cdecl" entrypoint="spReflection_isSubType" static="true" unsafe="true">
        <type native="bool">byte</type>
        <param name="reflection">
          <type>SlangProgramLayout*</type>
        </param>
        <param name="subType">
          <type>SlangReflectionType*</type>
        </param>
        <param name="superType">
          <type>SlangReflectionType*</type>
        </param>
      </function>
      <function name="Reflection_getHashedStringCount" access="public" lib="slang" convention="Cdecl" entrypoint="spReflection_getHashedStringCount" static="true" unsafe="true">
        <type native="SlangUInt">nuint</type>
        <param name="reflection">
          <type>SlangProgramLayout*</type>
        </param>
      </function>
      <function name="Reflection_getHashedString" access="public" lib="slang" convention="Cdecl" entrypoint="spReflection_getHashedString" static="true" unsafe="true">
        <type native="const char *">sbyte*</type>
        <param name="reflection">
          <type>SlangProgramLayout*</type>
        </param>
        <param name="index">
          <type>nuint</type>
        </param>
        <param name="outCount">
          <type>nuint*</type>
        </param>
      </function>
      <function name="ComputeStringHash" access="public" lib="slang" convention="Cdecl" entrypoint="spComputeStringHash" static="true" unsafe="true">
        <type native="SlangUInt32">uint</type>
        <param name="chars">
          <type>sbyte*</type>
        </param>
        <param name="count">
          <type>nuint</type>
        </param>
      </function>
      <function name="Reflection_getGlobalParamsTypeLayout" access="public" lib="slang" convention="Cdecl" entrypoint="spReflection_getGlobalParamsTypeLayout" static="true" unsafe="true">
        <type>SlangReflectionTypeLayout*</type>
        <param name="reflection">
          <type>SlangProgramLayout*</type>
        </param>
      </function>
      <function name="Reflection_getGlobalParamsVarLayout" access="public" lib="slang" convention="Cdecl" entrypoint="spReflection_getGlobalParamsVarLayout" static="true" unsafe="true">
        <type>SlangReflectionVariableLayout*</type>
        <param name="reflection">
          <type>SlangProgramLayout*</type>
        </param>
      </function>
      <function name="GetTranslationUnitSource" access="public" lib="slang" convention="Cdecl" entrypoint="spGetTranslationUnitSource" static="true" unsafe="true">
        <type native="const char *">sbyte*</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="translationUnitIndex">
          <type>int</type>
        </param>
      </function>
      <function name="Reflection_GetSession" access="public" lib="slang" convention="Cdecl" entrypoint="_Z23spReflection_GetSessionP18SlangProgramLayout" static="true" unsafe="true">
        <type native="slang::ISession *">ISession*</type>
        <param name="reflection">
          <type>SlangProgramLayout*</type>
        </param>
      </function>
      <function name="CompileRequest_getProgram" access="public" lib="slang" convention="Cdecl" entrypoint="spCompileRequest_getProgram" static="true" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="outProgram">
          <type>IComponentType**</type>
        </param>
      </function>
      <function name="CompileRequest_getProgramWithEntryPoints" access="public" lib="slang" convention="Cdecl" entrypoint="spCompileRequest_getProgramWithEntryPoints" static="true" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="outProgram">
          <type>IComponentType**</type>
        </param>
      </function>
      <function name="CompileRequest_getEntryPoint" access="public" lib="slang" convention="Cdecl" entrypoint="spCompileRequest_getEntryPoint" static="true" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="entryPointIndex">
          <type>nint</type>
        </param>
        <param name="outEntryPoint">
          <type>IComponentType**</type>
        </param>
      </function>
      <function name="CompileRequest_getModule" access="public" lib="slang" convention="Cdecl" entrypoint="spCompileRequest_getModule" static="true" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="translationUnitIndex">
          <type>nint</type>
        </param>
        <param name="outModule">
          <type>IModule**</type>
        </param>
      </function>
      <function name="CompileRequest_getSession" access="public" lib="slang" convention="Cdecl" entrypoint="spCompileRequest_getSession" static="true" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="request">
          <type>ICompileRequest*</type>
        </param>
        <param name="outSession">
          <type>ISession**</type>
        </param>
      </function>
      <constant name="kSessionFlags_None" access="public">
        <type primitive="True">uint</type>
        <value>
          <code>0</code>
        </value>
      </constant>
      <function name="slang_createGlobalSession" access="public" lib="slang" convention="Cdecl" static="true" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="apiVersion">
          <type>nint</type>
        </param>
        <param name="outGlobalSession">
          <type>IGlobalSession**</type>
        </param>
      </function>
      <function name="slang_createGlobalSessionWithoutCoreModule" access="public" lib="slang" convention="Cdecl" static="true" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="apiVersion">
          <type>nint</type>
        </param>
        <param name="outGlobalSession">
          <type>IGlobalSession**</type>
        </param>
      </function>
      <function name="slang_getEmbeddedCoreModule" access="public" lib="slang" convention="Cdecl" entrypoint="_Z27slang_getEmbeddedCoreModulev" static="true" unsafe="true">
        <type>ISlangBlob*</type>
      </function>
      <function name="slang_shutdown" access="public" lib="slang" convention="Cdecl" static="true">
        <type>void</type>
      </function>
      <function name="slang_getLastInternalErrorMessage" access="public" lib="slang" convention="Cdecl" static="true" unsafe="true">
        <type native="const char *">sbyte*</type>
      </function>
      <constant name="kMaxRenderTargetCount" access="public">
        <type primitive="True">int</type>
        <value>
          <code>8</code>
        </value>
      </constant>
      <constant name="EnableNone" access="public">
        <type primitive="True">uint</type>
        <value>
          <code>0</code>
        </value>
      </constant>
      <constant name="EnableRed" access="public">
        <type primitive="True">uint</type>
        <value>
          <code>0x01</code>
        </value>
      </constant>
      <constant name="EnableGreen" access="public">
        <type primitive="True">uint</type>
        <value>
          <code>0x02</code>
        </value>
      </constant>
      <constant name="EnableBlue" access="public">
        <type primitive="True">uint</type>
        <value>
          <code>0x04</code>
        </value>
      </constant>
      <constant name="EnableAlpha" access="public">
        <type primitive="True">uint</type>
        <value>
          <code>0x08</code>
        </value>
      </constant>
      <constant name="EnableAll" access="public">
        <type primitive="True">uint</type>
        <value>
          <code>0x0F</code>
        </value>
      </constant>
      <function name="gfxIsCompressedFormat" access="public" lib="slang" convention="Cdecl" static="true">
        <type native="bool">byte</type>
        <param name="format">
          <type>Format</type>
        </param>
      </function>
      <function name="gfxIsTypelessFormat" access="public" lib="slang" convention="Cdecl" static="true">
        <type native="bool">byte</type>
        <param name="format">
          <type>Format</type>
        </param>
      </function>
      <function name="gfxGetFormatInfo" access="public" lib="slang" convention="Cdecl" static="true" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="format">
          <type>Format</type>
        </param>
        <param name="outInfo">
          <type>FormatInfo*</type>
        </param>
      </function>
      <function name="gfxGetAdapters" access="public" lib="slang" convention="Cdecl" static="true" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="type">
          <type>DeviceType</type>
        </param>
        <param name="outAdaptersBlob">
          <type>ISlangBlob**</type>
        </param>
      </function>
      <function name="gfxCreateDevice" access="public" lib="slang" convention="Cdecl" static="true" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="desc">
          <type>DeviceDesc*</type>
        </param>
        <param name="outDevice">
          <type>IDevice**</type>
        </param>
      </function>
      <function name="gfxReportLiveObjects" access="public" lib="slang" convention="Cdecl" static="true">
        <type native="SlangResult">int</type>
      </function>
      <function name="gfxSetDebugCallback" access="public" lib="slang" convention="Cdecl" static="true" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="callback">
          <type>IDebugCallback*</type>
        </param>
      </function>
      <function name="gfxEnableDebugLayer" access="public" lib="slang" convention="Cdecl" static="true">
        <type>void</type>
      </function>
      <function name="gfxGetDeviceTypeName" access="public" lib="slang" convention="Cdecl" static="true" unsafe="true">
        <type native="const char *">sbyte*</type>
        <param name="type">
          <type>DeviceType</type>
        </param>
      </function>
      <constant name="SLANG_FACILITY_WIN_GENERAL" access="public">
        <type primitive="True">int</type>
        <value>
          <code>0</code>
        </value>
      </constant>
      <constant name="SLANG_FACILITY_WIN_INTERFACE" access="public">
        <type primitive="True">int</type>
        <value>
          <code>4</code>
        </value>
      </constant>
      <constant name="SLANG_FACILITY_WIN_API" access="public">
        <type primitive="True">int</type>
        <value>
          <code>7</code>
        </value>
      </constant>
      <constant name="SLANG_FACILITY_BASE" access="public">
        <type primitive="True">int</type>
        <value>
          <code>0x200</code>
        </value>
      </constant>
      <constant name="SLANG_FACILITY_CORE" access="public">
        <type primitive="True">int</type>
        <value>
          <code>0x200</code>
        </value>
      </constant>
      <constant name="SLANG_FACILITY_INTERNAL" access="public">
        <type primitive="True">int</type>
        <value>
          <code>0x200 + 1</code>
        </value>
      </constant>
      <constant name="SLANG_FACILITY_EXTERNAL_BASE" access="public">
        <type primitive="True">int</type>
        <value>
          <code>0x210</code>
        </value>
      </constant>
      <constant name="SLANG_OK" access="public">
        <type primitive="True">int</type>
        <value>
          <code>0</code>
        </value>
      </constant>
      <constant name="SLANG_FAIL" access="public">
        <type primitive="True">int</type>
        <value>
          <unchecked>
            <code>((((int)(0)) &lt;&lt; 16) | ((int)(0x4005)) | (int)(<value>0x80000000</value>))</code>
          </unchecked>
        </value>
      </constant>
      <constant name="SLANG_E_NOT_IMPLEMENTED" access="public">
        <type primitive="True">int</type>
        <value>
          <unchecked>
            <code>((((int)(0)) &lt;&lt; 16) | ((int)(0x4001)) | (int)(<value>0x80000000</value>))</code>
          </unchecked>
        </value>
      </constant>
      <constant name="SLANG_E_NO_INTERFACE" access="public">
        <type primitive="True">int</type>
        <value>
          <unchecked>
            <code>((((int)(0)) &lt;&lt; 16) | ((int)(0x4002)) | (int)(<value>0x80000000</value>))</code>
          </unchecked>
        </value>
      </constant>
      <constant name="SLANG_E_ABORT" access="public">
        <type primitive="True">int</type>
        <value>
          <unchecked>
            <code>((((int)(0)) &lt;&lt; 16) | ((int)(0x4004)) | (int)(<value>0x80000000</value>))</code>
          </unchecked>
        </value>
      </constant>
      <constant name="SLANG_E_INVALID_HANDLE" access="public">
        <type primitive="True">int</type>
        <value>
          <unchecked>
            <code>((((int)(7)) &lt;&lt; 16) | ((int)(6)) | (int)(<value>0x80000000</value>))</code>
          </unchecked>
        </value>
      </constant>
      <constant name="SLANG_E_INVALID_ARG" access="public">
        <type primitive="True">int</type>
        <value>
          <unchecked>
            <code>((((int)(7)) &lt;&lt; 16) | ((int)(0x57)) | (int)(<value>0x80000000</value>))</code>
          </unchecked>
        </value>
      </constant>
      <constant name="SLANG_E_OUT_OF_MEMORY" access="public">
        <type primitive="True">int</type>
        <value>
          <unchecked>
            <code>((((int)(7)) &lt;&lt; 16) | ((int)(0xe)) | (int)(<value>0x80000000</value>))</code>
          </unchecked>
        </value>
      </constant>
      <constant name="SLANG_E_BUFFER_TOO_SMALL" access="public">
        <type primitive="True">int</type>
        <value>
          <unchecked>
            <code>((((int)(0x200)) &lt;&lt; 16) | ((int)(1)) | (int)(<value>0x80000000</value>))</code>
          </unchecked>
        </value>
      </constant>
      <constant name="SLANG_E_UNINITIALIZED" access="public">
        <type primitive="True">int</type>
        <value>
          <unchecked>
            <code>((((int)(0x200)) &lt;&lt; 16) | ((int)(2)) | (int)(<value>0x80000000</value>))</code>
          </unchecked>
        </value>
      </constant>
      <constant name="SLANG_E_PENDING" access="public">
        <type primitive="True">int</type>
        <value>
          <unchecked>
            <code>((((int)(0x200)) &lt;&lt; 16) | ((int)(3)) | (int)(<value>0x80000000</value>))</code>
          </unchecked>
        </value>
      </constant>
      <constant name="SLANG_E_CANNOT_OPEN" access="public">
        <type primitive="True">int</type>
        <value>
          <unchecked>
            <code>((((int)(0x200)) &lt;&lt; 16) | ((int)(4)) | (int)(<value>0x80000000</value>))</code>
          </unchecked>
        </value>
      </constant>
      <constant name="SLANG_E_NOT_FOUND" access="public">
        <type primitive="True">int</type>
        <value>
          <unchecked>
            <code>((((int)(0x200)) &lt;&lt; 16) | ((int)(5)) | (int)(<value>0x80000000</value>))</code>
          </unchecked>
        </value>
      </constant>
      <constant name="SLANG_E_INTERNAL_FAIL" access="public">
        <type primitive="True">int</type>
        <value>
          <unchecked>
            <code>((((int)(0x200)) &lt;&lt; 16) | ((int)(6)) | (int)(<value>0x80000000</value>))</code>
          </unchecked>
        </value>
      </constant>
      <constant name="SLANG_E_NOT_AVAILABLE" access="public">
        <type primitive="True">int</type>
        <value>
          <unchecked>
            <code>((((int)(0x200)) &lt;&lt; 16) | ((int)(7)) | (int)(<value>0x80000000</value>))</code>
          </unchecked>
        </value>
      </constant>
      <constant name="SLANG_E_TIME_OUT" access="public">
        <type primitive="True">int</type>
        <value>
          <unchecked>
            <code>((((int)(0x200)) &lt;&lt; 16) | ((int)(8)) | (int)(<value>0x80000000</value>))</code>
          </unchecked>
        </value>
      </constant>
      <constant name="SLANG_API_VERSION" access="public">
        <type primitive="True">int</type>
        <value>
          <code>0</code>
        </value>
      </constant>
      <constant name="SLANG_ERROR_INSUFFICIENT_BUFFER" access="public">
        <type primitive="True">int</type>
        <value>
          <unchecked>
            <code>((((int)(0x200)) &lt;&lt; 16) | ((int)(1)) | (int)(<value>0x80000000</value>))</code>
          </unchecked>
        </value>
      </constant>
      <constant name="SLANG_ERROR_INVALID_PARAMETER" access="public">
        <type primitive="True">int</type>
        <value>
          <unchecked>
            <code>((((int)(7)) &lt;&lt; 16) | ((int)(0x57)) | (int)(<value>0x80000000</value>))</code>
          </unchecked>
        </value>
      </constant>
      <iid name="IID_ISlangUnknown" value="0x00000000, 0x0000, 0x0000, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46" />
      <iid name="IID_ISlangCastable" value="0x87EDE0E1, 0x4852, 0x44B0, 0x8B, 0xF2, 0xCB, 0x31, 0x87, 0x4D, 0xE2, 0x39" />
      <iid name="IID_ISlangClonable" value="0x1EC36168, 0xE9F4, 0x430D, 0xBB, 0x17, 0x04, 0x8A, 0x80, 0x46, 0xB3, 0x1F" />
      <iid name="IID_ISlangBlob" value="0x8BA5FB08, 0x5195, 0x40E2, 0xAC, 0x58, 0x0D, 0x98, 0x9C, 0x3A, 0x01, 0x02" />
      <iid name="IID_SlangTerminatedChars" value="0xBE0DB1A8, 0x3594, 0x4603, 0xA7, 0x8B, 0xC4, 0x86, 0x84, 0x30, 0xDF, 0xBB" />
      <iid name="IID_ISlangFileSystem" value="0x003A09FC, 0x3A4D, 0x4BA0, 0xAD, 0x60, 0x1F, 0xD8, 0x63, 0xA9, 0x15, 0xAB" />
      <iid name="IID_ISlangSharedLibrary_Dep1" value="0x9C9D5BC5, 0xEB61, 0x496F, 0x80, 0xD7, 0xD1, 0x47, 0xC4, 0xA2, 0x37, 0x30" />
      <iid name="IID_ISlangSharedLibrary" value="0x70DBC7C4, 0xDC3B, 0x4A07, 0xAE, 0x7E, 0x75, 0x2A, 0xF6, 0xA8, 0x15, 0x55" />
      <iid name="IID_ISlangSharedLibraryLoader" value="0x6264AB2B, 0xA3E8, 0x4A06, 0x97, 0xF1, 0x49, 0xBC, 0x2D, 0x2A, 0xB1, 0x4D" />
      <iid name="IID_ISlangFileSystemExt" value="0x5FB632D2, 0x979D, 0x4481, 0x9F, 0xEE, 0x66, 0x3C, 0x3F, 0x14, 0x49, 0xE1" />
      <iid name="IID_ISlangMutableFileSystem" value="0xA058675C, 0x1D65, 0x452A, 0x84, 0x58, 0xCC, 0xDE, 0xD1, 0x42, 0x71, 0x05" />
      <iid name="IID_ISlangWriter" value="0xEC457F0E, 0x9ADD, 0x4E6B, 0x85, 0x1C, 0xD7, 0xFA, 0x71, 0x6D, 0x15, 0xFD" />
      <iid name="IID_ISlangProfiler" value="0x197772C7, 0x0155, 0x4B91, 0x84, 0xE8, 0x66, 0x68, 0xBA, 0xFF, 0x06, 0x19" />
      <iid name="IID_ICompileRequest" value="0x96D33993, 0x317C, 0x4DB5, 0xAF, 0xD8, 0x66, 0x6E, 0xE7, 0x72, 0x48, 0xE2" />
      <iid name="IID_IGlobalSession" value="0xC140B5FD, 0x0C78, 0x452E, 0xBA, 0x7C, 0x1A, 0x1E, 0x70, 0xC7, 0xF7, 0x1C" />
      <iid name="IID_ISession" value="0x67618701, 0xD116, 0x468F, 0xAB, 0x3B, 0x47, 0x4B, 0xED, 0xCE, 0x0E, 0x3D" />
      <iid name="IID_IMetadata" value="0x8044A8A3, 0xDDC0, 0x4B7F, 0xAF, 0x8E, 0x02, 0x6E, 0x90, 0x5D, 0x73, 0x32" />
      <iid name="IID_IComponentType" value="0x5BC42BE8, 0x5C50, 0x4929, 0x9E, 0x5E, 0xD1, 0x5E, 0x7C, 0x24, 0x01, 0x5F" />
      <iid name="IID_IEntryPoint" value="0x8F241361, 0xF5BD, 0x4CA0, 0xA3, 0xAC, 0x02, 0xF7, 0xFA, 0x24, 0x02, 0xB8" />
      <iid name="IID_ITypeConformance" value="0x73EB3147, 0xE544, 0x41B5, 0xB8, 0xF0, 0xA2, 0x44, 0xDF, 0x21, 0x94, 0x0B" />
      <iid name="IID_IModule" value="0x0C720E64, 0x8722, 0x4D31, 0x89, 0x90, 0x63, 0x8A, 0x98, 0xB1, 0xC2, 0x79" />
      <iid name="IID_IModulePrecompileService_Experimental" value="0x8E12E8E3, 0x5FCD, 0x433E, 0xAF, 0xCB, 0x13, 0xA0, 0x88, 0xBC, 0x5E, 0xE5" />
      <iid name="IID_ICommandEncoder" value="0x77EA6383, 0xBE3D, 0x40AA, 0x8B, 0x45, 0xFD, 0xF0, 0xD7, 0x5B, 0xFA, 0x34" />
      <iid name="IID_IResourceCommandEncoder" value="0xF99A00E9, 0xED50, 0x4088, 0x8A, 0x0E, 0x3B, 0x26, 0x75, 0x50, 0x31, 0xEA" />
      <iid name="IID_IRenderCommandEncoder" value="0x7A8D56D0, 0x53E6, 0x4AD6, 0x85, 0xF7, 0xD1, 0x4D, 0xC1, 0x10, 0xFD, 0xCE" />
      <iid name="IID_IComputeCommandEncoder" value="0x88AA9322, 0x82F7, 0x4FE6, 0xA6, 0x8A, 0x29, 0xC7, 0xFE, 0x79, 0x87, 0x37" />
      <iid name="IID_IRayTracingCommandEncoder" value="0x9A672B87, 0x5035, 0x45E3, 0x96, 0x7C, 0x1F, 0x85, 0xCD, 0xB3, 0x63, 0x4F" />
    </class>
  </namespace>
</bindings>
