<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
  <namespace name="SlangNet.Bindings.Generated">
    <struct name="ISlangBlob" access="public" native="struct ISlangBlob : ISlangUnknown" vtbl="true" unsafe="true">
      <field name="lpVtbl" access="public">
        <type>void**</type>
      </field>
      <function name="queryInterface" access="public" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="uuid">
          <type>SlangUUID*</type>
        </param>
        <param name="outObject">
          <type>void**</type>
        </param>
        <body>
          <code>return ((delegate* unmanaged[Stdcall]&lt;ISlangBlob*, SlangUUID*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(ISlangBlob*)Unsafe.AsPointer(ref this)</param>, <param name="uuid">uuid</param>, <param name="outObject">outObject</param>);</code>
        </body>
      </function>
      <function name="addRef" access="public" unsafe="true">
        <type native="uint32_t">uint</type>
        <body>
          <code>return ((delegate* unmanaged[Stdcall]&lt;ISlangBlob*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(ISlangBlob*)Unsafe.AsPointer(ref this)</param>);</code>
        </body>
      </function>
      <function name="release" access="public" unsafe="true">
        <type native="uint32_t">uint</type>
        <body>
          <code>return ((delegate* unmanaged[Stdcall]&lt;ISlangBlob*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(ISlangBlob*)Unsafe.AsPointer(ref this)</param>);</code>
        </body>
      </function>
      <function name="getBufferPointer" access="public" unsafe="true">
        <type native="const void *">void*</type>
        <body>
          <code>return ((delegate* unmanaged[Stdcall]&lt;ISlangBlob*, void*&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(ISlangBlob*)Unsafe.AsPointer(ref this)</param>);</code>
        </body>
      </function>
      <function name="getBufferSize" access="public" unsafe="true">
        <type native="size_t">nuint</type>
        <body>
          <code>return ((delegate* unmanaged[Stdcall]&lt;ISlangBlob*, nuint&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(ISlangBlob*)Unsafe.AsPointer(ref this)</param>);</code>
        </body>
      </function>
      <vtbl>
        <field name="queryInterface" access="public">
          <type native="SlangResult (const SlangUUID &amp;, void **) __attribute__((nothrow)) __attribute__((stdcall))">delegate* unmanaged[Stdcall]&lt;ISlangBlob*, SlangUUID*, void**, int&gt;</type>
        </field>
        <field name="addRef" access="public">
          <type native="uint32_t () __attribute__((nothrow)) __attribute__((stdcall))">delegate* unmanaged[Stdcall]&lt;ISlangBlob*, uint&gt;</type>
        </field>
        <field name="release" access="public">
          <type native="uint32_t () __attribute__((nothrow)) __attribute__((stdcall))">delegate* unmanaged[Stdcall]&lt;ISlangBlob*, uint&gt;</type>
        </field>
        <field name="getBufferPointer" access="public">
          <type native="const void *() __attribute__((nothrow)) __attribute__((stdcall))">delegate* unmanaged[Stdcall]&lt;ISlangBlob*, void*&gt;</type>
        </field>
        <field name="getBufferSize" access="public">
          <type native="size_t () __attribute__((nothrow)) __attribute__((stdcall))">delegate* unmanaged[Stdcall]&lt;ISlangBlob*, nuint&gt;</type>
        </field>
      </vtbl>
    </struct>
  </namespace>
</bindings>
