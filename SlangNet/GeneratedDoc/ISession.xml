<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
  <namespace name="SlangNet.Bindings.Generated.Slang">
    <struct name="ISession" access="public" native="struct ISession : ISlangUnknown" parent="ISlangUnknown" vtbl="true" unsafe="true">
      <field name="lpVtbl" access="public">
        <type>Vtbl*</type>
      </field>
      <delegate name="_queryInterface" access="public" convention="ThisCall" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="pThis">
          <type>ISession*</type>
        </param>
        <param name="uuid">
          <type>SlangUUID*</type>
        </param>
        <param name="outObject">
          <type>void**</type>
        </param>
      </delegate>
      <delegate name="_addRef" access="public" convention="ThisCall">
        <type native="uint32_t">uint</type>
        <param name="pThis">
          <type>ISession*</type>
        </param>
      </delegate>
      <delegate name="_release" access="public" convention="ThisCall">
        <type native="uint32_t">uint</type>
        <param name="pThis">
          <type>ISession*</type>
        </param>
      </delegate>
      <delegate name="_getGlobalSession" access="public" convention="ThisCall" unsafe="true">
        <type native="slang::IGlobalSession *">IGlobalSession*</type>
        <param name="pThis">
          <type>ISession*</type>
        </param>
      </delegate>
      <delegate name="_loadModule" access="public" convention="ThisCall" unsafe="true">
        <type native="slang::IModule *">IModule*</type>
        <param name="pThis">
          <type>ISession*</type>
        </param>
        <param name="moduleName">
          <type>sbyte*</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
      </delegate>
      <delegate name="_loadModuleFromSource" access="public" convention="ThisCall" unsafe="true">
        <type native="slang::IModule *">IModule*</type>
        <param name="pThis">
          <type>ISession*</type>
        </param>
        <param name="moduleName">
          <type>sbyte*</type>
        </param>
        <param name="path">
          <type>sbyte*</type>
        </param>
        <param name="source">
          <type>ISlangBlob*</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
      </delegate>
      <delegate name="_createCompositeComponentType" access="public" convention="ThisCall" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="pThis">
          <type>ISession*</type>
        </param>
        <param name="componentTypes">
          <type>IComponentType**</type>
        </param>
        <param name="componentTypeCount">
          <type>nint</type>
        </param>
        <param name="outCompositeComponentType">
          <type>IComponentType**</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
      </delegate>
      <delegate name="_specializeType" access="public" convention="ThisCall" unsafe="true">
        <type native="slang::TypeReflection *">TypeReflection*</type>
        <param name="pThis">
          <type>ISession*</type>
        </param>
        <param name="type">
          <type>TypeReflection*</type>
        </param>
        <param name="specializationArgs">
          <type>SpecializationArg*</type>
        </param>
        <param name="specializationArgCount">
          <type>nint</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
      </delegate>
      <delegate name="_getTypeLayout" access="public" convention="ThisCall" unsafe="true">
        <type native="slang::TypeLayoutReflection *">TypeLayoutReflection*</type>
        <param name="pThis">
          <type>ISession*</type>
        </param>
        <param name="type">
          <type>TypeReflection*</type>
        </param>
        <param name="targetIndex">
          <type>nint</type>
          <init>
            <code>0</code>
          </init>
        </param>
        <param name="rules">
          <type>LayoutRules</type>
          <init>
            <code>Default</code>
          </init>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
      </delegate>
      <delegate name="_getContainerType" access="public" convention="ThisCall" unsafe="true">
        <type native="slang::TypeReflection *">TypeReflection*</type>
        <param name="pThis">
          <type>ISession*</type>
        </param>
        <param name="elementType">
          <type>TypeReflection*</type>
        </param>
        <param name="containerType">
          <type>ContainerType</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
      </delegate>
      <delegate name="_getDynamicType" access="public" convention="ThisCall" unsafe="true">
        <type native="slang::TypeReflection *">TypeReflection*</type>
        <param name="pThis">
          <type>ISession*</type>
        </param>
      </delegate>
      <delegate name="_getTypeRTTIMangledName" access="public" convention="ThisCall" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="pThis">
          <type>ISession*</type>
        </param>
        <param name="type">
          <type>TypeReflection*</type>
        </param>
        <param name="outNameBlob">
          <type>ISlangBlob**</type>
        </param>
      </delegate>
      <delegate name="_getTypeConformanceWitnessMangledName" access="public" convention="ThisCall" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="pThis">
          <type>ISession*</type>
        </param>
        <param name="type">
          <type>TypeReflection*</type>
        </param>
        <param name="interfaceType">
          <type>TypeReflection*</type>
        </param>
        <param name="outNameBlob">
          <type>ISlangBlob**</type>
        </param>
      </delegate>
      <delegate name="_getTypeConformanceWitnessSequentialID" access="public" convention="ThisCall" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="pThis">
          <type>ISession*</type>
        </param>
        <param name="type">
          <type>TypeReflection*</type>
        </param>
        <param name="interfaceType">
          <type>TypeReflection*</type>
        </param>
        <param name="outId">
          <type>uint*</type>
        </param>
      </delegate>
      <delegate name="_createTypeConformanceComponentType" access="public" convention="ThisCall" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="pThis">
          <type>ISession*</type>
        </param>
        <param name="type">
          <type>TypeReflection*</type>
        </param>
        <param name="interfaceType">
          <type>TypeReflection*</type>
        </param>
        <param name="outConformance">
          <type>ITypeConformance**</type>
        </param>
        <param name="conformanceIdOverride">
          <type>nint</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
        </param>
      </delegate>
      <delegate name="_loadModuleFromIRBlob" access="public" convention="ThisCall" unsafe="true">
        <type native="slang::IModule *">IModule*</type>
        <param name="pThis">
          <type>ISession*</type>
        </param>
        <param name="moduleName">
          <type>sbyte*</type>
        </param>
        <param name="path">
          <type>sbyte*</type>
        </param>
        <param name="source">
          <type>ISlangBlob*</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
      </delegate>
      <delegate name="_getLoadedModuleCount" access="public" convention="ThisCall">
        <type native="SlangInt">nint</type>
        <param name="pThis">
          <type>ISession*</type>
        </param>
      </delegate>
      <delegate name="_getLoadedModule" access="public" convention="ThisCall" unsafe="true">
        <type native="slang::IModule *">IModule*</type>
        <param name="pThis">
          <type>ISession*</type>
        </param>
        <param name="index">
          <type>nint</type>
        </param>
      </delegate>
      <delegate name="_isBinaryModuleUpToDate" access="public" convention="ThisCall" unsafe="true">
        <type native="bool">byte</type>
        <param name="pThis">
          <type>ISession*</type>
        </param>
        <param name="modulePath">
          <type>sbyte*</type>
        </param>
        <param name="binaryModuleBlob">
          <type>ISlangBlob*</type>
        </param>
      </delegate>
      <delegate name="_loadModuleFromSourceString" access="public" convention="ThisCall" unsafe="true">
        <type native="slang::IModule *">IModule*</type>
        <param name="pThis">
          <type>ISession*</type>
        </param>
        <param name="moduleName">
          <type>sbyte*</type>
        </param>
        <param name="path">
          <type>sbyte*</type>
        </param>
        <param name="@string">
          <type>sbyte*</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
      </delegate>
      <function name="queryInterface" access="public" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="uuid">
          <type>SlangUUID*</type>
        </param>
        <param name="outObject">
          <type>void**</type>
        </param>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_queryInterface</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">queryInterface</vtbl>)(<param special="thisPtr">(ISession*)Unsafe.AsPointer(ref this)</param>, <param name="uuid">uuid</param>, <param name="outObject">outObject</param>);</code>
        </body>
      </function>
      <function name="addRef" access="public" unsafe="true">
        <type native="uint32_t">uint</type>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_addRef</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">addRef</vtbl>)(<param special="thisPtr">(ISession*)Unsafe.AsPointer(ref this)</param>);</code>
        </body>
      </function>
      <function name="release" access="public" unsafe="true">
        <type native="uint32_t">uint</type>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_release</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">release</vtbl>)(<param special="thisPtr">(ISession*)Unsafe.AsPointer(ref this)</param>);</code>
        </body>
      </function>
      <function name="getGlobalSession" access="public" unsafe="true">
        <type native="slang::IGlobalSession *">IGlobalSession*</type>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_getGlobalSession</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">getGlobalSession</vtbl>)(<param special="thisPtr">(ISession*)Unsafe.AsPointer(ref this)</param>);</code>
        </body>
      </function>
      <function name="loadModule" access="public" unsafe="true">
        <type native="slang::IModule *">IModule*</type>
        <param name="moduleName">
          <type>sbyte*</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_loadModule</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">loadModule</vtbl>)(<param special="thisPtr">(ISession*)Unsafe.AsPointer(ref this)</param>, <param name="moduleName">moduleName</param>, <param name="outDiagnostics">outDiagnostics</param>);</code>
        </body>
      </function>
      <function name="loadModuleFromSource" access="public" unsafe="true">
        <type native="slang::IModule *">IModule*</type>
        <param name="moduleName">
          <type>sbyte*</type>
        </param>
        <param name="path">
          <type>sbyte*</type>
        </param>
        <param name="source">
          <type>ISlangBlob*</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_loadModuleFromSource</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">loadModuleFromSource</vtbl>)(<param special="thisPtr">(ISession*)Unsafe.AsPointer(ref this)</param>, <param name="moduleName">moduleName</param>, <param name="path">path</param>, <param name="source">source</param>, <param name="outDiagnostics">outDiagnostics</param>);</code>
        </body>
      </function>
      <function name="createCompositeComponentType" access="public" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="componentTypes">
          <type>IComponentType**</type>
        </param>
        <param name="componentTypeCount">
          <type>nint</type>
        </param>
        <param name="outCompositeComponentType">
          <type>IComponentType**</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_createCompositeComponentType</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">createCompositeComponentType</vtbl>)(<param special="thisPtr">(ISession*)Unsafe.AsPointer(ref this)</param>, <param name="componentTypes">componentTypes</param>, <param name="componentTypeCount">componentTypeCount</param>, <param name="outCompositeComponentType">outCompositeComponentType</param>, <param name="outDiagnostics">outDiagnostics</param>);</code>
        </body>
      </function>
      <function name="specializeType" access="public" unsafe="true">
        <type native="slang::TypeReflection *">TypeReflection*</type>
        <param name="type">
          <type>TypeReflection*</type>
        </param>
        <param name="specializationArgs">
          <type>SpecializationArg*</type>
        </param>
        <param name="specializationArgCount">
          <type>nint</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_specializeType</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">specializeType</vtbl>)(<param special="thisPtr">(ISession*)Unsafe.AsPointer(ref this)</param>, <param name="type">type</param>, <param name="specializationArgs">specializationArgs</param>, <param name="specializationArgCount">specializationArgCount</param>, <param name="outDiagnostics">outDiagnostics</param>);</code>
        </body>
      </function>
      <function name="getTypeLayout" access="public" unsafe="true">
        <type native="slang::TypeLayoutReflection *">TypeLayoutReflection*</type>
        <param name="type">
          <type>TypeReflection*</type>
        </param>
        <param name="targetIndex">
          <type>nint</type>
          <init>
            <code>0</code>
          </init>
        </param>
        <param name="rules">
          <type>LayoutRules</type>
          <init>
            <code>Default</code>
          </init>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_getTypeLayout</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">getTypeLayout</vtbl>)(<param special="thisPtr">(ISession*)Unsafe.AsPointer(ref this)</param>, <param name="type">type</param>, <param name="targetIndex">targetIndex</param>, <param name="rules">rules</param>, <param name="outDiagnostics">outDiagnostics</param>);</code>
        </body>
      </function>
      <function name="getContainerType" access="public" unsafe="true">
        <type native="slang::TypeReflection *">TypeReflection*</type>
        <param name="elementType">
          <type>TypeReflection*</type>
        </param>
        <param name="containerType">
          <type>ContainerType</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_getContainerType</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">getContainerType</vtbl>)(<param special="thisPtr">(ISession*)Unsafe.AsPointer(ref this)</param>, <param name="elementType">elementType</param>, <param name="containerType">containerType</param>, <param name="outDiagnostics">outDiagnostics</param>);</code>
        </body>
      </function>
      <function name="getDynamicType" access="public" unsafe="true">
        <type native="slang::TypeReflection *">TypeReflection*</type>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_getDynamicType</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">getDynamicType</vtbl>)(<param special="thisPtr">(ISession*)Unsafe.AsPointer(ref this)</param>);</code>
        </body>
      </function>
      <function name="getTypeRTTIMangledName" access="public" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="type">
          <type>TypeReflection*</type>
        </param>
        <param name="outNameBlob">
          <type>ISlangBlob**</type>
        </param>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_getTypeRTTIMangledName</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">getTypeRTTIMangledName</vtbl>)(<param special="thisPtr">(ISession*)Unsafe.AsPointer(ref this)</param>, <param name="type">type</param>, <param name="outNameBlob">outNameBlob</param>);</code>
        </body>
      </function>
      <function name="getTypeConformanceWitnessMangledName" access="public" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="type">
          <type>TypeReflection*</type>
        </param>
        <param name="interfaceType">
          <type>TypeReflection*</type>
        </param>
        <param name="outNameBlob">
          <type>ISlangBlob**</type>
        </param>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_getTypeConformanceWitnessMangledName</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">getTypeConformanceWitnessMangledName</vtbl>)(<param special="thisPtr">(ISession*)Unsafe.AsPointer(ref this)</param>, <param name="type">type</param>, <param name="interfaceType">interfaceType</param>, <param name="outNameBlob">outNameBlob</param>);</code>
        </body>
      </function>
      <function name="getTypeConformanceWitnessSequentialID" access="public" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="type">
          <type>TypeReflection*</type>
        </param>
        <param name="interfaceType">
          <type>TypeReflection*</type>
        </param>
        <param name="outId">
          <type>uint*</type>
        </param>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_getTypeConformanceWitnessSequentialID</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">getTypeConformanceWitnessSequentialID</vtbl>)(<param special="thisPtr">(ISession*)Unsafe.AsPointer(ref this)</param>, <param name="type">type</param>, <param name="interfaceType">interfaceType</param>, <param name="outId">outId</param>);</code>
        </body>
      </function>
      <function name="createTypeConformanceComponentType" access="public" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="type">
          <type>TypeReflection*</type>
        </param>
        <param name="interfaceType">
          <type>TypeReflection*</type>
        </param>
        <param name="outConformance">
          <type>ITypeConformance**</type>
        </param>
        <param name="conformanceIdOverride">
          <type>nint</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
        </param>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_createTypeConformanceComponentType</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">createTypeConformanceComponentType</vtbl>)(<param special="thisPtr">(ISession*)Unsafe.AsPointer(ref this)</param>, <param name="type">type</param>, <param name="interfaceType">interfaceType</param>, <param name="outConformance">outConformance</param>, <param name="conformanceIdOverride">conformanceIdOverride</param>, <param name="outDiagnostics">outDiagnostics</param>);</code>
        </body>
      </function>
      <function name="loadModuleFromIRBlob" access="public" unsafe="true">
        <type native="slang::IModule *">IModule*</type>
        <param name="moduleName">
          <type>sbyte*</type>
        </param>
        <param name="path">
          <type>sbyte*</type>
        </param>
        <param name="source">
          <type>ISlangBlob*</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_loadModuleFromIRBlob</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">loadModuleFromIRBlob</vtbl>)(<param special="thisPtr">(ISession*)Unsafe.AsPointer(ref this)</param>, <param name="moduleName">moduleName</param>, <param name="path">path</param>, <param name="source">source</param>, <param name="outDiagnostics">outDiagnostics</param>);</code>
        </body>
      </function>
      <function name="getLoadedModuleCount" access="public" unsafe="true">
        <type native="SlangInt">nint</type>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_getLoadedModuleCount</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">getLoadedModuleCount</vtbl>)(<param special="thisPtr">(ISession*)Unsafe.AsPointer(ref this)</param>);</code>
        </body>
      </function>
      <function name="getLoadedModule" access="public" unsafe="true">
        <type native="slang::IModule *">IModule*</type>
        <param name="index">
          <type>nint</type>
        </param>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_getLoadedModule</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">getLoadedModule</vtbl>)(<param special="thisPtr">(ISession*)Unsafe.AsPointer(ref this)</param>, <param name="index">index</param>);</code>
        </body>
      </function>
      <function name="isBinaryModuleUpToDate" access="public" unsafe="true">
        <type>bool</type>
        <param name="modulePath">
          <type>sbyte*</type>
        </param>
        <param name="binaryModuleBlob">
          <type>ISlangBlob*</type>
        </param>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_isBinaryModuleUpToDate</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">isBinaryModuleUpToDate</vtbl>)(<param special="thisPtr">(ISession*)Unsafe.AsPointer(ref this)</param>, <param name="modulePath">modulePath</param>, <param name="binaryModuleBlob">binaryModuleBlob</param>) != 0;</code>
        </body>
      </function>
      <function name="loadModuleFromSourceString" access="public" unsafe="true">
        <type native="slang::IModule *">IModule*</type>
        <param name="moduleName">
          <type>sbyte*</type>
        </param>
        <param name="path">
          <type>sbyte*</type>
        </param>
        <param name="@string">
          <type>sbyte*</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_loadModuleFromSourceString</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">loadModuleFromSourceString</vtbl>)(<param special="thisPtr">(ISession*)Unsafe.AsPointer(ref this)</param>, <param name="moduleName">moduleName</param>, <param name="path">path</param>, <param name="@string">@string</param>, <param name="outDiagnostics">outDiagnostics</param>);</code>
        </body>
      </function>
      <vtbl>
        <field name="queryInterface" access="public">
          <type native="SlangResult (const SlangUUID &amp;, void **)">IntPtr</type>
        </field>
        <field name="addRef" access="public">
          <type native="uint32_t ()">IntPtr</type>
        </field>
        <field name="release" access="public">
          <type native="uint32_t ()">IntPtr</type>
        </field>
        <field name="getGlobalSession" access="public">
          <type native="IGlobalSession *()">IntPtr</type>
        </field>
        <field name="loadModule" access="public">
          <type native="IModule *(const char *, IBlob **)">IntPtr</type>
        </field>
        <field name="loadModuleFromSource" access="public">
          <type native="IModule *(const char *, const char *, slang::IBlob *, slang::IBlob **)">IntPtr</type>
        </field>
        <field name="createCompositeComponentType" access="public">
          <type native="SlangResult (IComponentType *const *, SlangInt, IComponentType **, ISlangBlob **)">IntPtr</type>
        </field>
        <field name="specializeType" access="public">
          <type native="TypeReflection *(TypeReflection *, const SpecializationArg *, SlangInt, ISlangBlob **)">IntPtr</type>
        </field>
        <field name="getTypeLayout" access="public">
          <type native="TypeLayoutReflection *(TypeReflection *, SlangInt, LayoutRules, ISlangBlob **)">IntPtr</type>
        </field>
        <field name="getContainerType" access="public">
          <type native="TypeReflection *(TypeReflection *, ContainerType, ISlangBlob **)">IntPtr</type>
        </field>
        <field name="getDynamicType" access="public">
          <type native="TypeReflection *()">IntPtr</type>
        </field>
        <field name="getTypeRTTIMangledName" access="public">
          <type native="SlangResult (TypeReflection *, ISlangBlob **)">IntPtr</type>
        </field>
        <field name="getTypeConformanceWitnessMangledName" access="public">
          <type native="SlangResult (TypeReflection *, TypeReflection *, ISlangBlob **)">IntPtr</type>
        </field>
        <field name="getTypeConformanceWitnessSequentialID" access="public">
          <type native="SlangResult (slang::TypeReflection *, slang::TypeReflection *, uint32_t *)">IntPtr</type>
        </field>
        <field name="createTypeConformanceComponentType" access="public">
          <type native="SlangResult (slang::TypeReflection *, slang::TypeReflection *, ITypeConformance **, SlangInt, ISlangBlob **)">IntPtr</type>
        </field>
        <field name="loadModuleFromIRBlob" access="public">
          <type native="IModule *(const char *, const char *, slang::IBlob *, slang::IBlob **)">IntPtr</type>
        </field>
        <field name="getLoadedModuleCount" access="public">
          <type native="SlangInt ()">IntPtr</type>
        </field>
        <field name="getLoadedModule" access="public">
          <type native="IModule *(SlangInt)">IntPtr</type>
        </field>
        <field name="isBinaryModuleUpToDate" access="public">
          <type native="bool (const char *, slang::IBlob *)">IntPtr</type>
        </field>
        <field name="loadModuleFromSourceString" access="public">
          <type native="IModule *(const char *, const char *, const char *, slang::IBlob **)">IntPtr</type>
        </field>
      </vtbl>
    </struct>
  </namespace>
</bindings>
