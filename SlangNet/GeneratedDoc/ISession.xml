<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
  <namespace name="SlangNet.Bindings.Generated">
    <struct name="ISession" access="public" native="struct ISession : ISlangUnknown" vtbl="true" unsafe="true">
      <field name="lpVtbl" access="public">
        <type>void**</type>
      </field>
      <function name="queryInterface" access="public" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="uuid">
          <type>SlangUUID*</type>
        </param>
        <param name="outObject">
          <type>void**</type>
        </param>
        <body>
          <code>return ((delegate* unmanaged[Stdcall]&lt;ISession*, SlangUUID*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(ISession*)Unsafe.AsPointer(ref this)</param>, <param name="uuid">uuid</param>, <param name="outObject">outObject</param>);</code>
        </body>
      </function>
      <function name="addRef" access="public" unsafe="true">
        <type native="uint32_t">uint</type>
        <body>
          <code>return ((delegate* unmanaged[Stdcall]&lt;ISession*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(ISession*)Unsafe.AsPointer(ref this)</param>);</code>
        </body>
      </function>
      <function name="release" access="public" unsafe="true">
        <type native="uint32_t">uint</type>
        <body>
          <code>return ((delegate* unmanaged[Stdcall]&lt;ISession*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(ISession*)Unsafe.AsPointer(ref this)</param>);</code>
        </body>
      </function>
      <function name="getGlobalSession" access="public" unsafe="true">
        <type native="slang::IGlobalSession *">IGlobalSession*</type>
        <body>
          <code>return ((delegate* unmanaged[Stdcall]&lt;ISession*, IGlobalSession*&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(ISession*)Unsafe.AsPointer(ref this)</param>);</code>
        </body>
      </function>
      <function name="loadModule" access="public" unsafe="true">
        <type native="slang::IModule *">IModule*</type>
        <param name="moduleName">
          <type>sbyte*</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
        <body>
          <code>return ((delegate* unmanaged[Stdcall]&lt;ISession*, sbyte*, ISlangBlob**, IModule*&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(ISession*)Unsafe.AsPointer(ref this)</param>, <param name="moduleName">moduleName</param>, <param name="outDiagnostics">outDiagnostics</param>);</code>
        </body>
      </function>
      <function name="loadModuleFromSource" access="public" unsafe="true">
        <type native="slang::IModule *">IModule*</type>
        <param name="moduleName">
          <type>sbyte*</type>
        </param>
        <param name="path">
          <type>sbyte*</type>
        </param>
        <param name="source">
          <type>ISlangBlob*</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
        <body>
          <code>return ((delegate* unmanaged[Stdcall]&lt;ISession*, sbyte*, sbyte*, ISlangBlob*, ISlangBlob**, IModule*&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(ISession*)Unsafe.AsPointer(ref this)</param>, <param name="moduleName">moduleName</param>, <param name="path">path</param>, <param name="source">source</param>, <param name="outDiagnostics">outDiagnostics</param>);</code>
        </body>
      </function>
      <function name="createCompositeComponentType" access="public" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="componentTypes">
          <type>IComponentType**</type>
        </param>
        <param name="componentTypeCount">
          <type>long</type>
        </param>
        <param name="outCompositeComponentType">
          <type>IComponentType**</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
        <body>
          <code>return ((delegate* unmanaged[Stdcall]&lt;ISession*, IComponentType**, long, IComponentType**, ISlangBlob**, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(ISession*)Unsafe.AsPointer(ref this)</param>, <param name="componentTypes">componentTypes</param>, <param name="componentTypeCount">componentTypeCount</param>, <param name="outCompositeComponentType">outCompositeComponentType</param>, <param name="outDiagnostics">outDiagnostics</param>);</code>
        </body>
      </function>
      <function name="specializeType" access="public" unsafe="true">
        <type native="slang::TypeReflection *">TypeReflection*</type>
        <param name="type">
          <type>TypeReflection*</type>
        </param>
        <param name="specializationArgs">
          <type>SpecializationArg*</type>
        </param>
        <param name="specializationArgCount">
          <type>long</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
        <body>
          <code>return ((delegate* unmanaged[Stdcall]&lt;ISession*, TypeReflection*, SpecializationArg*, long, ISlangBlob**, TypeReflection*&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(ISession*)Unsafe.AsPointer(ref this)</param>, <param name="type">type</param>, <param name="specializationArgs">specializationArgs</param>, <param name="specializationArgCount">specializationArgCount</param>, <param name="outDiagnostics">outDiagnostics</param>);</code>
        </body>
      </function>
      <function name="getTypeLayout" access="public" unsafe="true">
        <type native="slang::TypeLayoutReflection *">TypeLayoutReflection*</type>
        <param name="type">
          <type>TypeReflection*</type>
        </param>
        <param name="targetIndex">
          <type>long</type>
          <init>
            <code>0</code>
          </init>
        </param>
        <param name="rules">
          <type>LayoutRules</type>
          <init>
            <code>LayoutRules.Default</code>
          </init>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
        <body>
          <code>return ((delegate* unmanaged[Stdcall]&lt;ISession*, TypeReflection*, long, LayoutRules, ISlangBlob**, TypeLayoutReflection*&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(ISession*)Unsafe.AsPointer(ref this)</param>, <param name="type">type</param>, <param name="targetIndex">targetIndex</param>, <param name="rules">rules</param>, <param name="outDiagnostics">outDiagnostics</param>);</code>
        </body>
      </function>
      <function name="getContainerType" access="public" unsafe="true">
        <type native="slang::TypeReflection *">TypeReflection*</type>
        <param name="elementType">
          <type>TypeReflection*</type>
        </param>
        <param name="containerType">
          <type>ContainerType</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
        <body>
          <code>return ((delegate* unmanaged[Stdcall]&lt;ISession*, TypeReflection*, ContainerType, ISlangBlob**, TypeReflection*&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(ISession*)Unsafe.AsPointer(ref this)</param>, <param name="elementType">elementType</param>, <param name="containerType">containerType</param>, <param name="outDiagnostics">outDiagnostics</param>);</code>
        </body>
      </function>
      <function name="getDynamicType" access="public" unsafe="true">
        <type native="slang::TypeReflection *">TypeReflection*</type>
        <body>
          <code>return ((delegate* unmanaged[Stdcall]&lt;ISession*, TypeReflection*&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(ISession*)Unsafe.AsPointer(ref this)</param>);</code>
        </body>
      </function>
      <function name="getTypeRTTIMangledName" access="public" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="type">
          <type>TypeReflection*</type>
        </param>
        <param name="outNameBlob">
          <type>ISlangBlob**</type>
        </param>
        <body>
          <code>return ((delegate* unmanaged[Stdcall]&lt;ISession*, TypeReflection*, ISlangBlob**, int&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(ISession*)Unsafe.AsPointer(ref this)</param>, <param name="type">type</param>, <param name="outNameBlob">outNameBlob</param>);</code>
        </body>
      </function>
      <function name="getTypeConformanceWitnessMangledName" access="public" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="type">
          <type>TypeReflection*</type>
        </param>
        <param name="interfaceType">
          <type>TypeReflection*</type>
        </param>
        <param name="outNameBlob">
          <type>ISlangBlob**</type>
        </param>
        <body>
          <code>return ((delegate* unmanaged[Stdcall]&lt;ISession*, TypeReflection*, TypeReflection*, ISlangBlob**, int&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(ISession*)Unsafe.AsPointer(ref this)</param>, <param name="type">type</param>, <param name="interfaceType">interfaceType</param>, <param name="outNameBlob">outNameBlob</param>);</code>
        </body>
      </function>
      <function name="getTypeConformanceWitnessSequentialID" access="public" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="type">
          <type>TypeReflection*</type>
        </param>
        <param name="interfaceType">
          <type>TypeReflection*</type>
        </param>
        <param name="outId">
          <type>uint*</type>
        </param>
        <body>
          <code>return ((delegate* unmanaged[Stdcall]&lt;ISession*, TypeReflection*, TypeReflection*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">13</vtbl>]))(<param special="thisPtr">(ISession*)Unsafe.AsPointer(ref this)</param>, <param name="type">type</param>, <param name="interfaceType">interfaceType</param>, <param name="outId">outId</param>);</code>
        </body>
      </function>
      <function name="createTypeConformanceComponentType" access="public" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="type">
          <type>TypeReflection*</type>
        </param>
        <param name="interfaceType">
          <type>TypeReflection*</type>
        </param>
        <param name="outConformance">
          <type>ITypeConformance**</type>
        </param>
        <param name="conformanceIdOverride">
          <type>long</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
        </param>
        <body>
          <code>return ((delegate* unmanaged[Stdcall]&lt;ISession*, TypeReflection*, TypeReflection*, ITypeConformance**, long, ISlangBlob**, int&gt;)(lpVtbl[<vtbl explicit="False">15</vtbl>]))(<param special="thisPtr">(ISession*)Unsafe.AsPointer(ref this)</param>, <param name="type">type</param>, <param name="interfaceType">interfaceType</param>, <param name="outConformance">outConformance</param>, <param name="conformanceIdOverride">conformanceIdOverride</param>, <param name="outDiagnostics">outDiagnostics</param>);</code>
        </body>
      </function>
      <function name="loadModuleFromIRBlob" access="public" unsafe="true">
        <type native="slang::IModule *">IModule*</type>
        <param name="moduleName">
          <type>sbyte*</type>
        </param>
        <param name="path">
          <type>sbyte*</type>
        </param>
        <param name="source">
          <type>ISlangBlob*</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
        <body>
          <code>return ((delegate* unmanaged[Stdcall]&lt;ISession*, sbyte*, sbyte*, ISlangBlob*, ISlangBlob**, IModule*&gt;)(lpVtbl[<vtbl explicit="False">16</vtbl>]))(<param special="thisPtr">(ISession*)Unsafe.AsPointer(ref this)</param>, <param name="moduleName">moduleName</param>, <param name="path">path</param>, <param name="source">source</param>, <param name="outDiagnostics">outDiagnostics</param>);</code>
        </body>
      </function>
      <function name="getLoadedModuleCount" access="public" unsafe="true">
        <type native="SlangInt">long</type>
        <body>
          <code>return ((delegate* unmanaged[Stdcall]&lt;ISession*, long&gt;)(lpVtbl[<vtbl explicit="False">17</vtbl>]))(<param special="thisPtr">(ISession*)Unsafe.AsPointer(ref this)</param>);</code>
        </body>
      </function>
      <function name="getLoadedModule" access="public" unsafe="true">
        <type native="slang::IModule *">IModule*</type>
        <param name="index">
          <type>long</type>
        </param>
        <body>
          <code>return ((delegate* unmanaged[Stdcall]&lt;ISession*, long, IModule*&gt;)(lpVtbl[<vtbl explicit="False">18</vtbl>]))(<param special="thisPtr">(ISession*)Unsafe.AsPointer(ref this)</param>, <param name="index">index</param>);</code>
        </body>
      </function>
      <function name="isBinaryModuleUpToDate" access="public" unsafe="true">
        <type>bool</type>
        <param name="modulePath">
          <type>sbyte*</type>
        </param>
        <param name="binaryModuleBlob">
          <type>ISlangBlob*</type>
        </param>
        <body>
          <code>return ((delegate* unmanaged[Stdcall]&lt;ISession*, sbyte*, ISlangBlob*, byte&gt;)(lpVtbl[<vtbl explicit="False">19</vtbl>]))(<param special="thisPtr">(ISession*)Unsafe.AsPointer(ref this)</param>, <param name="modulePath">modulePath</param>, <param name="binaryModuleBlob">binaryModuleBlob</param>) != 0;</code>
        </body>
      </function>
      <function name="loadModuleFromSourceString" access="public" unsafe="true">
        <type native="slang::IModule *">IModule*</type>
        <param name="moduleName">
          <type>sbyte*</type>
        </param>
        <param name="path">
          <type>sbyte*</type>
        </param>
        <param name="@string">
          <type>sbyte*</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
        <body>
          <code>return ((delegate* unmanaged[Stdcall]&lt;ISession*, sbyte*, sbyte*, sbyte*, ISlangBlob**, IModule*&gt;)(lpVtbl[<vtbl explicit="False">20</vtbl>]))(<param special="thisPtr">(ISession*)Unsafe.AsPointer(ref this)</param>, <param name="moduleName">moduleName</param>, <param name="path">path</param>, <param name="@string">@string</param>, <param name="outDiagnostics">outDiagnostics</param>);</code>
        </body>
      </function>
      <vtbl>
        <field name="queryInterface" access="public">
          <type native="SlangResult (const SlangUUID &amp;, void **) __attribute__((nothrow)) __attribute__((stdcall))">delegate* unmanaged[Stdcall]&lt;ISession*, SlangUUID*, void**, int&gt;</type>
        </field>
        <field name="addRef" access="public">
          <type native="uint32_t () __attribute__((nothrow)) __attribute__((stdcall))">delegate* unmanaged[Stdcall]&lt;ISession*, uint&gt;</type>
        </field>
        <field name="release" access="public">
          <type native="uint32_t () __attribute__((nothrow)) __attribute__((stdcall))">delegate* unmanaged[Stdcall]&lt;ISession*, uint&gt;</type>
        </field>
        <field name="getGlobalSession" access="public">
          <type native="IGlobalSession *() __attribute__((nothrow)) __attribute__((stdcall))">delegate* unmanaged[Stdcall]&lt;ISession*, IGlobalSession*&gt;</type>
        </field>
        <field name="loadModule" access="public">
          <type native="IModule *(const char *, IBlob **) __attribute__((nothrow)) __attribute__((stdcall))">delegate* unmanaged[Stdcall]&lt;ISession*, sbyte*, ISlangBlob**, IModule*&gt;</type>
        </field>
        <field name="loadModuleFromSource" access="public">
          <type native="IModule *(const char *, const char *, slang::IBlob *, slang::IBlob **) __attribute__((nothrow)) __attribute__((stdcall))">delegate* unmanaged[Stdcall]&lt;ISession*, sbyte*, sbyte*, ISlangBlob*, ISlangBlob**, IModule*&gt;</type>
        </field>
        <field name="createCompositeComponentType" access="public">
          <type native="SlangResult (IComponentType *const *, SlangInt, IComponentType **, ISlangBlob **) __attribute__((nothrow)) __attribute__((stdcall))">delegate* unmanaged[Stdcall]&lt;ISession*, IComponentType**, long, IComponentType**, ISlangBlob**, int&gt;</type>
        </field>
        <field name="specializeType" access="public">
          <type native="TypeReflection *(TypeReflection *, const SpecializationArg *, SlangInt, ISlangBlob **) __attribute__((nothrow)) __attribute__((stdcall))">delegate* unmanaged[Stdcall]&lt;ISession*, TypeReflection*, SpecializationArg*, long, ISlangBlob**, TypeReflection*&gt;</type>
        </field>
        <field name="getTypeLayout" access="public">
          <type native="TypeLayoutReflection *(TypeReflection *, SlangInt, LayoutRules, ISlangBlob **) __attribute__((nothrow)) __attribute__((stdcall))">delegate* unmanaged[Stdcall]&lt;ISession*, TypeReflection*, long, LayoutRules, ISlangBlob**, TypeLayoutReflection*&gt;</type>
        </field>
        <field name="getContainerType" access="public">
          <type native="TypeReflection *(TypeReflection *, ContainerType, ISlangBlob **) __attribute__((nothrow)) __attribute__((stdcall))">delegate* unmanaged[Stdcall]&lt;ISession*, TypeReflection*, ContainerType, ISlangBlob**, TypeReflection*&gt;</type>
        </field>
        <field name="getDynamicType" access="public">
          <type native="TypeReflection *() __attribute__((nothrow)) __attribute__((stdcall))">delegate* unmanaged[Stdcall]&lt;ISession*, TypeReflection*&gt;</type>
        </field>
        <field name="getTypeRTTIMangledName" access="public">
          <type native="SlangResult (TypeReflection *, ISlangBlob **) __attribute__((nothrow)) __attribute__((stdcall))">delegate* unmanaged[Stdcall]&lt;ISession*, TypeReflection*, ISlangBlob**, int&gt;</type>
        </field>
        <field name="getTypeConformanceWitnessMangledName" access="public">
          <type native="SlangResult (TypeReflection *, TypeReflection *, ISlangBlob **) __attribute__((nothrow)) __attribute__((stdcall))">delegate* unmanaged[Stdcall]&lt;ISession*, TypeReflection*, TypeReflection*, ISlangBlob**, int&gt;</type>
        </field>
        <field name="getTypeConformanceWitnessSequentialID" access="public">
          <type native="SlangResult (slang::TypeReflection *, slang::TypeReflection *, uint32_t *) __attribute__((nothrow)) __attribute__((stdcall))">delegate* unmanaged[Stdcall]&lt;ISession*, TypeReflection*, TypeReflection*, uint*, int&gt;</type>
        </field>
        <field name="createTypeConformanceComponentType" access="public">
          <type native="SlangResult (slang::TypeReflection *, slang::TypeReflection *, ITypeConformance **, SlangInt, ISlangBlob **) __attribute__((nothrow)) __attribute__((stdcall))">delegate* unmanaged[Stdcall]&lt;ISession*, TypeReflection*, TypeReflection*, ITypeConformance**, long, ISlangBlob**, int&gt;</type>
        </field>
        <field name="loadModuleFromIRBlob" access="public">
          <type native="IModule *(const char *, const char *, slang::IBlob *, slang::IBlob **) __attribute__((nothrow)) __attribute__((stdcall))">delegate* unmanaged[Stdcall]&lt;ISession*, sbyte*, sbyte*, ISlangBlob*, ISlangBlob**, IModule*&gt;</type>
        </field>
        <field name="getLoadedModuleCount" access="public">
          <type native="SlangInt () __attribute__((nothrow)) __attribute__((stdcall))">delegate* unmanaged[Stdcall]&lt;ISession*, long&gt;</type>
        </field>
        <field name="getLoadedModule" access="public">
          <type native="IModule *(SlangInt) __attribute__((nothrow)) __attribute__((stdcall))">delegate* unmanaged[Stdcall]&lt;ISession*, long, IModule*&gt;</type>
        </field>
        <field name="isBinaryModuleUpToDate" access="public">
          <type native="bool (const char *, slang::IBlob *) __attribute__((nothrow)) __attribute__((stdcall))">delegate* unmanaged[Stdcall]&lt;ISession*, sbyte*, ISlangBlob*, byte&gt;</type>
        </field>
        <field name="loadModuleFromSourceString" access="public">
          <type native="IModule *(const char *, const char *, const char *, slang::IBlob **) __attribute__((nothrow)) __attribute__((stdcall))">delegate* unmanaged[Stdcall]&lt;ISession*, sbyte*, sbyte*, sbyte*, ISlangBlob**, IModule*&gt;</type>
        </field>
      </vtbl>
    </struct>
  </namespace>
</bindings>
