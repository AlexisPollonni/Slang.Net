<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
  <namespace name="SlangNet.Bindings.Generated">
    <struct name="IModulePrecompileService_Experimental" access="public" native="struct IModulePrecompileService_Experimental : ISlangUnknown" vtbl="true" unsafe="true">
      <field name="lpVtbl" access="public">
        <type>void**</type>
      </field>
      <function name="queryInterface" access="public" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="uuid">
          <type>SlangUUID*</type>
        </param>
        <param name="outObject">
          <type>void**</type>
        </param>
        <body>
          <code>return ((delegate* unmanaged[Stdcall]&lt;IModulePrecompileService_Experimental*, SlangUUID*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IModulePrecompileService_Experimental*)Unsafe.AsPointer(ref this)</param>, <param name="uuid">uuid</param>, <param name="outObject">outObject</param>);</code>
        </body>
      </function>
      <function name="addRef" access="public" unsafe="true">
        <type native="uint32_t">uint</type>
        <body>
          <code>return ((delegate* unmanaged[Stdcall]&lt;IModulePrecompileService_Experimental*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IModulePrecompileService_Experimental*)Unsafe.AsPointer(ref this)</param>);</code>
        </body>
      </function>
      <function name="release" access="public" unsafe="true">
        <type native="uint32_t">uint</type>
        <body>
          <code>return ((delegate* unmanaged[Stdcall]&lt;IModulePrecompileService_Experimental*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IModulePrecompileService_Experimental*)Unsafe.AsPointer(ref this)</param>);</code>
        </body>
      </function>
      <function name="precompileForTarget" access="public" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="target">
          <type>SlangCompileTarget</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
        </param>
        <body>
          <code>return ((delegate* unmanaged[Stdcall]&lt;IModulePrecompileService_Experimental*, SlangCompileTarget, ISlangBlob**, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IModulePrecompileService_Experimental*)Unsafe.AsPointer(ref this)</param>, <param name="target">target</param>, <param name="outDiagnostics">outDiagnostics</param>);</code>
        </body>
      </function>
      <function name="getPrecompiledTargetCode" access="public" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="target">
          <type>SlangCompileTarget</type>
        </param>
        <param name="outCode">
          <type>ISlangBlob**</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
        <body>
          <code>return ((delegate* unmanaged[Stdcall]&lt;IModulePrecompileService_Experimental*, SlangCompileTarget, ISlangBlob**, ISlangBlob**, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IModulePrecompileService_Experimental*)Unsafe.AsPointer(ref this)</param>, <param name="target">target</param>, <param name="outCode">outCode</param>, <param name="outDiagnostics">outDiagnostics</param>);</code>
        </body>
      </function>
      <function name="getModuleDependencyCount" access="public" unsafe="true">
        <type native="SlangInt">long</type>
        <body>
          <code>return ((delegate* unmanaged[Stdcall]&lt;IModulePrecompileService_Experimental*, long&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IModulePrecompileService_Experimental*)Unsafe.AsPointer(ref this)</param>);</code>
        </body>
      </function>
      <function name="getModuleDependency" access="public" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="dependencyIndex">
          <type>long</type>
        </param>
        <param name="outModule">
          <type>IModule**</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
        <body>
          <code>return ((delegate* unmanaged[Stdcall]&lt;IModulePrecompileService_Experimental*, long, IModule**, ISlangBlob**, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IModulePrecompileService_Experimental*)Unsafe.AsPointer(ref this)</param>, <param name="dependencyIndex">dependencyIndex</param>, <param name="outModule">outModule</param>, <param name="outDiagnostics">outDiagnostics</param>);</code>
        </body>
      </function>
      <vtbl>
        <field name="queryInterface" access="public">
          <type native="SlangResult (const SlangUUID &amp;, void **) __attribute__((nothrow)) __attribute__((stdcall))">delegate* unmanaged[Stdcall]&lt;IModulePrecompileService_Experimental*, SlangUUID*, void**, int&gt;</type>
        </field>
        <field name="addRef" access="public">
          <type native="uint32_t () __attribute__((nothrow)) __attribute__((stdcall))">delegate* unmanaged[Stdcall]&lt;IModulePrecompileService_Experimental*, uint&gt;</type>
        </field>
        <field name="release" access="public">
          <type native="uint32_t () __attribute__((nothrow)) __attribute__((stdcall))">delegate* unmanaged[Stdcall]&lt;IModulePrecompileService_Experimental*, uint&gt;</type>
        </field>
        <field name="precompileForTarget" access="public">
          <type native="SlangResult (SlangCompileTarget, ISlangBlob **) __attribute__((nothrow)) __attribute__((stdcall))">delegate* unmanaged[Stdcall]&lt;IModulePrecompileService_Experimental*, SlangCompileTarget, ISlangBlob**, int&gt;</type>
        </field>
        <field name="getPrecompiledTargetCode" access="public">
          <type native="SlangResult (SlangCompileTarget, IBlob **, IBlob **) __attribute__((nothrow)) __attribute__((stdcall))">delegate* unmanaged[Stdcall]&lt;IModulePrecompileService_Experimental*, SlangCompileTarget, ISlangBlob**, ISlangBlob**, int&gt;</type>
        </field>
        <field name="getModuleDependencyCount" access="public">
          <type native="SlangInt () __attribute__((nothrow)) __attribute__((stdcall))">delegate* unmanaged[Stdcall]&lt;IModulePrecompileService_Experimental*, long&gt;</type>
        </field>
        <field name="getModuleDependency" access="public">
          <type native="SlangResult (SlangInt, IModule **, IBlob **) __attribute__((nothrow)) __attribute__((stdcall))">delegate* unmanaged[Stdcall]&lt;IModulePrecompileService_Experimental*, long, IModule**, ISlangBlob**, int&gt;</type>
        </field>
      </vtbl>
    </struct>
  </namespace>
</bindings>
