<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
  <namespace name="SlangNet.Bindings.Generated.Slang">
    <struct name="IModulePrecompileService_Experimental" access="public" native="struct IModulePrecompileService_Experimental : ISlangUnknown" parent="ISlangUnknown" uuid="8e12e8e3-5fcd-433e-afcb-13a088bc5ee5" vtbl="true" unsafe="true">
      <field name="lpVtbl" access="public">
        <type>Vtbl*</type>
      </field>
      <delegate name="_queryInterface" access="public" convention="ThisCall" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="pThis">
          <type>IModulePrecompileService_Experimental*</type>
        </param>
        <param name="uuid">
          <type>SlangUUID*</type>
        </param>
        <param name="outObject">
          <type>void**</type>
        </param>
      </delegate>
      <delegate name="_addRef" access="public" convention="ThisCall">
        <type native="uint32_t">uint</type>
        <param name="pThis">
          <type>IModulePrecompileService_Experimental*</type>
        </param>
      </delegate>
      <delegate name="_release" access="public" convention="ThisCall">
        <type native="uint32_t">uint</type>
        <param name="pThis">
          <type>IModulePrecompileService_Experimental*</type>
        </param>
      </delegate>
      <delegate name="_precompileForTarget" access="public" convention="ThisCall" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="pThis">
          <type>IModulePrecompileService_Experimental*</type>
        </param>
        <param name="target">
          <type>CompileTarget</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
        </param>
      </delegate>
      <delegate name="_getPrecompiledTargetCode" access="public" convention="ThisCall" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="pThis">
          <type>IModulePrecompileService_Experimental*</type>
        </param>
        <param name="target">
          <type>CompileTarget</type>
        </param>
        <param name="outCode">
          <type>ISlangBlob**</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
      </delegate>
      <delegate name="_getModuleDependencyCount" access="public" convention="ThisCall">
        <type native="SlangInt">nint</type>
        <param name="pThis">
          <type>IModulePrecompileService_Experimental*</type>
        </param>
      </delegate>
      <delegate name="_getModuleDependency" access="public" convention="ThisCall" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="pThis">
          <type>IModulePrecompileService_Experimental*</type>
        </param>
        <param name="dependencyIndex">
          <type>nint</type>
        </param>
        <param name="outModule">
          <type>IModule**</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
      </delegate>
      <function name="queryInterface" access="public" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="uuid">
          <type>SlangUUID*</type>
        </param>
        <param name="outObject">
          <type>void**</type>
        </param>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_queryInterface</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">queryInterface</vtbl>)(<param special="thisPtr">(IModulePrecompileService_Experimental*)Unsafe.AsPointer(ref this)</param>, <param name="uuid">uuid</param>, <param name="outObject">outObject</param>);</code>
        </body>
      </function>
      <function name="addRef" access="public" unsafe="true">
        <type native="uint32_t">uint</type>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_addRef</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">addRef</vtbl>)(<param special="thisPtr">(IModulePrecompileService_Experimental*)Unsafe.AsPointer(ref this)</param>);</code>
        </body>
      </function>
      <function name="release" access="public" unsafe="true">
        <type native="uint32_t">uint</type>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_release</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">release</vtbl>)(<param special="thisPtr">(IModulePrecompileService_Experimental*)Unsafe.AsPointer(ref this)</param>);</code>
        </body>
      </function>
      <function name="precompileForTarget" access="public" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="target">
          <type>CompileTarget</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
        </param>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_precompileForTarget</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">precompileForTarget</vtbl>)(<param special="thisPtr">(IModulePrecompileService_Experimental*)Unsafe.AsPointer(ref this)</param>, <param name="target">target</param>, <param name="outDiagnostics">outDiagnostics</param>);</code>
        </body>
      </function>
      <function name="getPrecompiledTargetCode" access="public" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="target">
          <type>CompileTarget</type>
        </param>
        <param name="outCode">
          <type>ISlangBlob**</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_getPrecompiledTargetCode</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">getPrecompiledTargetCode</vtbl>)(<param special="thisPtr">(IModulePrecompileService_Experimental*)Unsafe.AsPointer(ref this)</param>, <param name="target">target</param>, <param name="outCode">outCode</param>, <param name="outDiagnostics">outDiagnostics</param>);</code>
        </body>
      </function>
      <function name="getModuleDependencyCount" access="public" unsafe="true">
        <type native="SlangInt">nint</type>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_getModuleDependencyCount</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">getModuleDependencyCount</vtbl>)(<param special="thisPtr">(IModulePrecompileService_Experimental*)Unsafe.AsPointer(ref this)</param>);</code>
        </body>
      </function>
      <function name="getModuleDependency" access="public" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="dependencyIndex">
          <type>nint</type>
        </param>
        <param name="outModule">
          <type>IModule**</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_getModuleDependency</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">getModuleDependency</vtbl>)(<param special="thisPtr">(IModulePrecompileService_Experimental*)Unsafe.AsPointer(ref this)</param>, <param name="dependencyIndex">dependencyIndex</param>, <param name="outModule">outModule</param>, <param name="outDiagnostics">outDiagnostics</param>);</code>
        </body>
      </function>
      <vtbl>
        <field name="queryInterface" access="public">
          <type native="SlangResult (const SlangUUID &amp;, void **)">IntPtr</type>
        </field>
        <field name="addRef" access="public">
          <type native="uint32_t ()">IntPtr</type>
        </field>
        <field name="release" access="public">
          <type native="uint32_t ()">IntPtr</type>
        </field>
        <field name="precompileForTarget" access="public">
          <type native="SlangResult (SlangCompileTarget, ISlangBlob **)">IntPtr</type>
        </field>
        <field name="getPrecompiledTargetCode" access="public">
          <type native="SlangResult (SlangCompileTarget, IBlob **, IBlob **)">IntPtr</type>
        </field>
        <field name="getModuleDependencyCount" access="public">
          <type native="SlangInt ()">IntPtr</type>
        </field>
        <field name="getModuleDependency" access="public">
          <type native="SlangResult (SlangInt, IModule **, IBlob **)">IntPtr</type>
        </field>
      </vtbl>
    </struct>
  </namespace>
</bindings>
