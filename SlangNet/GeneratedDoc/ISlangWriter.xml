<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
  <namespace name="SlangNet.Bindings.Generated.Slang">
    <struct name="ISlangWriter" access="public" native="struct ISlangWriter : ISlangUnknown" vtbl="true" unsafe="true">
      <field name="lpVtbl" access="public">
        <type>Vtbl*</type>
      </field>
      <delegate name="_queryInterface" access="public" convention="ThisCall" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="pThis">
          <type>ISlangWriter*</type>
        </param>
        <param name="uuid">
          <type>SlangUUID*</type>
        </param>
        <param name="outObject">
          <type>void**</type>
        </param>
      </delegate>
      <delegate name="_addRef" access="public" convention="ThisCall">
        <type native="uint32_t">uint</type>
        <param name="pThis">
          <type>ISlangWriter*</type>
        </param>
      </delegate>
      <delegate name="_release" access="public" convention="ThisCall">
        <type native="uint32_t">uint</type>
        <param name="pThis">
          <type>ISlangWriter*</type>
        </param>
      </delegate>
      <delegate name="_beginAppendBuffer" access="public" convention="ThisCall" unsafe="true">
        <type native="char *">sbyte*</type>
        <param name="pThis">
          <type>ISlangWriter*</type>
        </param>
        <param name="maxNumChars">
          <type>nuint</type>
        </param>
      </delegate>
      <delegate name="_endAppendBuffer" access="public" convention="ThisCall" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="pThis">
          <type>ISlangWriter*</type>
        </param>
        <param name="buffer">
          <type>sbyte*</type>
        </param>
        <param name="numChars">
          <type>nuint</type>
        </param>
      </delegate>
      <delegate name="_write" access="public" convention="ThisCall" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="pThis">
          <type>ISlangWriter*</type>
        </param>
        <param name="chars">
          <type>sbyte*</type>
        </param>
        <param name="numChars">
          <type>nuint</type>
        </param>
      </delegate>
      <delegate name="_flush" access="public" convention="ThisCall">
        <type>void</type>
        <param name="pThis">
          <type>ISlangWriter*</type>
        </param>
      </delegate>
      <delegate name="_isConsole" access="public" convention="ThisCall">
        <type native="SlangBool">byte</type>
        <param name="pThis">
          <type>ISlangWriter*</type>
        </param>
      </delegate>
      <delegate name="_setMode" access="public" convention="ThisCall">
        <type native="SlangResult">int</type>
        <param name="pThis">
          <type>ISlangWriter*</type>
        </param>
        <param name="mode">
          <type>WriterMode</type>
        </param>
      </delegate>
      <function name="queryInterface" access="public" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="uuid">
          <type>SlangUUID*</type>
        </param>
        <param name="outObject">
          <type>void**</type>
        </param>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_queryInterface</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">queryInterface</vtbl>)(<param special="thisPtr">(ISlangWriter*)Unsafe.AsPointer(ref this)</param>, <param name="uuid">uuid</param>, <param name="outObject">outObject</param>);</code>
        </body>
      </function>
      <function name="addRef" access="public" unsafe="true">
        <type native="uint32_t">uint</type>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_addRef</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">addRef</vtbl>)(<param special="thisPtr">(ISlangWriter*)Unsafe.AsPointer(ref this)</param>);</code>
        </body>
      </function>
      <function name="release" access="public" unsafe="true">
        <type native="uint32_t">uint</type>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_release</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">release</vtbl>)(<param special="thisPtr">(ISlangWriter*)Unsafe.AsPointer(ref this)</param>);</code>
        </body>
      </function>
      <function name="beginAppendBuffer" access="public" unsafe="true">
        <type native="char *">sbyte*</type>
        <param name="maxNumChars">
          <type>nuint</type>
        </param>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_beginAppendBuffer</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">beginAppendBuffer</vtbl>)(<param special="thisPtr">(ISlangWriter*)Unsafe.AsPointer(ref this)</param>, <param name="maxNumChars">maxNumChars</param>);</code>
        </body>
      </function>
      <function name="endAppendBuffer" access="public" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="buffer">
          <type>sbyte*</type>
        </param>
        <param name="numChars">
          <type>nuint</type>
        </param>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_endAppendBuffer</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">endAppendBuffer</vtbl>)(<param special="thisPtr">(ISlangWriter*)Unsafe.AsPointer(ref this)</param>, <param name="buffer">buffer</param>, <param name="numChars">numChars</param>);</code>
        </body>
      </function>
      <function name="write" access="public" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="chars">
          <type>sbyte*</type>
        </param>
        <param name="numChars">
          <type>nuint</type>
        </param>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_write</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">write</vtbl>)(<param special="thisPtr">(ISlangWriter*)Unsafe.AsPointer(ref this)</param>, <param name="chars">chars</param>, <param name="numChars">numChars</param>);</code>
        </body>
      </function>
      <function name="flush" access="public" unsafe="true">
        <type>void</type>
        <body>
          <code>Marshal.GetDelegateForFunctionPointer&lt;<delegate>_flush</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">flush</vtbl>)(<param special="thisPtr">(ISlangWriter*)Unsafe.AsPointer(ref this)</param>);</code>
        </body>
      </function>
      <function name="isConsole" access="public" unsafe="true">
        <type native="SlangBool">bool</type>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_isConsole</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">isConsole</vtbl>)(<param special="thisPtr">(ISlangWriter*)Unsafe.AsPointer(ref this)</param>) != 0;</code>
        </body>
      </function>
      <function name="setMode" access="public" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="mode">
          <type>WriterMode</type>
        </param>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_setMode</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">setMode</vtbl>)(<param special="thisPtr">(ISlangWriter*)Unsafe.AsPointer(ref this)</param>, <param name="mode">mode</param>);</code>
        </body>
      </function>
      <vtbl>
        <field name="queryInterface" access="public">
          <type native="SlangResult (const SlangUUID &amp;, void **)">IntPtr</type>
        </field>
        <field name="addRef" access="public">
          <type native="uint32_t ()">IntPtr</type>
        </field>
        <field name="release" access="public">
          <type native="uint32_t ()">IntPtr</type>
        </field>
        <field name="beginAppendBuffer" access="public">
          <type native="char *(size_t)">IntPtr</type>
        </field>
        <field name="endAppendBuffer" access="public">
          <type native="SlangResult (char *, size_t)">IntPtr</type>
        </field>
        <field name="write" access="public">
          <type native="SlangResult (const char *, size_t)">IntPtr</type>
        </field>
        <field name="flush" access="public">
          <type native="void ()">IntPtr</type>
        </field>
        <field name="isConsole" access="public">
          <type native="SlangBool ()">IntPtr</type>
        </field>
        <field name="setMode" access="public">
          <type native="SlangResult (SlangWriterMode)">IntPtr</type>
        </field>
      </vtbl>
    </struct>
  </namespace>
</bindings>
