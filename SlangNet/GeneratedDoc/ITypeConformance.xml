<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
  <namespace name="SlangNet.Bindings.Generated">
    <struct name="ITypeConformance" access="public" native="struct ITypeConformance : slang::IComponentType" parent="IComponentType" uuid="73eb3147-e544-41b5-b8f0-a244df21940b" vtbl="true" unsafe="true">
      <field name="lpVtbl" access="public">
        <type>Vtbl*</type>
      </field>
      <delegate name="_queryInterface" access="public" convention="StdCall" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="pThis">
          <type>ITypeConformance*</type>
        </param>
        <param name="uuid">
          <type>SlangUUID*</type>
        </param>
        <param name="outObject">
          <type>void**</type>
        </param>
      </delegate>
      <delegate name="_addRef" access="public" convention="StdCall">
        <type native="uint32_t">uint</type>
        <param name="pThis">
          <type>ITypeConformance*</type>
        </param>
      </delegate>
      <delegate name="_release" access="public" convention="StdCall">
        <type native="uint32_t">uint</type>
        <param name="pThis">
          <type>ITypeConformance*</type>
        </param>
      </delegate>
      <delegate name="_getSession" access="public" convention="StdCall" unsafe="true">
        <type native="slang::ISession *">ISession*</type>
        <param name="pThis">
          <type>ITypeConformance*</type>
        </param>
      </delegate>
      <delegate name="_getLayout" access="public" convention="StdCall" unsafe="true">
        <type native="slang::ProgramLayout *">ShaderReflection*</type>
        <param name="pThis">
          <type>ITypeConformance*</type>
        </param>
        <param name="targetIndex">
          <type>long</type>
          <init>
            <code>0</code>
          </init>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
      </delegate>
      <delegate name="_getSpecializationParamCount" access="public" convention="StdCall">
        <type native="SlangInt">long</type>
        <param name="pThis">
          <type>ITypeConformance*</type>
        </param>
      </delegate>
      <delegate name="_getEntryPointCode" access="public" convention="StdCall" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="pThis">
          <type>ITypeConformance*</type>
        </param>
        <param name="entryPointIndex">
          <type>long</type>
        </param>
        <param name="targetIndex">
          <type>long</type>
        </param>
        <param name="outCode">
          <type>ISlangBlob**</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
      </delegate>
      <delegate name="_getResultAsFileSystem" access="public" convention="StdCall" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="pThis">
          <type>ITypeConformance*</type>
        </param>
        <param name="entryPointIndex">
          <type>long</type>
        </param>
        <param name="targetIndex">
          <type>long</type>
        </param>
        <param name="outFileSystem">
          <type>ISlangMutableFileSystem**</type>
        </param>
      </delegate>
      <delegate name="_getEntryPointHash" access="public" convention="StdCall" unsafe="true">
        <type>void</type>
        <param name="pThis">
          <type>ITypeConformance*</type>
        </param>
        <param name="entryPointIndex">
          <type>long</type>
        </param>
        <param name="targetIndex">
          <type>long</type>
        </param>
        <param name="outHash">
          <type>ISlangBlob**</type>
        </param>
      </delegate>
      <delegate name="_specialize" access="public" convention="StdCall" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="pThis">
          <type>ITypeConformance*</type>
        </param>
        <param name="specializationArgs">
          <type>SpecializationArg*</type>
        </param>
        <param name="specializationArgCount">
          <type>long</type>
        </param>
        <param name="outSpecializedComponentType">
          <type>IComponentType**</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
      </delegate>
      <delegate name="_link" access="public" convention="StdCall" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="pThis">
          <type>ITypeConformance*</type>
        </param>
        <param name="outLinkedComponentType">
          <type>IComponentType**</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
      </delegate>
      <delegate name="_getEntryPointHostCallable" access="public" convention="StdCall" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="pThis">
          <type>ITypeConformance*</type>
        </param>
        <param name="entryPointIndex">
          <type>int</type>
        </param>
        <param name="targetIndex">
          <type>int</type>
        </param>
        <param name="outSharedLibrary">
          <type>ISlangSharedLibrary**</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
      </delegate>
      <delegate name="_renameEntryPoint" access="public" convention="StdCall" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="pThis">
          <type>ITypeConformance*</type>
        </param>
        <param name="newName">
          <type>sbyte*</type>
        </param>
        <param name="outEntryPoint">
          <type>IComponentType**</type>
        </param>
      </delegate>
      <delegate name="_linkWithOptions" access="public" convention="StdCall" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="pThis">
          <type>ITypeConformance*</type>
        </param>
        <param name="outLinkedComponentType">
          <type>IComponentType**</type>
        </param>
        <param name="compilerOptionEntryCount">
          <type>uint</type>
        </param>
        <param name="compilerOptionEntries">
          <type>CompilerOptionEntry*</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
      </delegate>
      <delegate name="_getTargetCode" access="public" convention="StdCall" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="pThis">
          <type>ITypeConformance*</type>
        </param>
        <param name="targetIndex">
          <type>long</type>
        </param>
        <param name="outCode">
          <type>ISlangBlob**</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
      </delegate>
      <delegate name="_getTargetMetadata" access="public" convention="StdCall" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="pThis">
          <type>ITypeConformance*</type>
        </param>
        <param name="targetIndex">
          <type>long</type>
        </param>
        <param name="outMetadata">
          <type>IMetadata**</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
      </delegate>
      <delegate name="_getEntryPointMetadata" access="public" convention="StdCall" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="pThis">
          <type>ITypeConformance*</type>
        </param>
        <param name="entryPointIndex">
          <type>long</type>
        </param>
        <param name="targetIndex">
          <type>long</type>
        </param>
        <param name="outMetadata">
          <type>IMetadata**</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
      </delegate>
      <function name="queryInterface" access="public" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="uuid">
          <type>SlangUUID*</type>
        </param>
        <param name="outObject">
          <type>void**</type>
        </param>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_queryInterface</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">queryInterface</vtbl>)(<param special="thisPtr">(ITypeConformance*)Unsafe.AsPointer(ref this)</param>, <param name="uuid">uuid</param>, <param name="outObject">outObject</param>);</code>
        </body>
      </function>
      <function name="addRef" access="public" unsafe="true">
        <type native="uint32_t">uint</type>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_addRef</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">addRef</vtbl>)(<param special="thisPtr">(ITypeConformance*)Unsafe.AsPointer(ref this)</param>);</code>
        </body>
      </function>
      <function name="release" access="public" unsafe="true">
        <type native="uint32_t">uint</type>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_release</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">release</vtbl>)(<param special="thisPtr">(ITypeConformance*)Unsafe.AsPointer(ref this)</param>);</code>
        </body>
      </function>
      <function name="getSession" access="public" unsafe="true">
        <type native="slang::ISession *">ISession*</type>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_getSession</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">getSession</vtbl>)(<param special="thisPtr">(ITypeConformance*)Unsafe.AsPointer(ref this)</param>);</code>
        </body>
      </function>
      <function name="getLayout" access="public" unsafe="true">
        <type native="slang::ProgramLayout *">ShaderReflection*</type>
        <param name="targetIndex">
          <type>long</type>
          <init>
            <code>0</code>
          </init>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_getLayout</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">getLayout</vtbl>)(<param special="thisPtr">(ITypeConformance*)Unsafe.AsPointer(ref this)</param>, <param name="targetIndex">targetIndex</param>, <param name="outDiagnostics">outDiagnostics</param>);</code>
        </body>
      </function>
      <function name="getSpecializationParamCount" access="public" unsafe="true">
        <type native="SlangInt">long</type>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_getSpecializationParamCount</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">getSpecializationParamCount</vtbl>)(<param special="thisPtr">(ITypeConformance*)Unsafe.AsPointer(ref this)</param>);</code>
        </body>
      </function>
      <function name="getEntryPointCode" access="public" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="entryPointIndex">
          <type>long</type>
        </param>
        <param name="targetIndex">
          <type>long</type>
        </param>
        <param name="outCode">
          <type>ISlangBlob**</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_getEntryPointCode</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">getEntryPointCode</vtbl>)(<param special="thisPtr">(ITypeConformance*)Unsafe.AsPointer(ref this)</param>, <param name="entryPointIndex">entryPointIndex</param>, <param name="targetIndex">targetIndex</param>, <param name="outCode">outCode</param>, <param name="outDiagnostics">outDiagnostics</param>);</code>
        </body>
      </function>
      <function name="getResultAsFileSystem" access="public" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="entryPointIndex">
          <type>long</type>
        </param>
        <param name="targetIndex">
          <type>long</type>
        </param>
        <param name="outFileSystem">
          <type>ISlangMutableFileSystem**</type>
        </param>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_getResultAsFileSystem</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">getResultAsFileSystem</vtbl>)(<param special="thisPtr">(ITypeConformance*)Unsafe.AsPointer(ref this)</param>, <param name="entryPointIndex">entryPointIndex</param>, <param name="targetIndex">targetIndex</param>, <param name="outFileSystem">outFileSystem</param>);</code>
        </body>
      </function>
      <function name="getEntryPointHash" access="public" unsafe="true">
        <type>void</type>
        <param name="entryPointIndex">
          <type>long</type>
        </param>
        <param name="targetIndex">
          <type>long</type>
        </param>
        <param name="outHash">
          <type>ISlangBlob**</type>
        </param>
        <body>
          <code>Marshal.GetDelegateForFunctionPointer&lt;<delegate>_getEntryPointHash</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">getEntryPointHash</vtbl>)(<param special="thisPtr">(ITypeConformance*)Unsafe.AsPointer(ref this)</param>, <param name="entryPointIndex">entryPointIndex</param>, <param name="targetIndex">targetIndex</param>, <param name="outHash">outHash</param>);</code>
        </body>
      </function>
      <function name="specialize" access="public" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="specializationArgs">
          <type>SpecializationArg*</type>
        </param>
        <param name="specializationArgCount">
          <type>long</type>
        </param>
        <param name="outSpecializedComponentType">
          <type>IComponentType**</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_specialize</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">specialize</vtbl>)(<param special="thisPtr">(ITypeConformance*)Unsafe.AsPointer(ref this)</param>, <param name="specializationArgs">specializationArgs</param>, <param name="specializationArgCount">specializationArgCount</param>, <param name="outSpecializedComponentType">outSpecializedComponentType</param>, <param name="outDiagnostics">outDiagnostics</param>);</code>
        </body>
      </function>
      <function name="link" access="public" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="outLinkedComponentType">
          <type>IComponentType**</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_link</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">link</vtbl>)(<param special="thisPtr">(ITypeConformance*)Unsafe.AsPointer(ref this)</param>, <param name="outLinkedComponentType">outLinkedComponentType</param>, <param name="outDiagnostics">outDiagnostics</param>);</code>
        </body>
      </function>
      <function name="getEntryPointHostCallable" access="public" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="entryPointIndex">
          <type>int</type>
        </param>
        <param name="targetIndex">
          <type>int</type>
        </param>
        <param name="outSharedLibrary">
          <type>ISlangSharedLibrary**</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_getEntryPointHostCallable</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">getEntryPointHostCallable</vtbl>)(<param special="thisPtr">(ITypeConformance*)Unsafe.AsPointer(ref this)</param>, <param name="entryPointIndex">entryPointIndex</param>, <param name="targetIndex">targetIndex</param>, <param name="outSharedLibrary">outSharedLibrary</param>, <param name="outDiagnostics">outDiagnostics</param>);</code>
        </body>
      </function>
      <function name="renameEntryPoint" access="public" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="newName">
          <type>sbyte*</type>
        </param>
        <param name="outEntryPoint">
          <type>IComponentType**</type>
        </param>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_renameEntryPoint</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">renameEntryPoint</vtbl>)(<param special="thisPtr">(ITypeConformance*)Unsafe.AsPointer(ref this)</param>, <param name="newName">newName</param>, <param name="outEntryPoint">outEntryPoint</param>);</code>
        </body>
      </function>
      <function name="linkWithOptions" access="public" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="outLinkedComponentType">
          <type>IComponentType**</type>
        </param>
        <param name="compilerOptionEntryCount">
          <type>uint</type>
        </param>
        <param name="compilerOptionEntries">
          <type>CompilerOptionEntry*</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_linkWithOptions</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">linkWithOptions</vtbl>)(<param special="thisPtr">(ITypeConformance*)Unsafe.AsPointer(ref this)</param>, <param name="outLinkedComponentType">outLinkedComponentType</param>, <param name="compilerOptionEntryCount">compilerOptionEntryCount</param>, <param name="compilerOptionEntries">compilerOptionEntries</param>, <param name="outDiagnostics">outDiagnostics</param>);</code>
        </body>
      </function>
      <function name="getTargetCode" access="public" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="targetIndex">
          <type>long</type>
        </param>
        <param name="outCode">
          <type>ISlangBlob**</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_getTargetCode</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">getTargetCode</vtbl>)(<param special="thisPtr">(ITypeConformance*)Unsafe.AsPointer(ref this)</param>, <param name="targetIndex">targetIndex</param>, <param name="outCode">outCode</param>, <param name="outDiagnostics">outDiagnostics</param>);</code>
        </body>
      </function>
      <function name="getTargetMetadata" access="public" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="targetIndex">
          <type>long</type>
        </param>
        <param name="outMetadata">
          <type>IMetadata**</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_getTargetMetadata</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">getTargetMetadata</vtbl>)(<param special="thisPtr">(ITypeConformance*)Unsafe.AsPointer(ref this)</param>, <param name="targetIndex">targetIndex</param>, <param name="outMetadata">outMetadata</param>, <param name="outDiagnostics">outDiagnostics</param>);</code>
        </body>
      </function>
      <function name="getEntryPointMetadata" access="public" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="entryPointIndex">
          <type>long</type>
        </param>
        <param name="targetIndex">
          <type>long</type>
        </param>
        <param name="outMetadata">
          <type>IMetadata**</type>
        </param>
        <param name="outDiagnostics">
          <type>ISlangBlob**</type>
          <init>
            <code>null</code>
          </init>
        </param>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_getEntryPointMetadata</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">getEntryPointMetadata</vtbl>)(<param special="thisPtr">(ITypeConformance*)Unsafe.AsPointer(ref this)</param>, <param name="entryPointIndex">entryPointIndex</param>, <param name="targetIndex">targetIndex</param>, <param name="outMetadata">outMetadata</param>, <param name="outDiagnostics">outDiagnostics</param>);</code>
        </body>
      </function>
      <vtbl>
        <field name="queryInterface" access="public">
          <type native="SlangResult (const SlangUUID &amp;, void **) __attribute__((nothrow)) __attribute__((stdcall))">IntPtr</type>
        </field>
        <field name="addRef" access="public">
          <type native="uint32_t () __attribute__((nothrow)) __attribute__((stdcall))">IntPtr</type>
        </field>
        <field name="release" access="public">
          <type native="uint32_t () __attribute__((nothrow)) __attribute__((stdcall))">IntPtr</type>
        </field>
        <field name="getSession" access="public">
          <type native="ISession *() __attribute__((nothrow)) __attribute__((stdcall))">IntPtr</type>
        </field>
        <field name="getLayout" access="public">
          <type native="ProgramLayout *(SlangInt, IBlob **) __attribute__((nothrow)) __attribute__((stdcall))">IntPtr</type>
        </field>
        <field name="getSpecializationParamCount" access="public">
          <type native="SlangInt () __attribute__((nothrow)) __attribute__((stdcall))">IntPtr</type>
        </field>
        <field name="getEntryPointCode" access="public">
          <type native="SlangResult (SlangInt, SlangInt, IBlob **, IBlob **) __attribute__((nothrow)) __attribute__((stdcall))">IntPtr</type>
        </field>
        <field name="getResultAsFileSystem" access="public">
          <type native="SlangResult (SlangInt, SlangInt, ISlangMutableFileSystem **) __attribute__((nothrow)) __attribute__((stdcall))">IntPtr</type>
        </field>
        <field name="getEntryPointHash" access="public">
          <type native="void (SlangInt, SlangInt, IBlob **) __attribute__((nothrow)) __attribute__((stdcall))">IntPtr</type>
        </field>
        <field name="specialize" access="public">
          <type native="SlangResult (const SpecializationArg *, SlangInt, IComponentType **, ISlangBlob **) __attribute__((nothrow)) __attribute__((stdcall))">IntPtr</type>
        </field>
        <field name="link" access="public">
          <type native="SlangResult (IComponentType **, ISlangBlob **) __attribute__((nothrow)) __attribute__((stdcall))">IntPtr</type>
        </field>
        <field name="getEntryPointHostCallable" access="public">
          <type native="SlangResult (int, int, ISlangSharedLibrary **, slang::IBlob **) __attribute__((nothrow)) __attribute__((stdcall))">IntPtr</type>
        </field>
        <field name="renameEntryPoint" access="public">
          <type native="SlangResult (const char *, IComponentType **) __attribute__((nothrow)) __attribute__((stdcall))">IntPtr</type>
        </field>
        <field name="linkWithOptions" access="public">
          <type native="SlangResult (IComponentType **, uint32_t, CompilerOptionEntry *, ISlangBlob **) __attribute__((nothrow)) __attribute__((stdcall))">IntPtr</type>
        </field>
        <field name="getTargetCode" access="public">
          <type native="SlangResult (SlangInt, IBlob **, IBlob **) __attribute__((nothrow)) __attribute__((stdcall))">IntPtr</type>
        </field>
        <field name="getTargetMetadata" access="public">
          <type native="SlangResult (SlangInt, IMetadata **, IBlob **) __attribute__((nothrow)) __attribute__((stdcall))">IntPtr</type>
        </field>
        <field name="getEntryPointMetadata" access="public">
          <type native="SlangResult (SlangInt, SlangInt, IMetadata **, IBlob **) __attribute__((nothrow)) __attribute__((stdcall))">IntPtr</type>
        </field>
      </vtbl>
    </struct>
  </namespace>
</bindings>
