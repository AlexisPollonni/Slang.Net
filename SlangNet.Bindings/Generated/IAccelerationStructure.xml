<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
  <namespace name="SlangNet.Bindings.Generated">
    <struct name="IAccelerationStructure" access="public" native="struct IAccelerationStructure : gfx::IResourceView" parent="IResourceView" vtbl="true" unsafe="true">
      <field name="lpVtbl" access="public">
        <type>Vtbl*</type>
      </field>
      <delegate name="_queryInterface" access="public" convention="StdCall" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="pThis">
          <type>IAccelerationStructure*</type>
        </param>
        <param name="uuid">
          <type>SlangUUID*</type>
        </param>
        <param name="outObject">
          <type>void**</type>
        </param>
      </delegate>
      <delegate name="_addRef" access="public" convention="StdCall">
        <type native="uint32_t">uint</type>
        <param name="pThis">
          <type>IAccelerationStructure*</type>
        </param>
      </delegate>
      <delegate name="_release" access="public" convention="StdCall">
        <type native="uint32_t">uint</type>
        <param name="pThis">
          <type>IAccelerationStructure*</type>
        </param>
      </delegate>
      <delegate name="_getViewDesc" access="public" convention="StdCall" unsafe="true">
        <type native="gfx::IResourceView::Desc *">ResourceViewDesc*</type>
        <param name="pThis">
          <type>IAccelerationStructure*</type>
        </param>
      </delegate>
      <delegate name="_getNativeHandle" access="public" convention="StdCall" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="pThis">
          <type>IAccelerationStructure*</type>
        </param>
        <param name="outNativeHandle">
          <type>InteropHandle*</type>
        </param>
      </delegate>
      <delegate name="_getDeviceAddress" access="public" convention="StdCall">
        <type native="gfx::DeviceAddress">ulong</type>
        <param name="pThis">
          <type>IAccelerationStructure*</type>
        </param>
      </delegate>
      <enumeration name="TypeKind" access="public">
        <type>int</type>
        <enumerator name="TopLevel" access="public">
          <type primitive="False">int</type>
        </enumerator>
        <enumerator name="BottomLevel" access="public">
          <type primitive="False">int</type>
        </enumerator>
      </enumeration>
      <struct name="BuildFlags" access="public">
        <enumeration name="Enum" access="public">
          <type>int</type>
          <enumerator name="None" access="public">
            <type primitive="False">int</type>
          </enumerator>
          <enumerator name="AllowUpdate" access="public">
            <type primitive="False">int</type>
            <value>
              <code>1</code>
            </value>
          </enumerator>
          <enumerator name="AllowCompaction" access="public">
            <type primitive="False">int</type>
            <value>
              <code>2</code>
            </value>
          </enumerator>
          <enumerator name="PreferFastTrace" access="public">
            <type primitive="False">int</type>
            <value>
              <code>4</code>
            </value>
          </enumerator>
          <enumerator name="PreferFastBuild" access="public">
            <type primitive="False">int</type>
            <value>
              <code>8</code>
            </value>
          </enumerator>
          <enumerator name="MinimizeMemory" access="public">
            <type primitive="False">int</type>
            <value>
              <code>16</code>
            </value>
          </enumerator>
          <enumerator name="PerformUpdate" access="public">
            <type primitive="False">int</type>
            <value>
              <code>32</code>
            </value>
          </enumerator>
        </enumeration>
      </struct>
      <enumeration name="GeometryType" access="public">
        <type>int</type>
        <enumerator name="Triangles" access="public">
          <type primitive="False">int</type>
        </enumerator>
        <enumerator name="ProcedurePrimitives" access="public">
          <type primitive="False">int</type>
        </enumerator>
      </enumeration>
      <struct name="GeometryFlags" access="public">
        <enumeration name="Enum" access="public">
          <type>int</type>
          <enumerator name="None" access="public">
            <type primitive="False">int</type>
          </enumerator>
          <enumerator name="Opaque" access="public">
            <type primitive="False">int</type>
            <value>
              <code>1</code>
            </value>
          </enumerator>
          <enumerator name="NoDuplicateAnyHitInvocation" access="public">
            <type primitive="False">int</type>
            <value>
              <code>2</code>
            </value>
          </enumerator>
        </enumeration>
      </struct>
      <struct name="TriangleDesc" access="public">
        <field name="transform3x4" access="public">
          <type native="gfx::DeviceAddress">ulong</type>
        </field>
        <field name="indexFormat" access="public">
          <type native="gfx::Format">Format</type>
        </field>
        <field name="vertexFormat" access="public">
          <type native="gfx::Format">Format</type>
        </field>
        <field name="indexCount" access="public">
          <type native="gfx::GfxCount">int</type>
        </field>
        <field name="vertexCount" access="public">
          <type native="gfx::GfxCount">int</type>
        </field>
        <field name="indexData" access="public">
          <type native="gfx::DeviceAddress">ulong</type>
        </field>
        <field name="vertexData" access="public">
          <type native="gfx::DeviceAddress">ulong</type>
        </field>
        <field name="vertexStride" access="public">
          <type native="gfx::Size">nuint</type>
        </field>
      </struct>
      <struct name="ProceduralAABB" access="public">
        <field name="minX" access="public">
          <type>float</type>
        </field>
        <field name="minY" access="public">
          <type>float</type>
        </field>
        <field name="minZ" access="public">
          <type>float</type>
        </field>
        <field name="maxX" access="public">
          <type>float</type>
        </field>
        <field name="maxY" access="public">
          <type>float</type>
        </field>
        <field name="maxZ" access="public">
          <type>float</type>
        </field>
      </struct>
      <struct name="ProceduralAABBDesc" access="public">
        <field name="count" access="public">
          <type native="gfx::GfxCount">int</type>
        </field>
        <field name="data" access="public">
          <type native="gfx::DeviceAddress">ulong</type>
        </field>
        <field name="stride" access="public">
          <type native="gfx::Size">nuint</type>
        </field>
      </struct>
      <struct name="GeometryDesc" access="public">
        <field name="type" access="public">
          <type native="gfx::IAccelerationStructure::GeometryType">GeometryType</type>
        </field>
        <field name="flags" access="public">
          <type native="gfx::IAccelerationStructure::GeometryFlags::Enum">Enum</type>
        </field>
        <field name="content" access="public">
          <type native="__AnonymousRecord_slang-gfx_L1029_C9">_content_e__Union</type>
        </field>
        <struct name="_content_e__Union" access="public" layout="Explicit">
          <field name="triangles" access="public" offset="0">
            <type native="gfx::IAccelerationStructure::TriangleDesc">TriangleDesc</type>
          </field>
          <field name="proceduralAABBs" access="public" offset="0">
            <type native="gfx::IAccelerationStructure::ProceduralAABBDesc">ProceduralAABBDesc</type>
          </field>
        </struct>
      </struct>
      <struct name="GeometryInstanceFlags" access="public">
        <enumeration name="Enum" access="public">
          <type>uint</type>
          <enumerator name="None" access="public">
            <type primitive="False">uint</type>
            <value>
              <code>0</code>
            </value>
          </enumerator>
          <enumerator name="TriangleFacingCullDisable" access="public">
            <type primitive="False">uint</type>
            <value>
              <code>0x00000001</code>
            </value>
          </enumerator>
          <enumerator name="TriangleFrontCounterClockwise" access="public">
            <type primitive="False">uint</type>
            <value>
              <code>0x00000002</code>
            </value>
          </enumerator>
          <enumerator name="ForceOpaque" access="public">
            <type primitive="False">uint</type>
            <value>
              <code>0x00000004</code>
            </value>
          </enumerator>
          <enumerator name="NoOpaque" access="public">
            <type primitive="False">uint</type>
            <value>
              <code>0x00000008</code>
            </value>
          </enumerator>
        </enumeration>
      </struct>
      <struct name="InstanceDesc" access="public">
        <field name="transform" access="public">
          <type native="float[3][4]" count="3 * 4" fixed="_transform_e__FixedBuffer">float</type>
        </field>
        <field name="_bitfield1" access="public">
          <type>uint</type>
        </field>
        <field name="instanceID" access="public">
          <type native="uint32_t : 24">uint</type>
          <get inlining="aggressive">
            <code>return <bitfieldName>_bitfield1</bitfieldName> &amp; 0x<bitwidthHexStringBacking>FFFFFFu</bitwidthHexStringBacking>;</code>
          </get>
          <set inlining="aggressive">
            <code>
              <bitfieldName>_bitfield1</bitfieldName> = (_bitfield1 &amp; ~0x<bitwidthHexStringBacking>FFFFFFu</bitwidthHexStringBacking>) | (value &amp; 0x<bitwidthHexString>FFFFFFu</bitwidthHexString>);</code>
          </set>
        </field>
        <field name="instanceMask" access="public">
          <type native="uint32_t : 8">uint</type>
          <get inlining="aggressive">
            <code>return (<bitfieldName>_bitfield1</bitfieldName> &gt;&gt; <bitfieldOffset>24</bitfieldOffset>) &amp; 0x<bitwidthHexStringBacking>FFu</bitwidthHexStringBacking>;</code>
          </get>
          <set inlining="aggressive">
            <code>
              <bitfieldName>_bitfield1</bitfieldName> = (_bitfield1 &amp; ~(0x<bitwidthHexStringBacking>FFu</bitwidthHexStringBacking> &lt;&lt; <bitfieldOffset>24</bitfieldOffset>)) | ((value &amp; 0x<bitwidthHexString>FFu</bitwidthHexString>) &lt;&lt; 24);</code>
          </set>
        </field>
        <field name="_bitfield2" access="public">
          <type>uint</type>
        </field>
        <field name="instanceContributionToHitGroupIndex" access="public">
          <type native="uint32_t : 24">uint</type>
          <get inlining="aggressive">
            <code>return <bitfieldName>_bitfield2</bitfieldName> &amp; 0x<bitwidthHexStringBacking>FFFFFFu</bitwidthHexStringBacking>;</code>
          </get>
          <set inlining="aggressive">
            <code>
              <bitfieldName>_bitfield2</bitfieldName> = (_bitfield2 &amp; ~0x<bitwidthHexStringBacking>FFFFFFu</bitwidthHexStringBacking>) | (value &amp; 0x<bitwidthHexString>FFFFFFu</bitwidthHexString>);</code>
          </set>
        </field>
        <field name="flags" access="public">
          <type native="uint32_t : 8">uint</type>
          <get inlining="aggressive">
            <code>return (<bitfieldName>_bitfield2</bitfieldName> &gt;&gt; <bitfieldOffset>24</bitfieldOffset>) &amp; 0x<bitwidthHexStringBacking>FFu</bitwidthHexStringBacking>;</code>
          </get>
          <set inlining="aggressive">
            <code>
              <bitfieldName>_bitfield2</bitfieldName> = (_bitfield2 &amp; ~(0x<bitwidthHexStringBacking>FFu</bitwidthHexStringBacking> &lt;&lt; <bitfieldOffset>24</bitfieldOffset>)) | ((value &amp; 0x<bitwidthHexString>FFu</bitwidthHexString>) &lt;&lt; 24);</code>
          </set>
        </field>
        <field name="accelerationStructure" access="public">
          <type native="gfx::DeviceAddress">ulong</type>
        </field>
        <struct name="_transform_e__FixedBuffer" access="public">
          <attribute>InlineArray(3 * 4)</attribute>
          <field name="e0_0" access="public">
            <type>float</type>
          </field>
        </struct>
      </struct>
      <struct name="PrebuildInfo" access="public">
        <field name="resultDataMaxSize" access="public">
          <type native="gfx::Size">nuint</type>
        </field>
        <field name="scratchDataSize" access="public">
          <type native="gfx::Size">nuint</type>
        </field>
        <field name="updateScratchDataSize" access="public">
          <type native="gfx::Size">nuint</type>
        </field>
      </struct>
      <struct name="BuildInputs" access="public" unsafe="true">
        <field name="kind" access="public">
          <type native="gfx::IAccelerationStructure::Kind">TypeKind</type>
        </field>
        <field name="flags" access="public">
          <type native="gfx::IAccelerationStructure::BuildFlags::Enum">Enum</type>
        </field>
        <field name="descCount" access="public">
          <type native="gfx::GfxCount">int</type>
        </field>
        <field name="instanceDescs" access="public">
          <type native="gfx::DeviceAddress">ulong</type>
        </field>
        <field name="geometryDescs" access="public">
          <type native="const GeometryDesc *">GeometryDesc*</type>
        </field>
      </struct>
      <struct name="CreateDesc" access="public" unsafe="true">
        <field name="kind" access="public">
          <type native="gfx::IAccelerationStructure::Kind">TypeKind</type>
        </field>
        <field name="buffer" access="public">
          <type native="gfx::IBufferResource *">IBufferResource*</type>
        </field>
        <field name="offset" access="public">
          <type native="gfx::Offset">nuint</type>
        </field>
        <field name="size" access="public">
          <type native="gfx::Size">nuint</type>
        </field>
      </struct>
      <struct name="BuildDesc" access="public" unsafe="true">
        <field name="inputs" access="public">
          <type native="gfx::IAccelerationStructure::BuildInputs">BuildInputs</type>
        </field>
        <field name="source" access="public">
          <type native="gfx::IAccelerationStructure *">IAccelerationStructure*</type>
        </field>
        <field name="dest" access="public">
          <type native="gfx::IAccelerationStructure *">IAccelerationStructure*</type>
        </field>
        <field name="scratchData" access="public">
          <type native="gfx::DeviceAddress">ulong</type>
        </field>
      </struct>
      <function name="queryInterface" access="public" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="uuid">
          <type>SlangUUID*</type>
        </param>
        <param name="outObject">
          <type>void**</type>
        </param>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_queryInterface</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">queryInterface</vtbl>)(<param special="thisPtr">(IAccelerationStructure*)Unsafe.AsPointer(ref this)</param>, <param name="uuid">uuid</param>, <param name="outObject">outObject</param>);</code>
        </body>
      </function>
      <function name="addRef" access="public" unsafe="true">
        <type native="uint32_t">uint</type>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_addRef</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">addRef</vtbl>)(<param special="thisPtr">(IAccelerationStructure*)Unsafe.AsPointer(ref this)</param>);</code>
        </body>
      </function>
      <function name="release" access="public" unsafe="true">
        <type native="uint32_t">uint</type>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_release</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">release</vtbl>)(<param special="thisPtr">(IAccelerationStructure*)Unsafe.AsPointer(ref this)</param>);</code>
        </body>
      </function>
      <function name="getViewDesc" access="public" unsafe="true">
        <type native="gfx::IResourceView::Desc *">ResourceViewDesc*</type>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_getViewDesc</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">getViewDesc</vtbl>)(<param special="thisPtr">(IAccelerationStructure*)Unsafe.AsPointer(ref this)</param>);</code>
        </body>
      </function>
      <function name="getNativeHandle" access="public" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="outNativeHandle">
          <type>InteropHandle*</type>
        </param>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_getNativeHandle</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">getNativeHandle</vtbl>)(<param special="thisPtr">(IAccelerationStructure*)Unsafe.AsPointer(ref this)</param>, <param name="outNativeHandle">outNativeHandle</param>);</code>
        </body>
      </function>
      <function name="getDeviceAddress" access="public" unsafe="true">
        <type native="gfx::DeviceAddress">ulong</type>
        <body>
          <code>return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_getDeviceAddress</delegate>&gt;(lpVtbl-&gt;<vtbl explicit="True">getDeviceAddress</vtbl>)(<param special="thisPtr">(IAccelerationStructure*)Unsafe.AsPointer(ref this)</param>);</code>
        </body>
      </function>
      <vtbl>
        <field name="queryInterface" access="public">
          <type native="SlangResult (const SlangUUID &amp;, void **) __attribute__((nothrow)) __attribute__((stdcall))">IntPtr</type>
        </field>
        <field name="addRef" access="public">
          <type native="uint32_t () __attribute__((nothrow)) __attribute__((stdcall))">IntPtr</type>
        </field>
        <field name="release" access="public">
          <type native="uint32_t () __attribute__((nothrow)) __attribute__((stdcall))">IntPtr</type>
        </field>
        <field name="getViewDesc" access="public">
          <type native="Desc *() __attribute__((nothrow)) __attribute__((stdcall))">IntPtr</type>
        </field>
        <field name="getNativeHandle" access="public">
          <type native="Result (InteropHandle *) __attribute__((nothrow)) __attribute__((stdcall))">IntPtr</type>
        </field>
        <field name="getDeviceAddress" access="public">
          <type native="DeviceAddress () __attribute__((nothrow)) __attribute__((stdcall))">IntPtr</type>
        </field>
      </vtbl>
    </struct>
  </namespace>
</bindings>
