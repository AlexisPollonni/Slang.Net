<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <RuntimeIdentifiers>win-x64;win-arm64;linux-x64;linux-arm64;osx-x64;osx-arm64</RuntimeIdentifiers>
    <!-- Set all package properties shared by packages -->
    <PackageTags>slang;shader;C#;csharp;native</PackageTags>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <RepositoryType>git</RepositoryType>
    <RepositoryUrl>https://github.com/shader-slang/slang</RepositoryUrl>
    <IncludeBuildOutput>false</IncludeBuildOutput>
    <IncludeSymbols>false</IncludeSymbols>
    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
    <GenerateTargetFrameworkAttribute>false</GenerateTargetFrameworkAttribute>
    <SuppressDependenciesWhenPacking>true</SuppressDependenciesWhenPacking>
    <ScriptsFolder>$([MSBuild]::NormalizePath('$(MSBuildThisFileDirectory)', '..', 'Scripts'))</ScriptsFolder>
    <DownloadSlangScript>$([MSBuild]::NormalizePath('$(ScriptsFolder)', 'DownloadSlangBinaries.cs'))</DownloadSlangScript>
    <GenerateRuntimeJsonScript>$([MSBuild]::NormalizePath('$(ScriptsFolder)', 'GenerateRuntimeJson.cs'))</GenerateRuntimeJsonScript>
  </PropertyGroup>
  <PropertyGroup Condition="'$(BeforePack)' == ''">
    <BeforePack>PackNativePerRuntime</BeforePack>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="CSharpier.MsBuild">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>
  <Target Name="DownloadSlangBinaries" BeforeTargets="BeforeBuild">
    <Error Condition="'$(IntermediateOutputPath)' == ''" Text="OutDir is not set." />
    <Error Condition="'$(SlangVersion)' == ''" Text="Slang version is not set." />
    <PropertyGroup Condition="'$(RuntimeIdentifier)' != 'any'">
      <SlangRuntimeIdentifier>$(RuntimeIdentifier)</SlangRuntimeIdentifier>
    </PropertyGroup>
    <PropertyGroup Condition="'$(RuntimeIdentifier)' == '' or '$(RuntimeIdentifier)' == 'any'">
      <SlangRuntimeIdentifier>$(NETCoreSdkRuntimeIdentifier)</SlangRuntimeIdentifier>
    </PropertyGroup>
    <Error
      Condition="'$(SlangRuntimeIdentifier)' == ''"
      Text="RuntimeIdentifier is not set and could not be inferred."
    />
    <PropertyGroup>
      <_OutBinariesDir>$([MSBuild]::NormalizePath('$(IntermediateOutputPath)', 'runtimes', '$(SlangRuntimeIdentifier)', 'native'))</_OutBinariesDir>
    </PropertyGroup>
    <Exec Command="dotnet run --file $([MSBuild]::Escape('$(DownloadSlangScript)')) -- -o $([MSBuild]::Escape('$(_OutBinariesDir)')) --slang-version $(SlangVersion) --target-rids $(SlangRuntimeIdentifier)" />
    <ItemGroup>
      <_NativeBinaries Include="$(_OutBinariesDir)\*.dll;$(_OutBinariesDir)\*.so;$(_OutBinariesDir)\*.dylib" />
    </ItemGroup>
    <Message Text="Found native binaries: @(_NativeBinaries)" Importance="high" />
    <Error
      Condition="@(_NativeBinaries-&gt;Count()) == 0"
      Text="No native binaries were found in $(_OutBinariesDir). Something went wrong."
    />
    <ItemGroup>
      <Content
        Include="@(_NativeBinaries)"
        Pack="false"
        CopyToOutputDirectory="PreserveNewest"
        CopyToPublishDirectory="Always"
      />
    </ItemGroup>
  </Target>
  <!-- New target that uses MSBuild batching to pack each RID separately -->
  <Target Name="PackNativePerRuntime" Condition="'$(_RecurseGuard)' == ''">
    <!-- Create items for each RuntimeIdentifier -->
    <ItemGroup>
      <RuntimeIdentifiersToPack Include="$(RuntimeIdentifiers)" />
    </ItemGroup>
    <!-- Pack each runtime identifier separately using batching -->
    <MSBuild
      Projects="$(MSBuildProjectFile)"
      Targets="PackSingleRuntime;Pack"
      Properties="
                     RuntimeIdentifier=%(RuntimeIdentifiersToPack.Identity);
                     PackageOutputPath=$(PackageOutputPath);
                     VersionPrefix=$(VersionPrefix);
                     VersionSuffix=$(VersionSuffix);
                     BeforePack=PackSingleRuntime;"
      BuildInParallel="false"
    />
    <CallTarget Targets="PackMetaPackage" />
  </Target>
  <!-- Target to pack a single platform dependent runtime package -->
  <Target Name="PackSingleRuntime" DependsOnTargets="DownloadSlangBinaries">
    <Error
      Condition="'$(RuntimeIdentifier)' == ''"
      Text="PackMetaPackage should be called with a RuntimeIdentifier."
    />
    <PropertyGroup>
      <PackageTitle>ShaderSlang.Net - Native binaries for $(RuntimeIdentifier) platform</PackageTitle>
      <PackageId>$(MSBuildProjectName).Runtime.$(RuntimeIdentifier)</PackageId>
      <PackageDescription>
                These are the native binaries of a single platform ($(RuntimeIdentifier)) for the ShaderSlang.Net package, a .NET bindings library for shader-slang.
                For ShaderSlang.Net see https://github.com/AlexisPollonni/ShaderSlang.Net
                For shader-slang see https://github.com/shader-slang/slang
            </PackageDescription>
    </PropertyGroup>
    <ItemGroup>
      <!-- Remove any previously added native binaries to reapply pack attribute -->
      <Content Remove="@(_NativeBinaries)" />
    </ItemGroup>
    <ItemGroup>
      <None
        Include="@(_NativeBinaries)"
        Pack="true"
        PackagePath="runtimes/$(RuntimeIdentifier)/native/%(Filename)%(Extension)"
      />
      <None
        Include="README.md"
        Pack="true"
        PackagePath="readme.md"
        Condition="Exists('README.md')"
      />
    </ItemGroup>
  </Target>
  <!-- Target to create meta package -->
  <Target Name="PackMetaPackage">
    <PropertyGroup>
      <PackageTitle>ShaderSlang.Net - Native binaries meta package</PackageTitle>
      <PackageDescription>
                This is a meta-package containing native binaries for the ShaderSlang.Net package, a .NET bindings library for shader-slang.
                Dotnet should resolve the correct specific binaries for your platform, in case of issues make sure to specify a runtime identifier in your project file.
                For ShaderSlang.Net see https://github.com/AlexisPollonni/ShaderSlang.Net
                For shader-slang see https://github.com/shader-slang/slang
            </PackageDescription>
      <_RuntimeJsonDir>$([MSBuild]::NormalizePath('$(IntermediateOutputPath)'))</_RuntimeJsonDir>
      <_RuntimeJsonFile>$([MSBuild]::NormalizePath('$(_RuntimeJsonDir)', 'runtime.json'))</_RuntimeJsonFile>
    </PropertyGroup>
    <!-- Prepare the parameters and calls the script to generate the runtime json to include in the package for dependency resolution. Uses NUKE internally for convenience -->
    <PropertyGroup>
      <_RuntimeIdentifiersComma>$(RuntimeIdentifiers.Replace(';', ','))</_RuntimeIdentifiersComma>
    </PropertyGroup>
    <PropertyGroup>
      <VersionSuffixArg Condition="'$(VersionSuffix)' != ''"
        >--version-suffix $(VersionSuffix)</VersionSuffixArg
      >
    </PropertyGroup>
    <Exec Command="dotnet run --file $([MSBuild]::Escape('$(GenerateRuntimeJsonScript)')) -- -o $([MSBuild]::Escape('$(_RuntimeJsonDir)')) --version-prefix $(VersionPrefix) $(VersionSuffixArg) --base-package-name $(MSBuildProjectName) --target-rids $(_RuntimeIdentifiersComma)" />
    <ItemGroup>
      <None
        Include="README.md"
        Pack="true"
        PackagePath="readme.md"
        Condition="Exists('README.md')"
      />
      <None Include="$(_RuntimeJsonFile)" Pack="true" PackagePath="runtime.json" />
    </ItemGroup>
  </Target>
</Project>
