<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<bindings>
  <namespace name="ShaderSlang.Net.Bindings.Generated">
    <struct
      name="ICommandBufferD3D12"
      access="public"
      native="struct ICommandBufferD3D12 : gfx::ICommandBuffer"
      parent="ICommandBuffer"
      vtbl="true"
      unsafe="true"
    >
      <field name="lpVtbl" access="public">
        <type>Vtbl*</type>
      </field>
      <delegate name="_queryInterface" access="public" convention="StdCall" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="pThis">
          <type>ICommandBufferD3D12*</type>
        </param>
        <param name="uuid">
          <type>SlangUUID*</type>
        </param>
        <param name="outObject">
          <type>void**</type>
        </param>
      </delegate>
      <delegate name="_addRef" access="public" convention="StdCall">
        <type native="uint32_t">uint</type>
        <param name="pThis">
          <type>ICommandBufferD3D12*</type>
        </param>
      </delegate>
      <delegate name="_release" access="public" convention="StdCall">
        <type native="uint32_t">uint</type>
        <param name="pThis">
          <type>ICommandBufferD3D12*</type>
        </param>
      </delegate>
      <delegate name="_encodeRenderCommands" access="public" convention="StdCall" unsafe="true">
        <type>void</type>
        <param name="pThis">
          <type>ICommandBufferD3D12*</type>
        </param>
        <param name="renderPass">
          <type>IRenderPassLayout*</type>
        </param>
        <param name="framebuffer">
          <type>IFramebuffer*</type>
        </param>
        <param name="outEncoder">
          <type>IRenderCommandEncoder**</type>
        </param>
      </delegate>
      <delegate name="_encodeComputeCommands" access="public" convention="StdCall" unsafe="true">
        <type>void</type>
        <param name="pThis">
          <type>ICommandBufferD3D12*</type>
        </param>
        <param name="outEncoder">
          <type>IComputeCommandEncoder**</type>
        </param>
      </delegate>
      <delegate name="_encodeResourceCommands" access="public" convention="StdCall" unsafe="true">
        <type>void</type>
        <param name="pThis">
          <type>ICommandBufferD3D12*</type>
        </param>
        <param name="outEncoder">
          <type>IResourceCommandEncoder**</type>
        </param>
      </delegate>
      <delegate name="_encodeRayTracingCommands" access="public" convention="StdCall" unsafe="true">
        <type>void</type>
        <param name="pThis">
          <type>ICommandBufferD3D12*</type>
        </param>
        <param name="outEncoder">
          <type>IRayTracingCommandEncoder**</type>
        </param>
      </delegate>
      <delegate name="_close" access="public" convention="StdCall">
        <type>void</type>
        <param name="pThis">
          <type>ICommandBufferD3D12*</type>
        </param>
      </delegate>
      <delegate name="_getNativeHandle" access="public" convention="StdCall" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="pThis">
          <type>ICommandBufferD3D12*</type>
        </param>
        <param name="outHandle">
          <type>InteropHandle*</type>
        </param>
      </delegate>
      <delegate name="_invalidateDescriptorHeapBinding" access="public" convention="StdCall">
        <type>void</type>
        <param name="pThis">
          <type>ICommandBufferD3D12*</type>
        </param>
      </delegate>
      <delegate name="_ensureInternalDescriptorHeapsBound" access="public" convention="StdCall">
        <type>void</type>
        <param name="pThis">
          <type>ICommandBufferD3D12*</type>
        </param>
      </delegate>
      <function name="queryInterface" access="public" unsafe="true">
        <type native="SlangResult">int</type>
        <param name="uuid">
          <type>SlangUUID*</type>
        </param>
        <param name="outObject">
          <type>void**</type>
        </param>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_queryInterface</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >queryInterface</vtbl
            >)(<param special="thisPtr"
              >(ICommandBufferD3D12*)Unsafe.AsPointer(ref this)</param
            >, <param name="uuid">uuid</param>, <param name="outObject">outObject</param>);</code
          >
        </body>
      </function>
      <function name="addRef" access="public" unsafe="true">
        <type native="uint32_t">uint</type>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_addRef</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >addRef</vtbl
            >)(<param special="thisPtr"
              >(ICommandBufferD3D12*)Unsafe.AsPointer(ref this)</param
            >);</code
          >
        </body>
      </function>
      <function name="release" access="public" unsafe="true">
        <type native="uint32_t">uint</type>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_release</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >release</vtbl
            >)(<param special="thisPtr"
              >(ICommandBufferD3D12*)Unsafe.AsPointer(ref this)</param
            >);</code
          >
        </body>
      </function>
      <function name="encodeRenderCommands" access="public" unsafe="true">
        <type>void</type>
        <param name="renderPass">
          <type>IRenderPassLayout*</type>
        </param>
        <param name="framebuffer">
          <type>IFramebuffer*</type>
        </param>
        <param name="outEncoder">
          <type>IRenderCommandEncoder**</type>
        </param>
        <body>
          <code
            >Marshal.GetDelegateForFunctionPointer&lt;<delegate>_encodeRenderCommands</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >encodeRenderCommands</vtbl
            >)(<param special="thisPtr"
              >(ICommandBufferD3D12*)Unsafe.AsPointer(ref this)</param
            >, <param name="renderPass">renderPass</param>, <param name="framebuffer"
              >framebuffer</param
            >, <param name="outEncoder">outEncoder</param>);</code
          >
        </body>
      </function>
      <function name="encodeComputeCommands" access="public" unsafe="true">
        <type>void</type>
        <param name="outEncoder">
          <type>IComputeCommandEncoder**</type>
        </param>
        <body>
          <code
            >Marshal.GetDelegateForFunctionPointer&lt;<delegate>_encodeComputeCommands</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >encodeComputeCommands</vtbl
            >)(<param special="thisPtr"
              >(ICommandBufferD3D12*)Unsafe.AsPointer(ref this)</param
            >, <param name="outEncoder">outEncoder</param>);</code
          >
        </body>
      </function>
      <function name="encodeResourceCommands" access="public" unsafe="true">
        <type>void</type>
        <param name="outEncoder">
          <type>IResourceCommandEncoder**</type>
        </param>
        <body>
          <code
            >Marshal.GetDelegateForFunctionPointer&lt;<delegate>_encodeResourceCommands</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >encodeResourceCommands</vtbl
            >)(<param special="thisPtr"
              >(ICommandBufferD3D12*)Unsafe.AsPointer(ref this)</param
            >, <param name="outEncoder">outEncoder</param>);</code
          >
        </body>
      </function>
      <function name="encodeRayTracingCommands" access="public" unsafe="true">
        <type>void</type>
        <param name="outEncoder">
          <type>IRayTracingCommandEncoder**</type>
        </param>
        <body>
          <code
            >Marshal.GetDelegateForFunctionPointer&lt;<delegate>_encodeRayTracingCommands</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >encodeRayTracingCommands</vtbl
            >)(<param special="thisPtr"
              >(ICommandBufferD3D12*)Unsafe.AsPointer(ref this)</param
            >, <param name="outEncoder">outEncoder</param>);</code
          >
        </body>
      </function>
      <function name="close" access="public" unsafe="true">
        <type>void</type>
        <body>
          <code
            >Marshal.GetDelegateForFunctionPointer&lt;<delegate>_close</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >close</vtbl
            >)(<param special="thisPtr"
              >(ICommandBufferD3D12*)Unsafe.AsPointer(ref this)</param
            >);</code
          >
        </body>
      </function>
      <function name="getNativeHandle" access="public" unsafe="true">
        <type native="gfx::Result">int</type>
        <param name="outHandle">
          <type>InteropHandle*</type>
        </param>
        <body>
          <code
            >return Marshal.GetDelegateForFunctionPointer&lt;<delegate>_getNativeHandle</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >getNativeHandle</vtbl
            >)(<param special="thisPtr"
              >(ICommandBufferD3D12*)Unsafe.AsPointer(ref this)</param
            >, <param name="outHandle">outHandle</param>);</code
          >
        </body>
      </function>
      <function name="invalidateDescriptorHeapBinding" access="public" unsafe="true">
        <type>void</type>
        <body>
          <code
            >Marshal.GetDelegateForFunctionPointer&lt;<delegate>_invalidateDescriptorHeapBinding</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >invalidateDescriptorHeapBinding</vtbl
            >)(<param special="thisPtr"
              >(ICommandBufferD3D12*)Unsafe.AsPointer(ref this)</param
            >);</code
          >
        </body>
      </function>
      <function name="ensureInternalDescriptorHeapsBound" access="public" unsafe="true">
        <type>void</type>
        <body>
          <code
            >Marshal.GetDelegateForFunctionPointer&lt;<delegate>_ensureInternalDescriptorHeapsBound</delegate>&gt;(lpVtbl-&gt;<vtbl
              explicit="True"
              >ensureInternalDescriptorHeapsBound</vtbl
            >)(<param special="thisPtr"
              >(ICommandBufferD3D12*)Unsafe.AsPointer(ref this)</param
            >);</code
          >
        </body>
      </function>
      <vtbl>
        <field name="queryInterface" access="public">
          <type
            native="SlangResult (const SlangUUID &amp;, void **) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="addRef" access="public">
          <type native="uint32_t () __attribute__((nothrow)) __attribute__((stdcall))">IntPtr</type>
        </field>
        <field name="release" access="public">
          <type native="uint32_t () __attribute__((nothrow)) __attribute__((stdcall))">IntPtr</type>
        </field>
        <field name="encodeRenderCommands" access="public">
          <type
            native="void (IRenderPassLayout *, IFramebuffer *, IRenderCommandEncoder **) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="encodeComputeCommands" access="public">
          <type
            native="void (IComputeCommandEncoder **) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="encodeResourceCommands" access="public">
          <type
            native="void (IResourceCommandEncoder **) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="encodeRayTracingCommands" access="public">
          <type
            native="void (IRayTracingCommandEncoder **) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="close" access="public">
          <type native="void () __attribute__((nothrow)) __attribute__((stdcall))">IntPtr</type>
        </field>
        <field name="getNativeHandle" access="public">
          <type native="Result (InteropHandle *) __attribute__((nothrow)) __attribute__((stdcall))"
            >IntPtr</type
          >
        </field>
        <field name="invalidateDescriptorHeapBinding" access="public">
          <type native="void () __attribute__((nothrow)) __attribute__((stdcall))">IntPtr</type>
        </field>
        <field name="ensureInternalDescriptorHeapsBound" access="public">
          <type native="void () __attribute__((nothrow)) __attribute__((stdcall))">IntPtr</type>
        </field>
      </vtbl>
    </struct>
  </namespace>
</bindings>
